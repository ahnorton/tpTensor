(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



BeginPackage["FastIntegrate`"]


FastIntegrate::usage="\!\(\*
StyleBox[\"Mathematica\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"'\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"s\",\nFontSlant->\"Italic\"]\)  Integrate[ ]  tries to do whole expressions at a time instead of term by term.

FastIntegrate[ ]  can be a 100 times faster.
It will also allow \!\(\*
StyleBox[\"Mathematica\",\nFontSlant->\"Italic\"]\) to do integrals which it otherwise gives up and fails on.

Usage is the same as for Integrate[ ] , therefore see:  ? Integrate

--- The integrand f can be a normal or series object  (catered for by the variable 'err' in the code)  
--- The integration can be definite or indefinite.
--- In the case of indefinate integration, the series variable can also be a/the integration variable. 
--- The option Assumptions can be used.";


FastIntegrate1::usage="FastIntegrate1[ ]  is a minor variation on FastIntegrate[ ]. 

The code for  FastIntegrate1[ ]  uses  Expand[ ]  rather than  ExpandAll[ ].  
The two functions are otherwise identical. It is provided for testing --- I'm not sure yet which is faster. 

See:  ? FastIntegrate";


Begin["`Private`"]


Clear[FastIntegrate]
FastIntegrate[f_]:=Print["FastIntegrate[ ] requires 2 or more arguments. See:  ? FastIntegrate"] 
FastIntegrate[f_,args__]:=Module[{f1,flist,err},
err=Integrate[f-f,args];
f1=ExpandAll[Normal[f]];
flist=f1;
If[flist[[0]]=!=Plus,Return[Integrate[f,args]]];flist[[0]]=List;
Total[Integrate[flist,args]]+err]


Clear[FastIntegrate1]
FastIntegrate1[f_]:=Print["FastIntegrate1[ ] requires 2 or more arguments. See:  ? FastIntegrate"] 
FastIntegrate1[f_,args__]:=Module[{f1,flist,err},
err=Integrate[f-f,args];
f1=Expand[Normal[f]];
flist=f1;
If[flist[[0]]=!=Plus,Return[Integrate[f,args]]];flist[[0]]=List;
Total[Integrate[flist,args]]+err]


End[]


EndPackage[]
