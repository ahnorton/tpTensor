(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



BeginPackage["IntegrateOverSphere`"]


IntegrateOverSphere::usage="This package provides the function  IntAngles [ X ,{ \[Theta] , \[Phi] } ],
which is equivalent to  \!\(\*SubsuperscriptBox[\(\[Integral]\), \(\(\\\ \)\(\(\[Phi]\)\(=\)\(0\)\(\\\ \)\)\), \(2  \[Pi]\)]\) \!\(\*SubsuperscriptBox[\(\[Integral]\), \(\(\\\ \)\(\(\[Theta]\)\(=\)\(0\)\(\\\ \)\)\), \(\[Pi]\)]\) X \[DifferentialD]\[Theta] \[DifferentialD]\[Phi] .
X must be polynomial in powers of  Cos[\[Theta]] , Sin[\[Theta]] , Cos[\[Phi]] , Sin[\[Phi]] , or at least be easily 
converted to such a polynomial  (only a few standard transformations are tried).

This routine is typically 100 times faster than Mathematica's built-in  Integrate\[VeryThinSpace][ ]\[VeryThinSpace]\[VeryThinSpace], and
sometimes even a lot faster than that.

See also:  ? IntAngles          (this package).  
                  ? FastIntegrate   (from package FastIntegrate).
";


IntAngles::usage="? IntAngles

IntAngles\[VeryThinSpace][\[VeryThinSpace]X ,{ \[Theta] , \[Phi] }\[VeryThinSpace]]  is equivalent to  \!\(\*SubsuperscriptBox[\(\[Integral]\), \(\(\\\ \)\(\(\[Phi]\)\(=\)\(0\)\(\\\ \)\)\), \(2  \[Pi]\)]\) \!\(\*SubsuperscriptBox[\(\[Integral]\), \(\(\\\ \)\(\(\[Theta]\)\(=\)\(0\)\(\\\ \)\)\), \(\[Pi]\)]\) X \[DifferentialD]\[Theta] \[DifferentialD]\[Phi] .

X must be polynomial in powers of  Cos[\[Theta]] , Sin[\[Theta]] , Cos[\[Phi]] , Sin[\[Phi]] , or at least be easily 
converted to such a polynomial  (only a few standard transformations are tried).

This routine is typically 100 times faster than Mathematica's built-in  Integrate\[VeryThinSpace][ ]\[VeryThinSpace]\[VeryThinSpace], and
sometimes even a lot faster than that.

See also:  ? IntAngles          (this package).  
                  ? FastIntegrate   (from package FastIntegrate).
";


Begin["`Private`"]


Clear[IntTheta]
IntTheta[m_,n_] := IntTheta[m,n]= Module[{\[Theta]},Integrate[Cos[\[Theta]]^m Sin[\[Theta]]^n, {\[Theta],0,\[Pi]}]]


Clear[IntPhi]
IntPhi[m_,n_] := IntPhi[m,n] = Module[{\[Phi]},Integrate[Cos[\[Phi]]^m Sin[\[Phi]]^n, {\[Phi],0,2\[Pi]}]]


Clear[DepQ]
DepQ[y_,x_Symbol]:=!Count[y,x,{-1,Infinity}]===0


Clear[ToTrigPoly]
ToTrigPoly[x_,\[Theta]_,\[Phi]_,c\[Theta]_,s\[Theta]_,c\[Phi]_,s\[Phi]_]:= Module[{y},
y = x//.{Cos[\[Theta]]->c\[Theta],Sin[\[Theta]]->s\[Theta],Cos[\[Phi]]->c\[Phi],Sin[\[Phi]]->s\[Phi]};
If[DepQ[y,\[Theta]]||DepQ[y,\[Phi]],
y = TrigExpand[y]//.{Cos[\[Theta]]->c\[Theta],Sin[\[Theta]]->s\[Theta],Cos[\[Phi]]->c\[Phi],Sin[\[Phi]]->s\[Phi]};,
If[PolyQ[y,{c\[Theta],s\[Theta],c\[Phi],s\[Phi]}],Return[y]],
Print["DepQ problem:"];
Print[y]];
If[DepQ[y,\[Theta]]||DepQ[y,\[Phi]],
y = ExpToTrig[y]//.{Cos[\[Theta]]->c\[Theta],Sin[\[Theta]]->s\[Theta],Cos[\[Phi]]->c\[Phi],Sin[\[Phi]]->s\[Phi]};,
If[PolyQ[y,{c\[Theta],s\[Theta],c\[Phi],s\[Phi]}],Return[y]],
Print["DepQ problem:"];
Print[y]];
If[DepQ[y,\[Theta]]||DepQ[y,\[Phi]],
y = TrigExpand[y]//.{Cos[\[Theta]]->c\[Theta],Sin[\[Theta]]->s\[Theta],Cos[\[Phi]]->c\[Phi],Sin[\[Phi]]->s\[Phi]};,
If[PolyQ[y,{c\[Theta],s\[Theta],c\[Phi],s\[Phi]}],Return[y]],
Print["DepQ problem:"];
Print[y]
];
If[DepQ[y,\[Theta]]||DepQ[y,\[Phi]],
Print[y];
Print["Have not been able to convert the integrand to a trig polynomial"];
Print["with terms of the general form  Cos[\[Theta]\!\(\*SuperscriptBox[\(]\), \(\(a\)\(\\\ \)\)]\)Sin[\[Theta]\!\(\*SuperscriptBox[\(]\), \(b\)]\) Cos[\[Phi]\!\(\*SuperscriptBox[\(]\), \(c\)]\) Sin[\[Phi]\!\(\*SuperscriptBox[\(]\), \(d\)]\) "] ;
Abort[],
If[PolyQ[y,{c\[Theta],s\[Theta],c\[Phi],s\[Phi]}],Return[y]],
Print["DepQ problem:"];
Print[y]
]]


PolyQ[y_,vars_]:=If[PolynomialQ[y,vars],True,
Print["Non-polynomial integrand: "];
Print["   IntAngles is only defined for integrands that are trig polynomial"]; 
Print["   with terms of the general form  Cos[\[Theta]\!\(\*SuperscriptBox[\(]\), \(\(a\)\(\\\ \)\)]\)Sin[\[Theta]\!\(\*SuperscriptBox[\(]\), \(b\)]\) Cos[\[Phi]\!\(\*SuperscriptBox[\(]\), \(c\)]\) Sin[\[Phi]\!\(\*SuperscriptBox[\(]\), \(d\)]\) "] ;
Abort[],
Print["PolyQ problem:"];
Print[y];
Print[vars]]


Clear[IntAngles]
IntAngles[x0_,{\[Theta]_,\[Phi]_}] := If[x0===0,0,
Module[{x,dc,ds,y,z,w,s,m,n,c\[Theta],s\[Theta],c\[Phi],s\[Phi]},
x=ToTrigPoly[x0,\[Theta],\[Phi],c\[Theta],s\[Theta],c\[Phi],s\[Phi]];
dc = Exponent[x,c\[Theta]];
s = 0;
Do[ y = Coefficient[x,c\[Theta],m];
      If[y =!= 0,
         ds = Exponent[y,s\[Theta]];
         Do[ z = Coefficient[y,s\[Theta],n];
               s = s + Expand[z*IntTheta[m,n]],
              {n,0,ds}]],
    {m,0,dc,2}];
If[s===0,w=0,
dc = Exponent[s,c\[Phi]];
w = 0;
Do[ y = Coefficient[s,c\[Phi],m];
     If[y =!= 0,
         ds = Exponent[y,s\[Phi]];
          Do[ z = Coefficient[y,s\[Phi],n];
                w = w + Expand[z*IntPhi[m,n]],
               {n,0,ds,2}]],
    {m,0,dc,2}]];w]]


End[]


EndPackage[]
