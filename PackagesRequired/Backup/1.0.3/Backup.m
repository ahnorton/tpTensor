(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



(* ::Input::Initialization:: *)
If[!TrueQ[Global`$EditModeForBackup],BeginPackage["Backup`"]]


(* ::Input::Initialization:: *)
BackupUsageMsg="StartBackup[ ]  schedules a set of tasks to save your notebook every 3 min, and to make regular backups of it. 
                                      
The directory for the backup files will be  ./<name>_bak   where  ./<name>.nb  is the notebook file.  

The backup files are:

        <name>_session-N.nb   where N = Mod[\[VeryThinSpace]s, 10] and s is the session count. 

                              When  StartBackup[] is executed, the Notebook is saved and then a backup copy of that is made.
                              The last 10 of these initial state backups are kept. Usually  StartBackup[]  would only be run once
                              once per edit session, so you will have backups of the Notebook in its initial state for the last
                              10 edit sessions. The current session count is saved in the file ./<name>_bak/SessionNumber.dat. 

                              Note that all other backup files are saved at times that are random w.r.t. the edited state of the file,
                              so they might contain incomplete statements that you have not finished typing...

        <name>_03min-N.nb     A backup for each 3 min, but only written if it will differ from any of the last backups written.
                              Two file names used, N = 0,1.

        <name>_15min-N.nb     where  N = 0,..3  is the quarter of the hour (4 files).
                              A backup for each new 1/4 hour, but only written if it will differ from the last 1/4 hr backup written.
          
        <name>_hourly-N.nb    where N = 00,..,23  is the hour of the day (24 files)
                              A backup for each new hour, but only written if it will differ from the last hourly backup written.
          
        <name>_daily-ddd.nb   where ddd = Mon, Tue,... is the day of the week (7 files).
                              A backup for each new day, but only written if it will differ from the last daily backup written.
          
        <name>_monthly-N.nb   where N = 01,..,12  is the month of the year (12 files).
                              A backup for each new month, but only written if it will differ from the last monthy backup written. 
    
A full backup set (collected over a year or more) will contain  10 + 2 + 4 + 24 + 7 + 12 = 59  files, none of which are the same.
You will need to sort them by modification time to determine which backups are most recent (that *_hourly-03.nb file that looks 
like it might be a backup from last night, could actually be from months ago unless you were editing in the early hours).

After writing each backup to disk, the built-in Mathematica function FileFormat[ ] is used to check that the written file is recognized
as a notebook file (format \"NB\"). If it is not recognised as such, then it is likely to be a binary mess. Moreover, all subsequent 
saves of your notebook are likely to be corrupted too (even if your already-opened notebook looks OK). When you try to open such a 
notebook you will get an obscure error message from Mathematica, with instructions to

      \"...close it without saving, then check the \"Load entire notebook into memory\" checkbox in the Notebook Options dialog.\"

In other words, \!\(\*
StyleBox[\"your\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"file\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"has\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"been\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"trashed\",\nFontSlant->\"Italic\"]\)  (the instructions mean that from the menu of a new notebook do:  File \[Rule] Open, then select 
your corrupted notebook file in the pop-up dialog, then click on the Options button at the lower right corner of that diaglog, ....).

If the written backup is detected as anything other than format \"NB\", the backup program will issue a pop-up error message and 
then stop running, so as to not over-write good backups with new trash. With luck, you will have lost no more than 3 minutes of work. 
However, notebooks can become corrupted and still be recognised as format \"NB\", so the format check will not catch all crashes and 
there is still a chance that old backups could get replaced by corrupted new backups, and that you wont know this until you try
to re-open your notebook.

Manually saving your notebook (via the File menu or via [Clt]+s) does not interfere in any way with the backup schedule. 

B.T.W., I suspect that using (*  *) for comments within code may have something to do with Mathematica crashing as described above.

See also:  ? StopBackup,  ? DeleteLockFile";


(* ::Input::Initialization:: *)
Backup::usage=BackupUsageMsg;
StartBackup::usage=BackupUsageMsg;


(* ::Input::Initialization:: *)
StopBackup::usage="StopBackup[ ]  Stop backing up. 

If you close your notebook without first executing  StopBackup[ ],  then next time you try to
StartBackup[ ]  you will be prompted to delete a lock-file. 

See also:  ? StartBackup, ? DeleteLockFile";


(* ::Input::Initialization:: *)
DeleteLockFile::usage="DeleteLockFile[ ]  can be used to delete the file  ./<name>_bak/Locked  from the backup directory.";


(* ::Input::Initialization:: *)
BackupRunningQ::usage="BackupRunningQ[\[VeryThinSpace]nb\[VeryThinSpace]]  returns True if there are scheduled backups running for the notebook object nb, 
that were started from EvaluationNotebook[ ]. It returns False otherwise. 

BackupRunningQ[ ]  is short for  BackupRunningQ[ EvaluationNotebook[ ] ]. ";


(* ::Input::Initialization:: *)
If[!TrueQ[Global`$EditModeForBackup],Begin["`Private`"]];


(* ::Input::Initialization:: *)
StopBackup[]:=StopBackup[EvaluationNotebook[]]
StopBackup[nb_]:=Module[{msg,dir},
dir=StringReplace[NotebookFileName[nb],".nb"->"_bak"<>$PathnameSeparator];
If[!FileExistsQ[dir],msg="The backup directory could not be found. Perhaps backup failed to start?"; Return[msg]];
If[BackupRunningQ[nb],
Quiet[RemoveScheduledTask[task[1,nb]]];
Quiet[RemoveScheduledTask[task[2,nb]]];
Quiet[RemoveScheduledTask[task[3,nb]]];
Quiet[RemoveScheduledTask[task[4,nb]]];
Quiet[RemoveScheduledTask[task[5,nb]]];
DeleteFile[dir<>"Locked"];
msg="Backup stopped.";
BackupRunningQ[nb]:=False;
,
msg="Nothing done: Backup was not running."];
msg]


(* ::Input::Initialization:: *)
DeleteLockFile[] :=DeleteLockFile[EvaluationNotebook[]] 
DeleteLockFile[nb_] :=Module[{msg,dir},
dir=StringReplace[NotebookFileName[nb],".nb"->"_bak"<>$PathnameSeparator];
If[TrueQ[BackupRunningQ[nb]],msg="The lock-file can not be deleted while backup is running. Use StopBackup[ ].";Return[msg]];
If[!FileExistsQ[dir<>"Locked"],msg="No lock-file was found.";Return[msg]];
If[LockedBackupQ[nb],DeleteFile[dir<>"Locked"];msg="The lock-file has been deleted.";Return[msg]];
]


(* ::Input::Initialization:: *)
BackupRunningQ[_]:=False
BackupRunningQ[]:=BackupRunningQ[EvaluationNotebook[]] 


(* ::Input::Initialization:: *)
LockedBackupQ[_]:=False
LockedBackupQ[]:=LockedBackupQ[EvaluationNotebook[]] 
LockedBackupQ[nb_]:=Module[{dir},
dir=StringReplace[NotebookFileName[nb],".nb"->"_bak"<>$PathnameSeparator];
FileExistsQ[dir<>"Locked"]]


(* ::Input::Initialization:: *)
LockedMsg[nbfile_] := "Re. "<>nbfile<>"
You appear to already have another copy of this notebook open and running scheduled backups.

You can not (sensibly) backup 2 different copies of the same notebook at the same time to the same 
backup directory. Use the command  StopBackup[ ] in one of the notebooks.

If you \!\(\*
StyleBox[\"do\",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\" \",\nFontSlant->\"Italic\"]\)\!\(\*
StyleBox[\"not\",\nFontSlant->\"Italic\"]\) have another copy of this notebook open and running scheduled backups, then the problem
is just that  StopBackup[ ]  was not run before you closed the notebook last time, and consequently 
the lock-file was not deleted from the backup directory. You can delete the lock-file now by running 
the command  DeleteLockFile[ ]\[VeryThinSpace].
-----------------------------------------------------------------------------------------------------";


(* ::Input::Initialization:: *)
debug=True; 


(* ::Input::Initialization:: *)
debug=False; 


(* ::Input::Initialization:: *)
Clear[StartBackup]
StartBackup[]:=StartBackup[EvaluationNotebook[]]
StartBackup[nb_]:=Module[{msg,nbfile,base,dir,fn,fnsession,minute},
If[TrueQ[BackupRunningQ[nb]],
msg="Nothing done: Backup is already running.";
Return[msg]
];
NotebookSave[nb];
nbfile=NotebookFileName[nb];
base=FileBaseName[nbfile];
dir=StringReplace[nbfile,".nb"->"_bak"<>$PathnameSeparator];
fn=dir<>base<>"_";
If[!DirectoryQ[dir],CreateDirectory[dir];TimeZero[dir]];
If[LockedBackupQ[nb],
Print[LockedMsg[nbfile]];
Return[], 
Export[dir<>"Locked",
{"The existence of this lock-file causes StartBackup[] to abort.",
"Normally  StopBackup[]  is used to delete this file.",
"Locked at "<>ToString[Date[]]},"List"]];
fnsession=fn<>"session-"<>SessionNumber[dir]<>".nb";
If[debug,
Print["StartBackup:"];
Print["   nbfile = ",nbfile];
Print["     base = ",base];
Print["      dir = ",dir];
Print["       fn = ",fn];
Print["fnsession = ",fnsession];
];
update[fnsession,nbfile];
minute=60;
task[1,nb]=RunScheduledTask[min03Task[nb,fn,nbfile],3minute,StartTime[dir,3minute]];
task[2,nb]=RunScheduledTask[min15Task[fn,nbfile],15minute,StartTime[dir,15minute]];
task[3,nb]=RunScheduledTask[hourlyTask[fn,nbfile],60minute,StartTime[dir,60minute]];
task[4,nb]=RunScheduledTask[dailyTask[fn,nbfile],   24*60minute,StartTime[dir,24*60minute ]];
task[5,nb]=RunScheduledTask[monthlyTask[fn,nbfile],31*24*60minute,StartTime[dir,31*24*60minute]];
BackupRunningQ[nb]:=True;
msg="Backup started."
]


(* ::Input::Initialization:: *)
TimeZero[dir_]:= Module[{t0},
If[FileExistsQ[dir<>"TimeZero.dat"],t0=Get[dir<>"TimeZero.dat"],
t0=AbsoluteTime[];
Put[Round[AbsoluteTime[]],dir<>"TimeZero.dat"]];
t0]


(* ::Input::Initialization:: *)
StartTime[dir_,dt_]:=Module[{t0,now},
If[dt===0,Return[AbsoluteTime[]]];
t0 = TimeZero[dir];
now = AbsoluteTime[];
now + dt-Mod[now-t0,dt]
]


(* ::Input::Initialization:: *)
ErrorMsg[nbfile_] := CreateDialog[{TextCell["
WARNING\[VeryThinSpace]:   FileFormat\[VeryThinSpace][ "<>ToString[nbfile]<>" ]  =  "<>"\""<>ToString[FileFormat[nbfile]]<>"\""<>"   but should be  \"NB\".

Your notebook may have become corrupt. Subsequently saved versions of it may not open.
Best to check now. If it does not open without errors, then replace it with a recent backup.

The backup schedule has been stopped to prevent overwritng good backups.
The backup schedule can be re-started with  StartBackup\[VeryThinSpace][\[VeryThinSpace]\[VeryThinSpace]]."],DefaultButton[]}]


(* ::Input::Initialization:: *)
min03Task[nb_,fn_,nbfile_]:=Module[{fn03,min,min03},
If[debug,Print["min03Task:"]];
If[debug,
Print["   nbfile = ",nbfile];
Print["       fn = ",fn];
];
min = DateList[][[5]];
min03=Mod[Quotient[min,3],2];
fn03=fn<>"03min-"<>ToString[min03]<>".nb";
If[debug,Print[nbfile]];
If[debug,Print[fn03]];
If["ModifiedInMemory"/.NotebookInformation[nb],
If[debug,Print["Modified"]];
Update03[nbfile] = True;
Update15[nbfile]= True;
UpdateHourly[nbfile] = True;
UpdateDaily[nbfile] = True;
UpdateMonthly[nbfile] = True;
NotebookSave[nb];
If[!FileFormat[nbfile]==="NB",
ErrorMsg[nbfile];
StopBackup[]]
];
If[Update03[nbfile],
update[fn03,nbfile];
Update03[nbfile]=False;
]]


(* ::Input::Initialization:: *)
min15Task[fn_,nbfile_]:=Module[{fn15,min,min15},
If[debug,Print["min15Task"]];
min = DateList[][[5]];
min15=Mod[Quotient[min,15],4];
fn15=fn<>"15min-"<>ToString[min15]<>".nb";
If[debug,Print[fn15]];
If[Update15[nbfile],
update[fn15,nbfile];
Update15[nbfile]=False;
]]


(* ::Input::Initialization:: *)
hourlyTask[fn_,nbfile_]:=Module[{fnhr,hr,min15},
If[debug,Print["minhrTask"]];
hr = DateList[][[4]];
fnhr =If[hr<10,
fn<>"hourly-0"<>ToString[hr]<>".nb",
fn<>"hourly-"<>ToString[hr]<>".nb"];
If[debug,Print[fnhr]];
If[UpdateHourly[nbfile],
update[fnhr,nbfile];
UpdateHourly[nbfile]=False;
]]


(* ::Input::Initialization:: *)
dailyTask[fn_,nbfile_]:=Module[{fnday},
If[debug,Print["dailyTask"]];
fnday =fn<>"daily-"<>DateString["DayNameShort"]<>".nb";
If[debug,Print[fnday]];
If[UpdateDaily[nbfile],
update[fnday,nbfile];
UpdateDaily[nbfile]=False;
]]


(* ::Input::Initialization:: *)
monthlyTask[fn_,nbfile_]:=Module[{fnmonth},
If[debug,Print["monthlyTask"]];
fnmonth =fn<>"monthly-"<>DateString["Month"]<>".nb";
If[debug,Print[fnmonth]];
If[UpdateMonthly[nbfile],
update[fnmonth,nbfile];
UpdateMonthly[nbfile]=False;
]]


(* ::Input::Initialization:: *)
update[f_,nbfile_]:=(
If[debug,Print["update[ ",f," ]" ]];
If[FileExistsQ[f],RenameFile[f,f<>"temp"]];
CopyFile[nbfile,f];
If[FileExistsQ[f<>"temp"],DeleteFile[f<>"temp"];];
)


(* ::Input::Initialization:: *)
SessionNumber[dir_]:= Module[{s},
If[FileExistsQ[dir<>"SessionNumber.dat"],s=Get[dir<>"SessionNumber.dat"]+1,s=0];
Put[s,dir<>"SessionNumber.dat"];
If[debug,Print["SessionNumber = ",s,"   Mod[s,10] = ",Mod[s,10] ]];
ToString[Mod[s,10]]]


(* ::Input::Initialization:: *)
If[!TrueQ[Global`$EditModeForBackup],
End[];
EndPackage[]];


(* ::Input::Initialization:: *)
FilesSameQ[f1_,f2_]:=Quiet[(FileHash[f1]===FileHash[f2])]



