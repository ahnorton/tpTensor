(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 11.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[     83697,       1817]
NotebookOptionsPosition[     79804,       1700]
NotebookOutlinePosition[     80140,       1715]
CellTagsIndexPosition[     80097,       1712]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell[BoxData["\[IndentingNewLine]"], "Input"],

Cell[TextData[{
 "This file is an ",
 StyleBox["Example Notebook",
  FontSlant->"Italic"],
 " for tpTensor.\nCopyright \[Copyright] 2015 - <Your Name Here. Adjust \
year(s) of version(s) of this example file as necessary>.  \n\ntpTensor is a \
computer algebra package for index-free tensor computations. \nCopyright \
\[Copyright] 2015  Andrew H. Norton."
}], "Text",
 FontSize->16],

Cell[BoxData["\[IndentingNewLine]"], "Input"],

Cell[TextData[{
 "This file is an ",
 StyleBox["Example Notebook",
  FontSlant->"Italic"],
 " for tpTensor.\nCopyright \[Copyright] 2015 - <Your Name Here. Adjust \
year(s) of version(s) of this example file as necessary>.  \n\ntpTensor is a \
computer algebra package for index-free tensor computations. \nCopyright \
\[Copyright] 2015  Andrew H. Norton."
}], "Text",
 FontFamily->"Bitstream Vera Serif",
 FontSize->16],

Cell[BoxData["\[IndentingNewLine]"], "Input"],

Cell[TextData[{
 "This file is an ",
 StyleBox["Example Notebook",
  FontSlant->"Italic"],
 " for tpTensor.\nCopyright \[Copyright] 2015 - <Your Name Here. Adjust \
year(s) of version(s) of this example file as necessary>.  \n\ntpTensor is a \
computer algebra package for index-free tensor computations. \nCopyright \
\[Copyright] 2015  Andrew H. Norton."
}], "Text",
 FontFamily->"Clear Sans",
 FontSize->16],

Cell[BoxData["\[IndentingNewLine]"], "Input"],

Cell[TextData[{
 "This file is an ",
 StyleBox["Example Notebook",
  FontSlant->"Italic"],
 " for tpTensor.\nCopyright \[Copyright] 2015 - <Your Name Here. Adjust \
year(s) of version(s) of this example file as necessary>.  \n\ntpTensor is a \
computer algebra package for index-free tensor computations. \nCopyright \
\[Copyright] 2015  Andrew H. Norton."
}], "Text",
 FontFamily->"Verdana"],

Cell[BoxData["\[IndentingNewLine]"], "Input"],

Cell[TextData[{
 "This file is an ",
 StyleBox["Example Notebook",
  FontSlant->"Italic"],
 " for tpTensor.\nCopyright \[Copyright] 2015 - <Your Name Here. Adjust \
year(s) of version(s) of this example file as necessary>.  \n\ntpTensor is a \
computer algebra package for index-free tensor computations. \nCopyright \
\[Copyright] 2015 - Andrew H. Norton. -"
}], "Text",
 FontFamily->"Verdana",
 FontSize->16],

Cell[BoxData["\[IndentingNewLine]"], "Input"],

Cell[TextData[{
 "This file is an ",
 StyleBox["Example Notebook",
  FontSlant->"Italic"],
 " for tpTensor.\nCopyright \[Copyright] 2015 - <Your Name Here. Adjust \
year(s) of version(s) of this example file as necessary>.  \n\ntpTensor is a \
computer algebra package for index-free tensor computations. \nCopyright \
\[Copyright] 2015 - Andrew H. Norton. -"
}], "Text",
 FontFamily->"Utopia",
 FontSize->16],

Cell[BoxData["\[IndentingNewLine]"], "Input"],

Cell[TextData[{
 "This file is an ",
 StyleBox["Example Notebook",
  FontSlant->"Italic"],
 " for tpTensor.\nCopyright \[Copyright] 2015 - <Your Name Here. Adjust \
year(s) of version(s) of this example file as necessary>.  \n\ntpTensor is a \
computer algebra package for index-free tensor computations. \nCopyright \
\[Copyright] 2015 - Andrew H. Norton. -"
}], "Text",
 FontFamily->"Utopia",
 FontSize->18],

Cell[BoxData["\[IndentingNewLine]"], "Input"],

Cell[TextData[{
 "This file is an ",
 StyleBox["Example Notebook",
  FontSlant->"Italic"],
 " for tpTensor.\nCopyright \[Copyright] 2015  <Your Name Here. Adjust \
year(s) of version(s) of this example file as necessary>.  \n\ntpTensor is a \
computer algebra package for index-free tensor computations. \nCopyright \
\[Copyright] 2015 - Andrew H. Norton."
}], "Text",
 FontSize->18],

Cell[BoxData["\[IndentingNewLine]"], "Input"],

Cell[TextData[{
 "This file is an ",
 StyleBox["Example Notebook",
  FontSlant->"Italic"],
 " for tpTensor.\nCopyright \[Copyright] 2015 - <Your Name Here. Adjust \
year(s) of version(s) of this example file as necessary>.  \n\ntpTensor is a \
computer algebra package for index-free tensor computations. \nCopyright \
\[Copyright] 2015  Andrew H. Norton."
}], "Text",
 FontFamily->"Titillium Web",
 FontSize->18],

Cell[BoxData["\[IndentingNewLine]"], "Input"],

Cell[TextData[{
 "This file is an ",
 StyleBox["Example Notebook",
  FontSlant->"Italic"],
 " for tpTensor.\nCopyright \[Copyright] 2015 -  <Your Name Here. Adjust \
year(s) of version(s) of this example file as necessary>.  \n\ntpTensor is a \
computer algebra package for index-free tensor computations. \nCopyright \
\[Copyright] 2015  Andrew H. Norton."
}], "Text",
 FontFamily->"Trebuchet MS",
 FontSize->18],

Cell[BoxData["\[IndentingNewLine]"], "Input"],

Cell[TextData[{
 "This file is an ",
 StyleBox["Example Notebook",
  FontSlant->"Italic"],
 " for tpTensor.\nCopyright \[Copyright] 2015 -  <Your Name Here. Adjust \
year(s) of version(s) of this example file as necessary>.  \n\ntpTensor is a \
computer algebra package for index-free tensor computations. \nCopyright \
\[Copyright] 2015  Andrew H. Norton."
}], "Text",
 FontFamily->"Utopia",
 FontSize->18],

Cell[BoxData["\[IndentingNewLine]"], "Input"],

Cell[TextData[{
 "This file is an ",
 StyleBox["Example Notebook",
  FontSlant->"Italic"],
 " for tpTensor.\nCopyright \[Copyright] 2015 -  <Your Name Here. Adjust \
year(s) of version(s) of this example file as necessary>.  \n\ntpTensor is a \
computer algebra package for index-free tensor computations. \nCopyright \
\[Copyright] 2015  Andrew H. Norton."
}], "Text",
 FontFamily->"Lato",
 FontSize->16],

Cell[BoxData["\[IndentingNewLine]"], "Input"],

Cell["\<\
For special characters see:  tutorial/StructuralElementsAndKeyboardCharacters \
 (\[LeftArrow] highlight and use F1)
...eg. invisible comma for index lists.\
\>", "Text",
 CellChangeTimes->{{3.682970049231207*^9, 3.682970143583846*^9}, {
  3.682970212190852*^9, 3.682970225006811*^9}, {3.68297028619014*^9, 
  3.6829702984939213`*^9}},
 FontFamily->"Lato",
 FontSize->16,
 CellID->1368526407],

Cell[TextData[{
 "We want to use  InputField[ ]   rather than just using quoted strings, \
because then  \[OpenCurlyDoubleQuote]\\\[CloseCurlyDoubleQuote]  can be typed \
easily (rather than \[OpenCurlyDoubleQuote]\\\\\[CloseCurlyDoubleQuote]) for ",
 Cell[BoxData[
  FormBox[
   StyleBox[
    RowBox[{"T", 
     AdjustmentBox["E",
      BoxBaselineShift->0.5,
      BoxMargins->{{-0.3, 0}, {0, 0}}], "X"}],
    SingleLetterItalics->False], TraditionalForm]]],
 " input.\nBut  InputField[ ]   ignores  Enter  ( ReturnKeyDown ).  So it \
needs some work..."
}], "Text",
 CellChangeTimes->{{3.6817006835285473`*^9, 3.6817007999683247`*^9}, {
  3.6828384759313917`*^9, 3.682838483867321*^9}, {3.6828807906757183`*^9, 
  3.682880849506692*^9}},
 FontFamily->"Lato",
 FontSize->16],

Cell["\<\
We put an initial \[OpenCurlyDoubleQuote] \[CloseCurlyDoubleQuote]  in the \
input box and then backwards search for  \[OpenCurlyDoubleQuote] \
\[CloseCurlyDoubleQuote]  to put the cursor in the right place to start \
typing. Then we paste the prompt.
It requires that  the evaluation function not be a module variable (like \
{len,str,ans} ), so we call it  $InputTextCellEval.
When  Shift+Enter  is pressed, the function specified by the 2nd argument is \
applied to the string.  If no 2nd arg, then Print  is assumed.\
\>", "Text",
 CellChangeTimes->{{3.681689594396791*^9, 3.68168959802897*^9}, 
   3.681698181942627*^9, {3.681699286329458*^9, 3.681699419815811*^9}, {
   3.681700102847715*^9, 3.681700150191111*^9}, {3.681700272637597*^9, 
   3.681700309613242*^9}, {3.681700392012291*^9, 3.681700454100113*^9}, 
   3.681700643497121*^9, {3.681701203330309*^9, 3.6817012644820232`*^9}, {
   3.681701761163684*^9, 3.68170183396332*^9}, {3.6817033914643*^9, 
   3.681703521255124*^9}, {3.681703552198368*^9, 3.681703571687316*^9}, {
   3.6828812015325127`*^9, 3.682881225084382*^9}, {3.682881280337739*^9, 
   3.682881283147214*^9}, {3.682881325226366*^9, 3.682881366825886*^9}, {
   3.682887999725142*^9, 3.682888057452407*^9}},
 FontFamily->"Lato",
 FontSize->16],

Cell[BoxData["\[IndentingNewLine]"], "Input"],

Cell["\<\
For special characters see:  tutorial/StructuralElementsAndKeyboardCharacters \
 (\[LeftArrow] highlight and use F1)
...eg. invisible comma for index lists.\
\>", "Text",
 CellChangeTimes->{{3.682970049231207*^9, 3.682970143583846*^9}, {
  3.682970212190852*^9, 3.682970225006811*^9}, {3.68297028619014*^9, 
  3.6829702984939213`*^9}},
 FontFamily->"Droid Sans",
 FontSize->16,
 CellID->1225378313],

Cell[TextData[{
 "We want to use  InputField[ ]   rather than just using quoted strings, \
because then  \[OpenCurlyDoubleQuote]\\\[CloseCurlyDoubleQuote]  can be typed \
easily (rather than \[OpenCurlyDoubleQuote]\\\\\[CloseCurlyDoubleQuote]) for ",
 Cell[BoxData[
  FormBox[
   StyleBox[
    RowBox[{"T", 
     AdjustmentBox["E",
      BoxBaselineShift->0.5,
      BoxMargins->{{-0.3, 0}, {0, 0}}], "X"}],
    SingleLetterItalics->False], TraditionalForm]]],
 " input.\nBut  InputField[ ]   ignores  Enter  ( ReturnKeyDown ).  So it \
needs some work..."
}], "Text",
 CellChangeTimes->{{3.6817006835285473`*^9, 3.6817007999683247`*^9}, {
  3.6828384759313917`*^9, 3.682838483867321*^9}, {3.6828807906757183`*^9, 
  3.682880849506692*^9}},
 FontFamily->"Droid Sans",
 FontSize->16],

Cell["\<\
We put an initial \[OpenCurlyDoubleQuote] \[CloseCurlyDoubleQuote]  in the \
input box and then backwards search for  \[OpenCurlyDoubleQuote] \
\[CloseCurlyDoubleQuote]  to put the cursor in the right place to start \
typing. Then we paste the prompt.
It requires that  the evaluation function not be a module variable (like \
{len,str,ans} ), so we call it  $InputTextCellEval.
When  Shift+Enter  is pressed, the function specified by the 2nd argument is \
applied to the string.  If no 2nd arg, then Print  is assumed.\
\>", "Text",
 CellChangeTimes->{{3.681689594396791*^9, 3.68168959802897*^9}, 
   3.681698181942627*^9, {3.681699286329458*^9, 3.681699419815811*^9}, {
   3.681700102847715*^9, 3.681700150191111*^9}, {3.681700272637597*^9, 
   3.681700309613242*^9}, {3.681700392012291*^9, 3.681700454100113*^9}, 
   3.681700643497121*^9, {3.681701203330309*^9, 3.6817012644820232`*^9}, {
   3.681701761163684*^9, 3.68170183396332*^9}, {3.6817033914643*^9, 
   3.681703521255124*^9}, {3.681703552198368*^9, 3.681703571687316*^9}, {
   3.6828812015325127`*^9, 3.682881225084382*^9}, {3.682881280337739*^9, 
   3.682881283147214*^9}, {3.682881325226366*^9, 3.682881366825886*^9}, {
   3.682887999725142*^9, 3.682888057452407*^9}},
 FontFamily->"Droid Sans",
 FontSize->16],

Cell[BoxData["\[IndentingNewLine]"], "Input"],

Cell["\<\
For special characters see:  tutorial/StructuralElementsAndKeyboardCharacters \
 (\[LeftArrow] highlight and use F1)
...eg. invisible comma for index lists.\
\>", "Text",
 CellChangeTimes->{{3.682970049231207*^9, 3.682970143583846*^9}, {
  3.682970212190852*^9, 3.682970225006811*^9}, {3.68297028619014*^9, 
  3.6829702984939213`*^9}},
 FontFamily->"FreeSans",
 FontSize->16,
 CellID->1844278699],

Cell[TextData[{
 "We want to use  InputField[ ]   rather than just using quoted strings, \
because then  \[OpenCurlyDoubleQuote]\\\[CloseCurlyDoubleQuote]  can be typed \
easily (rather than \[OpenCurlyDoubleQuote]\\\\\[CloseCurlyDoubleQuote]) for ",
 Cell[BoxData[
  FormBox[
   StyleBox[
    RowBox[{"T", 
     AdjustmentBox["E",
      BoxBaselineShift->0.5,
      BoxMargins->{{-0.3, 0}, {0, 0}}], "X"}],
    SingleLetterItalics->False], TraditionalForm]]],
 " input.\nBut  InputField[ ]   ignores  Enter  ( ReturnKeyDown ).  So it \
needs some work..."
}], "Text",
 CellChangeTimes->{{3.6817006835285473`*^9, 3.6817007999683247`*^9}, {
  3.6828384759313917`*^9, 3.682838483867321*^9}, {3.6828807906757183`*^9, 
  3.682880849506692*^9}},
 FontFamily->"FreeSans",
 FontSize->16],

Cell["\<\
We put an initial \[OpenCurlyDoubleQuote] \[CloseCurlyDoubleQuote]  in the \
input box and then backwards search for  \[OpenCurlyDoubleQuote] \
\[CloseCurlyDoubleQuote]  to put the cursor in the right place to start \
typing. Then we paste the prompt.
It requires that  the evaluation function not be a module variable (like \
{len,str,ans} ), so we call it  $InputTextCellEval.
When  Shift+Enter  is pressed, the function specified by the 2nd argument is \
applied to the string.  If no 2nd arg, then Print  is assumed.\
\>", "Text",
 CellChangeTimes->{{3.681689594396791*^9, 3.68168959802897*^9}, 
   3.681698181942627*^9, {3.681699286329458*^9, 3.681699419815811*^9}, {
   3.681700102847715*^9, 3.681700150191111*^9}, {3.681700272637597*^9, 
   3.681700309613242*^9}, {3.681700392012291*^9, 3.681700454100113*^9}, 
   3.681700643497121*^9, {3.681701203330309*^9, 3.6817012644820232`*^9}, {
   3.681701761163684*^9, 3.68170183396332*^9}, {3.6817033914643*^9, 
   3.681703521255124*^9}, {3.681703552198368*^9, 3.681703571687316*^9}, {
   3.6828812015325127`*^9, 3.682881225084382*^9}, {3.682881280337739*^9, 
   3.682881283147214*^9}, {3.682881325226366*^9, 3.682881366825886*^9}, {
   3.682887999725142*^9, 3.682888057452407*^9}},
 FontFamily->"FreeSans",
 FontSize->16],

Cell[BoxData["\[IndentingNewLine]"], "Input"],

Cell["\<\
For special characters see:  tutorial/StructuralElementsAndKeyboardCharacters \
 (\[LeftArrow] highlight and use F1)
...eg. invisible comma for index lists.\
\>", "Text",
 CellChangeTimes->{{3.682970049231207*^9, 3.682970143583846*^9}, {
  3.682970212190852*^9, 3.682970225006811*^9}, {3.68297028619014*^9, 
  3.6829702984939213`*^9}},
 FontFamily->"Latin Modern Roman",
 FontSize->16,
 CellID->920795920],

Cell[TextData[{
 "We want to use  InputField[ ]   rather than just using quoted strings, \
because then  \[OpenCurlyDoubleQuote]\\\[CloseCurlyDoubleQuote]  can be typed \
easily (rather than \[OpenCurlyDoubleQuote]\\\\\[CloseCurlyDoubleQuote]) for ",
 Cell[BoxData[
  FormBox[
   StyleBox[
    RowBox[{"T", 
     AdjustmentBox["E",
      BoxBaselineShift->0.5,
      BoxMargins->{{-0.3, 0}, {0, 0}}], "X"}],
    SingleLetterItalics->False], TraditionalForm]]],
 " input.\nBut  InputField[ ]   ignores  Enter  ( ReturnKeyDown ).  So it \
needs some work..."
}], "Text",
 CellChangeTimes->{{3.6817006835285473`*^9, 3.6817007999683247`*^9}, {
  3.6828384759313917`*^9, 3.682838483867321*^9}, {3.6828807906757183`*^9, 
  3.682880849506692*^9}},
 FontFamily->"Latin Modern Roman",
 FontSize->16],

Cell["\<\
We put an initial \[OpenCurlyDoubleQuote] \[CloseCurlyDoubleQuote]  in the \
input box and then backwards search for  \[OpenCurlyDoubleQuote] \
\[CloseCurlyDoubleQuote]  to put the cursor in the right place to start \
typing. Then we paste the prompt.
It requires that  the evaluation function not be a module variable (like \
{len,str,ans} ), so we call it  $InputTextCellEval.
When  Shift+Enter  is pressed, the function specified by the 2nd argument is \
applied to the string.  If no 2nd arg, then Print  is assumed.\
\>", "Text",
 CellChangeTimes->{{3.681689594396791*^9, 3.68168959802897*^9}, 
   3.681698181942627*^9, {3.681699286329458*^9, 3.681699419815811*^9}, {
   3.681700102847715*^9, 3.681700150191111*^9}, {3.681700272637597*^9, 
   3.681700309613242*^9}, {3.681700392012291*^9, 3.681700454100113*^9}, 
   3.681700643497121*^9, {3.681701203330309*^9, 3.6817012644820232`*^9}, {
   3.681701761163684*^9, 3.68170183396332*^9}, {3.6817033914643*^9, 
   3.681703521255124*^9}, {3.681703552198368*^9, 3.681703571687316*^9}, {
   3.6828812015325127`*^9, 3.682881225084382*^9}, {3.682881280337739*^9, 
   3.682881283147214*^9}, {3.682881325226366*^9, 3.682881366825886*^9}, {
   3.682887999725142*^9, 3.682888057452407*^9}},
 FontFamily->"Latin Modern Roman",
 FontSize->16],

Cell[BoxData["\[IndentingNewLine]"], "Input"],

Cell["\<\
For special characters see:  tutorial/StructuralElementsAndKeyboardCharacters \
 (\[LeftArrow] highlight and use F1)
...eg. invisible comma for index lists.\
\>", "Text",
 CellChangeTimes->{{3.682970049231207*^9, 3.682970143583846*^9}, {
  3.682970212190852*^9, 3.682970225006811*^9}, {3.68297028619014*^9, 
  3.6829702984939213`*^9}},
 FontFamily->"Latin Modern Roman",
 FontSize->18,
 CellID->1273698402],

Cell[TextData[{
 "We want to use  InputField[ ]   rather than just using quoted strings, \
because then  \[OpenCurlyDoubleQuote]\\\[CloseCurlyDoubleQuote]  can be typed \
easily (rather than \[OpenCurlyDoubleQuote]\\\\\[CloseCurlyDoubleQuote]) for ",
 Cell[BoxData[
  FormBox[
   StyleBox[
    RowBox[{"T", 
     AdjustmentBox["E",
      BoxBaselineShift->0.5,
      BoxMargins->{{-0.3, 0}, {0, 0}}], "X"}],
    SingleLetterItalics->False], TraditionalForm]]],
 " input.\nBut  InputField[ ]   ignores  Enter  ( ReturnKeyDown ).  So it \
needs some work..."
}], "Text",
 CellChangeTimes->{{3.6817006835285473`*^9, 3.6817007999683247`*^9}, {
  3.6828384759313917`*^9, 3.682838483867321*^9}, {3.6828807906757183`*^9, 
  3.682880849506692*^9}},
 FontFamily->"Latin Modern Roman",
 FontSize->18],

Cell["\<\
We put an initial \[OpenCurlyDoubleQuote] \[CloseCurlyDoubleQuote]  in the \
input box and then backwards search for  \[OpenCurlyDoubleQuote] \
\[CloseCurlyDoubleQuote]  to put the cursor in the right place to start \
typing. Then we paste the prompt.
It requires that  the evaluation function not be a module variable (like \
{len,str,ans} ), so we call it  $InputTextCellEval.
When  Shift+Enter  is pressed, the function specified by the 2nd argument is \
applied to the string.  If no 2nd arg, then Print  is assumed.\
\>", "Text",
 CellChangeTimes->{{3.681689594396791*^9, 3.68168959802897*^9}, 
   3.681698181942627*^9, {3.681699286329458*^9, 3.681699419815811*^9}, {
   3.681700102847715*^9, 3.681700150191111*^9}, {3.681700272637597*^9, 
   3.681700309613242*^9}, {3.681700392012291*^9, 3.681700454100113*^9}, 
   3.681700643497121*^9, {3.681701203330309*^9, 3.6817012644820232`*^9}, {
   3.681701761163684*^9, 3.68170183396332*^9}, {3.6817033914643*^9, 
   3.681703521255124*^9}, {3.681703552198368*^9, 3.681703571687316*^9}, {
   3.6828812015325127`*^9, 3.682881225084382*^9}, {3.682881280337739*^9, 
   3.682881283147214*^9}, {3.682881325226366*^9, 3.682881366825886*^9}, {
   3.682887999725142*^9, 3.682888057452407*^9}},
 FontFamily->"Latin Modern Roman",
 FontSize->18],

Cell[BoxData["\[IndentingNewLine]"], "Input"],

Cell["\<\
For special characters see:  tutorial/StructuralElementsAndKeyboardCharacters \
 (\[LeftArrow] highlight and use F1)
...eg. invisible comma for index lists.\
\>", "Text",
 CellChangeTimes->{{3.682970049231207*^9, 3.682970143583846*^9}, {
  3.682970212190852*^9, 3.682970225006811*^9}, {3.68297028619014*^9, 
  3.6829702984939213`*^9}},
 FontFamily->"Latin Modern Mono Light",
 FontSize->16,
 CellID->1986195952],

Cell[TextData[{
 "We want to use  InputField[ ]   rather than just using quoted strings, \
because then  \[OpenCurlyDoubleQuote]\\\[CloseCurlyDoubleQuote]  can be typed \
easily (rather than \[OpenCurlyDoubleQuote]\\\\\[CloseCurlyDoubleQuote]) for ",
 Cell[BoxData[
  FormBox[
   StyleBox[
    RowBox[{"T", 
     AdjustmentBox["E",
      BoxBaselineShift->0.5,
      BoxMargins->{{-0.3, 0}, {0, 0}}], "X"}],
    SingleLetterItalics->False], TraditionalForm]]],
 " input.\nBut  InputField[ ]   ignores  Enter  ( ReturnKeyDown ).  So it \
needs some work..."
}], "Text",
 CellChangeTimes->{{3.6817006835285473`*^9, 3.6817007999683247`*^9}, {
  3.6828384759313917`*^9, 3.682838483867321*^9}, {3.6828807906757183`*^9, 
  3.682880849506692*^9}},
 FontFamily->"Latin Modern Mono Light",
 FontSize->16],

Cell["\<\
We put an initial \[OpenCurlyDoubleQuote] \[CloseCurlyDoubleQuote]  in the \
input box and then backwards search for  \[OpenCurlyDoubleQuote] \
\[CloseCurlyDoubleQuote]  to put the cursor in the right place to start \
typing. Then we paste the prompt.
It requires that  the evaluation function not be a module variable (like \
{len,str,ans} ), so we call it  $InputTextCellEval.
When  Shift+Enter  is pressed, the function specified by the 2nd argument is \
applied to the string.  If no 2nd arg, then Print  is assumed.\
\>", "Text",
 CellChangeTimes->{{3.681689594396791*^9, 3.68168959802897*^9}, 
   3.681698181942627*^9, {3.681699286329458*^9, 3.681699419815811*^9}, {
   3.681700102847715*^9, 3.681700150191111*^9}, {3.681700272637597*^9, 
   3.681700309613242*^9}, {3.681700392012291*^9, 3.681700454100113*^9}, 
   3.681700643497121*^9, {3.681701203330309*^9, 3.6817012644820232`*^9}, {
   3.681701761163684*^9, 3.68170183396332*^9}, {3.6817033914643*^9, 
   3.681703521255124*^9}, {3.681703552198368*^9, 3.681703571687316*^9}, {
   3.6828812015325127`*^9, 3.682881225084382*^9}, {3.682881280337739*^9, 
   3.682881283147214*^9}, {3.682881325226366*^9, 3.682881366825886*^9}, {
   3.682887999725142*^9, 3.682888057452407*^9}},
 FontFamily->"Latin Modern Mono Light",
 FontSize->16],

Cell[BoxData["\[IndentingNewLine]"], "Input"],

Cell["\<\
For special characters see:  tutorial/StructuralElementsAndKeyboardCharacters \
 (\[LeftArrow] highlight and use F1)
...eg. invisible comma for index lists.\
\>", "Text",
 CellChangeTimes->{{3.682970049231207*^9, 3.682970143583846*^9}, {
  3.682970212190852*^9, 3.682970225006811*^9}, {3.68297028619014*^9, 
  3.6829702984939213`*^9}},
 FontFamily->"Latin Modern Sans",
 FontSize->16,
 CellID->1549376863],

Cell[TextData[{
 "We want to use  InputField[ ]   rather than just using quoted strings, \
because then  \[OpenCurlyDoubleQuote]\\\[CloseCurlyDoubleQuote]  can be typed \
easily (rather than \[OpenCurlyDoubleQuote]\\\\\[CloseCurlyDoubleQuote]) for ",
 Cell[BoxData[
  FormBox[
   StyleBox[
    RowBox[{"T", 
     AdjustmentBox["E",
      BoxBaselineShift->0.5,
      BoxMargins->{{-0.3, 0}, {0, 0}}], "X"}],
    SingleLetterItalics->False], TraditionalForm]]],
 " input.\nBut  InputField[ ]   ignores  Enter  ( ReturnKeyDown ).  So it \
needs some work..."
}], "Text",
 CellChangeTimes->{{3.6817006835285473`*^9, 3.6817007999683247`*^9}, {
  3.6828384759313917`*^9, 3.682838483867321*^9}, {3.6828807906757183`*^9, 
  3.682880849506692*^9}},
 FontFamily->"Latin Modern Sans",
 FontSize->16],

Cell["\<\
We put an initial \[OpenCurlyDoubleQuote] \[CloseCurlyDoubleQuote]  in the \
input box and then backwards search for  \[OpenCurlyDoubleQuote] \
\[CloseCurlyDoubleQuote]  to put the cursor in the right place to start \
typing. Then we paste the prompt.
It requires that  the evaluation function not be a module variable (like \
{len,str,ans} ), so we call it  $InputTextCellEval.
When  Shift+Enter  is pressed, the function specified by the 2nd argument is \
applied to the string.  If no 2nd arg, then Print  is assumed.\
\>", "Text",
 CellChangeTimes->{{3.681689594396791*^9, 3.68168959802897*^9}, 
   3.681698181942627*^9, {3.681699286329458*^9, 3.681699419815811*^9}, {
   3.681700102847715*^9, 3.681700150191111*^9}, {3.681700272637597*^9, 
   3.681700309613242*^9}, {3.681700392012291*^9, 3.681700454100113*^9}, 
   3.681700643497121*^9, {3.681701203330309*^9, 3.6817012644820232`*^9}, {
   3.681701761163684*^9, 3.68170183396332*^9}, {3.6817033914643*^9, 
   3.681703521255124*^9}, {3.681703552198368*^9, 3.681703571687316*^9}, {
   3.6828812015325127`*^9, 3.682881225084382*^9}, {3.682881280337739*^9, 
   3.682881283147214*^9}, {3.682881325226366*^9, 3.682881366825886*^9}, {
   3.682887999725142*^9, 3.682888057452407*^9}},
 FontFamily->"Latin Modern Sans",
 FontSize->16],

Cell[BoxData["\[IndentingNewLine]"], "Input"],

Cell["\<\
For special characters see:  tutorial/StructuralElementsAndKeyboardCharacters \
 (\[LeftArrow] highlight and use F1)
...eg. invisible comma for index lists.\
\>", "Text",
 CellChangeTimes->{{3.682970049231207*^9, 3.682970143583846*^9}, {
  3.682970212190852*^9, 3.682970225006811*^9}, {3.68297028619014*^9, 
  3.6829702984939213`*^9}},
 FontFamily->"Latin Modern Sans",
 FontSize->18,
 CellID->1160003082],

Cell[TextData[{
 "We want to use  InputField[ ]   rather than just using quoted strings, \
because then  \[OpenCurlyDoubleQuote]\\\[CloseCurlyDoubleQuote]  can be typed \
easily (rather than \[OpenCurlyDoubleQuote]\\\\\[CloseCurlyDoubleQuote]) for ",
 Cell[BoxData[
  FormBox[
   StyleBox[
    RowBox[{"T", 
     AdjustmentBox["E",
      BoxBaselineShift->0.5,
      BoxMargins->{{-0.3, 0}, {0, 0}}], "X"}],
    SingleLetterItalics->False], TraditionalForm]]],
 " input.\nBut  InputField[ ]   ignores  Enter  ( ReturnKeyDown ).  So it \
needs some work..."
}], "Text",
 CellChangeTimes->{{3.6817006835285473`*^9, 3.6817007999683247`*^9}, {
  3.6828384759313917`*^9, 3.682838483867321*^9}, {3.6828807906757183`*^9, 
  3.682880849506692*^9}},
 FontFamily->"Latin Modern Sans",
 FontSize->18],

Cell["\<\
We put an initial \[OpenCurlyDoubleQuote] \[CloseCurlyDoubleQuote]  in the \
input box and then backwards search for  \[OpenCurlyDoubleQuote] \
\[CloseCurlyDoubleQuote]  to put the cursor in the right place to start \
typing. Then we paste the prompt.
It requires that  the evaluation function not be a module variable (like \
{len,str,ans} ), so we call it  $InputTextCellEval.
When  Shift+Enter  is pressed, the function specified by the 2nd argument is \
applied to the string.  If no 2nd arg, then Print  is assumed.\
\>", "Text",
 CellChangeTimes->{{3.681689594396791*^9, 3.68168959802897*^9}, 
   3.681698181942627*^9, {3.681699286329458*^9, 3.681699419815811*^9}, {
   3.681700102847715*^9, 3.681700150191111*^9}, {3.681700272637597*^9, 
   3.681700309613242*^9}, {3.681700392012291*^9, 3.681700454100113*^9}, 
   3.681700643497121*^9, {3.681701203330309*^9, 3.6817012644820232`*^9}, {
   3.681701761163684*^9, 3.68170183396332*^9}, {3.6817033914643*^9, 
   3.681703521255124*^9}, {3.681703552198368*^9, 3.681703571687316*^9}, {
   3.6828812015325127`*^9, 3.682881225084382*^9}, {3.682881280337739*^9, 
   3.682881283147214*^9}, {3.682881325226366*^9, 3.682881366825886*^9}, {
   3.682887999725142*^9, 3.682888057452407*^9}},
 FontFamily->"Latin Modern Sans",
 FontSize->18],

Cell[BoxData["\[IndentingNewLine]"], "Input"],

Cell["\<\
For special characters see:  tutorial/StructuralElementsAndKeyboardCharacters \
 (\[LeftArrow] highlight and use F1)
...eg. invisible comma for index lists.\
\>", "Text",
 CellChangeTimes->{{3.682970049231207*^9, 3.682970143583846*^9}, {
  3.682970212190852*^9, 3.682970225006811*^9}, {3.68297028619014*^9, 
  3.6829702984939213`*^9}},
 FontFamily->"Lato",
 FontSize->18,
 CellID->1723775489],

Cell[TextData[{
 "We want to use  InputField[ ]   rather than just using quoted strings, \
because then  \[OpenCurlyDoubleQuote]\\\[CloseCurlyDoubleQuote]  can be typed \
easily (rather than \[OpenCurlyDoubleQuote]\\\\\[CloseCurlyDoubleQuote]) for ",
 Cell[BoxData[
  FormBox[
   StyleBox[
    RowBox[{"T", 
     AdjustmentBox["E",
      BoxBaselineShift->0.5,
      BoxMargins->{{-0.3, 0}, {0, 0}}], "X"}],
    SingleLetterItalics->False], TraditionalForm]]],
 " input.\nBut  InputField[ ]   ignores  Enter  ( ReturnKeyDown ).  So it \
needs some work..."
}], "Text",
 CellChangeTimes->{{3.6817006835285473`*^9, 3.6817007999683247`*^9}, {
  3.6828384759313917`*^9, 3.682838483867321*^9}, {3.6828807906757183`*^9, 
  3.682880849506692*^9}},
 FontFamily->"Lato",
 FontSize->18],

Cell["\<\
We put an initial \[OpenCurlyDoubleQuote] \[CloseCurlyDoubleQuote]  in the \
input box and then backwards search for  \[OpenCurlyDoubleQuote] \
\[CloseCurlyDoubleQuote]  to put the cursor in the right place to start \
typing. Then we paste the prompt.
It requires that  the evaluation function not be a module variable (like \
{len,str,ans} ), so we call it  $InputTextCellEval.
When  Shift+Enter  is pressed, the function specified by the 2nd argument is \
applied to the string.  If no 2nd arg, then Print  is assumed.\
\>", "Text",
 CellChangeTimes->{{3.681689594396791*^9, 3.68168959802897*^9}, 
   3.681698181942627*^9, {3.681699286329458*^9, 3.681699419815811*^9}, {
   3.681700102847715*^9, 3.681700150191111*^9}, {3.681700272637597*^9, 
   3.681700309613242*^9}, {3.681700392012291*^9, 3.681700454100113*^9}, 
   3.681700643497121*^9, {3.681701203330309*^9, 3.6817012644820232`*^9}, {
   3.681701761163684*^9, 3.68170183396332*^9}, {3.6817033914643*^9, 
   3.681703521255124*^9}, {3.681703552198368*^9, 3.681703571687316*^9}, {
   3.6828812015325127`*^9, 3.682881225084382*^9}, {3.682881280337739*^9, 
   3.682881283147214*^9}, {3.682881325226366*^9, 3.682881366825886*^9}, {
   3.682887999725142*^9, 3.682888057452407*^9}},
 FontFamily->"Lato",
 FontSize->18],

Cell[BoxData["\[IndentingNewLine]"], "Input"],

Cell["\<\
For special characters see:  tutorial/StructuralElementsAndKeyboardCharacters \
 (\[LeftArrow] highlight and use F1)
...eg. invisible comma for index lists.\
\>", "Text",
 CellChangeTimes->{{3.682970049231207*^9, 3.682970143583846*^9}, {
  3.682970212190852*^9, 3.682970225006811*^9}, {3.68297028619014*^9, 
  3.6829702984939213`*^9}},
 FontFamily->"Clear Sans",
 FontSize->16,
 CellID->665415606],

Cell[TextData[{
 "We want to use  InputField[ ]   rather than just using quoted strings, \
because then  \[OpenCurlyDoubleQuote]\\\[CloseCurlyDoubleQuote]  can be typed \
easily (rather than \[OpenCurlyDoubleQuote]\\\\\[CloseCurlyDoubleQuote]) for ",
 Cell[BoxData[
  FormBox[
   StyleBox[
    RowBox[{"T", 
     AdjustmentBox["E",
      BoxBaselineShift->0.5,
      BoxMargins->{{-0.3, 0}, {0, 0}}], "X"}],
    SingleLetterItalics->False], TraditionalForm]]],
 " input.\nBut  InputField[ ]   ignores  Enter  ( ReturnKeyDown ).  So it \
needs some work..."
}], "Text",
 CellChangeTimes->{{3.6817006835285473`*^9, 3.6817007999683247`*^9}, {
  3.6828384759313917`*^9, 3.682838483867321*^9}, {3.6828807906757183`*^9, 
  3.682880849506692*^9}},
 FontFamily->"Clear Sans",
 FontSize->16],

Cell["\<\
We put an initial \[OpenCurlyDoubleQuote] \[CloseCurlyDoubleQuote]  in the \
input box and then backwards search for  \[OpenCurlyDoubleQuote] \
\[CloseCurlyDoubleQuote]  to put the cursor in the right place to start \
typing. Then we paste the prompt.
It requires that  the evaluation function not be a module variable (like \
{len,str,ans} ), so we call it  $InputTextCellEval.
When  Shift+Enter  is pressed, the function specified by the 2nd argument is \
applied to the string.  If no 2nd arg, then Print  is assumed.\
\>", "Text",
 CellChangeTimes->{{3.681689594396791*^9, 3.68168959802897*^9}, 
   3.681698181942627*^9, {3.681699286329458*^9, 3.681699419815811*^9}, {
   3.681700102847715*^9, 3.681700150191111*^9}, {3.681700272637597*^9, 
   3.681700309613242*^9}, {3.681700392012291*^9, 3.681700454100113*^9}, 
   3.681700643497121*^9, {3.681701203330309*^9, 3.6817012644820232`*^9}, {
   3.681701761163684*^9, 3.68170183396332*^9}, {3.6817033914643*^9, 
   3.681703521255124*^9}, {3.681703552198368*^9, 3.681703571687316*^9}, {
   3.6828812015325127`*^9, 3.682881225084382*^9}, {3.682881280337739*^9, 
   3.682881283147214*^9}, {3.682881325226366*^9, 3.682881366825886*^9}, {
   3.682887999725142*^9, 3.682888057452407*^9}},
 FontFamily->"Clear Sans",
 FontSize->16],

Cell[BoxData["\[IndentingNewLine]"], "Input"],

Cell["\<\
For special characters see:  tutorial/StructuralElementsAndKeyboardCharacters \
 (\[LeftArrow] highlight and use F1)
...eg. invisible comma for index lists.\
\>", "Text",
 CellChangeTimes->{{3.682970049231207*^9, 3.682970143583846*^9}, {
  3.682970212190852*^9, 3.682970225006811*^9}, {3.68297028619014*^9, 
  3.6829702984939213`*^9}},
 FontFamily->"Utopia",
 FontSize->18,
 CellID->492096714],

Cell[TextData[{
 "We want to use  InputField[ ]   rather than just using quoted strings, \
because then  \[OpenCurlyDoubleQuote]\\\[CloseCurlyDoubleQuote]  can be typed \
easily (rather than \[OpenCurlyDoubleQuote]\\\\\[CloseCurlyDoubleQuote]) for ",
 Cell[BoxData[
  FormBox[
   StyleBox[
    RowBox[{"T", 
     AdjustmentBox["E",
      BoxBaselineShift->0.5,
      BoxMargins->{{-0.3, 0}, {0, 0}}], "X"}],
    SingleLetterItalics->False], TraditionalForm]]],
 " input.\nBut  InputField[ ]   ignores  Enter  ( ReturnKeyDown ).  So it \
needs some work..."
}], "Text",
 CellChangeTimes->{{3.6817006835285473`*^9, 3.6817007999683247`*^9}, {
  3.6828384759313917`*^9, 3.682838483867321*^9}, {3.6828807906757183`*^9, 
  3.682880849506692*^9}},
 FontFamily->"Utopia",
 FontSize->18],

Cell["\<\
We put an initial \[OpenCurlyDoubleQuote] \[CloseCurlyDoubleQuote]  in the \
input box and then backwards search for  \[OpenCurlyDoubleQuote] \
\[CloseCurlyDoubleQuote]  to put the cursor in the right place to start \
typing. Then we paste the prompt.
It requires that  the evaluation function not be a module variable (like \
{len,str,ans} ), so we call it  $InputTextCellEval.
When  Shift+Enter  is pressed, the function specified by the 2nd argument is \
applied to the string.  If no 2nd arg, then Print  is assumed.\
\>", "Text",
 CellChangeTimes->{{3.681689594396791*^9, 3.68168959802897*^9}, 
   3.681698181942627*^9, {3.681699286329458*^9, 3.681699419815811*^9}, {
   3.681700102847715*^9, 3.681700150191111*^9}, {3.681700272637597*^9, 
   3.681700309613242*^9}, {3.681700392012291*^9, 3.681700454100113*^9}, 
   3.681700643497121*^9, {3.681701203330309*^9, 3.6817012644820232`*^9}, {
   3.681701761163684*^9, 3.68170183396332*^9}, {3.6817033914643*^9, 
   3.681703521255124*^9}, {3.681703552198368*^9, 3.681703571687316*^9}, {
   3.6828812015325127`*^9, 3.682881225084382*^9}, {3.682881280337739*^9, 
   3.682881283147214*^9}, {3.682881325226366*^9, 3.682881366825886*^9}, {
   3.682887999725142*^9, 3.682888057452407*^9}},
 FontFamily->"Utopia",
 FontSize->18],

Cell[BoxData[{
 RowBox[{"Clear", "[", "InputText", "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"InputText", "[", 
   RowBox[{"OptionsPattern", "[", "]"}], "]"}], ":=", 
  RowBox[{"InputText", "[", 
   RowBox[{"\"\<\>\"", ",", "Print", ",", "False"}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"InputText", "[", 
   RowBox[{"prompt_String", ",", 
    RowBox[{"OptionsPattern", "[", "]"}]}], "]"}], ":=", 
  RowBox[{"InputText", "[", 
   RowBox[{"prompt", ",", "Print", ",", "False"}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"InputText", "[", 
   RowBox[{"prompt_String", ",", "f_", ",", 
    RowBox[{"OptionsPattern", "[", "]"}]}], "]"}], ":=", 
  RowBox[{"InputText", "[", 
   RowBox[{"prompt", ",", "f", ",", "False"}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"InputText", "[", 
   RowBox[{"prompt_String", ",", "f_", ",", " ", "keepprompt_", ",", 
    RowBox[{"OptionsPattern", "[", "]"}]}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"len", ",", "str", ",", "ans"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"len", " ", "=", " ", 
      RowBox[{"StringLength", "[", "prompt", "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{"keepprompt", ",", 
       RowBox[{"len", "=", "0"}]}], "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"$InputTextFunction", " ", "=."}], ";", "\[IndentingNewLine]", 
     RowBox[{"$InputTextFunction", " ", "=", " ", "f"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"$InputTextCellEval", "=", 
      RowBox[{
       RowBox[{
       "ToExpression", "[", "\[IndentingNewLine]", 
        "                                             ", 
        RowBox[{
        "RowBox", "[", "\[IndentingNewLine]", 
         "                                                ", 
         RowBox[{"{", 
          RowBox[{
          "\"\<$InputTextFunction[StringDrop[Setting[\>\"", ",", "#", ",", 
           RowBox[{"\"\<], \n                             \>\"", "<>", 
            RowBox[{"ToString", "[", "len", "]"}], "<>", "\"\<]];\>\""}]}], 
          "}"}], "\[IndentingNewLine]", 
         "                                          ", "]"}], 
        "\[IndentingNewLine]", "                                       ", 
        "]"}], "&"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"CellPrint", "[", "\[IndentingNewLine]", "     ", 
      RowBox[{"Cell", "[", "\[IndentingNewLine]", "         ", 
       RowBox[{
        RowBox[{"BoxData", "[", "\n", "                        ", 
         RowBox[{"TagBox", "[", "\n", "                            ", 
          RowBox[{
           RowBox[{
           "DynamicModuleBox", "[", "\[IndentingNewLine]", "                ", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"s", " ", "=", " ", "\"\< \[VeryThinSpace]\>\""}], 
              "}"}], ",", " ", "\n", "                                 ", 
             RowBox[{"InputFieldBox", "[", 
              RowBox[{
               RowBox[{"Dynamic", "[", "s", "]"}], ",", " ", "String", ",", 
               RowBox[{"FieldSize", "\[Rule]", " ", "120"}], ",", 
               RowBox[{"Appearance", "\[Rule]", "\"\<Frameless\>\""}]}], 
              "]"}], ",", "\n", "                                 ", 
             RowBox[{"DynamicModuleValues", ":>", 
              RowBox[{"{", "}"}]}]}], "]"}], ",", "\n", 
           "                                 ", 
           RowBox[{
            RowBox[{"InputField", "[", 
             RowBox[{
              RowBox[{"Setting", "[", "#", "]"}], ",", " ", "String"}], 
             "\[IndentingNewLine]", "         ", "]"}], "&"}]}], " ", 
          "\[IndentingNewLine]", "         ", "]"}], "\[IndentingNewLine]", 
         "      ", "]"}], ",", " ", "\[IndentingNewLine]", "        ", 
        "\"\<Input\>\"", ",", "\[IndentingNewLine]", "        ", 
        RowBox[{"CellEventActions", "\[Rule]", 
         RowBox[{"{", "\[IndentingNewLine]", "          ", 
          RowBox[{
           RowBox[{"\"\<ReturnKeyDown\>\"", "\[RuleDelayed]", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"Paste", "[", "\"\<\\n\>\"", "]"}], ";", 
              RowBox[{"FrontEndExecute", "[", 
               RowBox[{"FrontEndToken", "[", "\"\<MoveNext\>\"", "]"}], "]"}],
               ";"}], ")"}]}], ",", "\[IndentingNewLine]", "          ", 
           RowBox[{"\"\<LeftArrowKeyDown\>\"", "\[RuleDelayed]", " ", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"Paste", "[", "\"\<Left\>\"", "]"}], ";"}], ")"}]}]}], 
          "\[IndentingNewLine]", "    ", "}"}]}], ",", "\[IndentingNewLine]", 
        "        ", 
        RowBox[{"CellEvaluationFunction", "\[Rule]", "$InputTextCellEval"}], 
        ",", "\[IndentingNewLine]", "        ", 
        RowBox[{"CellFrame", "\[Rule]", 
         RowBox[{"OptionValue", "[", "InputCellFrame", "]"}]}], ",", 
        "\[IndentingNewLine]", "        ", 
        RowBox[{"Background", "\[Rule]", 
         RowBox[{"RGBColor", "[", 
          RowBox[{
           RowBox[{"OptionValue", "[", "InputBackground", "]"}], "/", 
           "255."}], "]"}]}], ",", "\[IndentingNewLine]", "        ", 
        RowBox[{"FontSize", "\[Rule]", 
         RowBox[{"OptionValue", "[", "InputFontSize", "]"}]}], ",", 
        "\[IndentingNewLine]", "        ", 
        RowBox[{"FontFamily", "\[Rule]", 
         RowBox[{"OptionValue", "[", "InputFontFamily", "]"}]}], ",", 
        "\[IndentingNewLine]", "        ", 
        RowBox[{"ShowGroupOpener", "\[Rule]", 
         RowBox[{"OptionValue", "[", "InputShowGroupOpener", "]"}]}], ",", 
        "\[IndentingNewLine]", "        ", 
        RowBox[{"CellLabel", "\[Rule]", "\"\<\>\""}], ",", 
        "\[IndentingNewLine]", "        ", 
        RowBox[{"CellMargins", "\[Rule]", 
         RowBox[{"OptionValue", "[", "InputCellMargins", "]"}]}], ",", 
        "\[IndentingNewLine]", "        ", 
        RowBox[{"ShowCellLabel", "\[Rule]", "False"}], ",", 
        "\[IndentingNewLine]", "        ", 
        RowBox[{"CellLabelMargins", "\[Rule]", 
         RowBox[{"OptionValue", "[", "InputCellLabelMargins", "]"}]}]}], 
       "\[IndentingNewLine]", "   ", "]"}], "\[IndentingNewLine]", "]"}], ";",
      "\[IndentingNewLine]", 
     RowBox[{"NotebookFind", "[", 
      RowBox[{
       RowBox[{"EvaluationNotebook", "[", "]"}], ",", "\"\< \>\"", ",", 
       "Previous"}], "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"Paste", "[", "prompt", "]"}], ";"}]}], "\[IndentingNewLine]", 
   "]"}]}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{
  3.6816968603283577`*^9, {3.681697792691951*^9, 3.6816978628110933`*^9}, {
   3.6816979174026947`*^9, 3.681697969114111*^9}, 3.6816981664556227`*^9, 
   3.681698708497139*^9, {3.6816987538092413`*^9, 3.681698804208418*^9}, {
   3.681698864831292*^9, 3.681698867503499*^9}, {3.681698949486549*^9, 
   3.681698965406452*^9}, {3.68169912922795*^9, 3.681699129520103*^9}, {
   3.681699276859376*^9, 3.681699280007118*^9}, {3.681699528210699*^9, 
   3.68169953943125*^9}, {3.6816997523569927`*^9, 3.6816998254918137`*^9}, {
   3.681699871750064*^9, 3.681699872611697*^9}, {3.6817010842289762`*^9, 
   3.681701084308722*^9}, {3.6817011703237886`*^9, 3.681701170935985*^9}, {
   3.681701276083037*^9, 3.681701318770359*^9}, {3.6817015986866627`*^9, 
   3.681701628318366*^9}, 3.681701706909121*^9, {3.6817018403958282`*^9, 
   3.6817018487876167`*^9}, {3.68170202541751*^9, 3.681702028841724*^9}, {
   3.681702063337385*^9, 3.6817020945527773`*^9}, {3.681702125640551*^9, 
   3.681702125793666*^9}, {3.681702163735969*^9, 3.6817021782796993`*^9}, {
   3.681702669217884*^9, 3.681702730705171*^9}, {3.681702885791703*^9, 
   3.681702913071189*^9}, {3.681702964789687*^9, 3.681703063532979*^9}, {
   3.6817129232062807`*^9, 3.681712970821866*^9}, {3.681713240322517*^9, 
   3.681713344874672*^9}, {3.68171342851223*^9, 3.6817134989116583`*^9}, 
   3.681713534702721*^9, 3.68171357655849*^9, {3.681713637293679*^9, 
   3.681713638989521*^9}, {3.681714382319642*^9, 3.681714399908785*^9}, {
   3.6817144647075577`*^9, 3.68171446486738*^9}, {3.682879112938183*^9, 
   3.682879152345663*^9}, {3.682879213865019*^9, 3.682879224808878*^9}, {
   3.6828796585310163`*^9, 3.6828796681629467`*^9}, {3.682879699650738*^9, 
   3.682879699842683*^9}, {3.682879748489794*^9, 3.682879752946199*^9}, {
   3.6828800603020687`*^9, 3.682880083165749*^9}, {3.682880192668538*^9, 
   3.68288020028426*^9}, {3.6828810915997562`*^9, 3.6828811772938147`*^9}, {
   3.6828814638169327`*^9, 3.68288146717697*^9}, {3.682881759411881*^9, 
   3.6828817603668833`*^9}, {3.68288179507504*^9, 3.682881795346992*^9}, {
   3.682881870083136*^9, 3.682881871505671*^9}, {3.682881985343872*^9, 
   3.682882005423284*^9}, {3.6828821449746943`*^9, 3.682882171964361*^9}, {
   3.6828822186036587`*^9, 3.682882319258189*^9}, {3.6828823634651213`*^9, 
   3.68288241388041*^9}, {3.682882460615571*^9, 3.6828826583887243`*^9}, {
   3.682882708675393*^9, 3.682882746051035*^9}, {3.68288279990586*^9, 
   3.682882879457576*^9}, {3.68288300817446*^9, 3.682883094220798*^9}, 
   3.682883143596459*^9, {3.682883425352643*^9, 3.682883443464204*^9}, {
   3.682883782563496*^9, 3.682883813859213*^9}, {3.682888075836977*^9, 
   3.682888100028653*^9}, {3.682889941799213*^9, 3.682889951991055*^9}, 
   3.682904806528961*^9, {3.682905012574297*^9, 3.682905013806254*^9}, {
   3.682905134444785*^9, 3.682905137036483*^9}, {3.682905351945889*^9, 
   3.682905362345914*^9}, {3.6829055330157337`*^9, 3.6829055505837812`*^9}, {
   3.682905601544222*^9, 3.6829056027751093`*^9}, {3.6829059421147623`*^9, 
   3.682905948050703*^9}, {3.682968826642181*^9, 3.6829688283846493`*^9}, {
   3.6829688596818647`*^9, 3.682968861105874*^9}, {3.6829689223370256`*^9, 
   3.682968926848692*^9}, {3.682968960861677*^9, 3.682968973776904*^9}, {
   3.682969051983365*^9, 3.682969078862852*^9}, {3.682969510042509*^9, 
   3.682969555912897*^9}, {3.68297116322859*^9, 3.6829711787399273`*^9}, {
   3.682971496575585*^9, 3.6829715152155113`*^9}, {3.682993799393681*^9, 
   3.682993841489492*^9}, {3.682998534116321*^9, 3.6829985634144163`*^9}, {
   3.6830008099401817`*^9, 3.683000850089793*^9}, {3.683000880202559*^9, 
   3.683000918952899*^9}, 3.683000950200424*^9, {3.6830011709498053`*^9, 
   3.683001221925465*^9}, {3.683001254997204*^9, 3.6830012935405893`*^9}, {
   3.683002608180086*^9, 3.683002619284069*^9}, {3.683002779825983*^9, 
   3.68300280199091*^9}, 3.68300283204945*^9, {3.683003228012485*^9, 
   3.683003233723921*^9}, {3.683003596728036*^9, 3.6830035979124107`*^9}, {
   3.683003891155197*^9, 3.683003897668232*^9}, {3.683003962179687*^9, 
   3.6830039760673*^9}},
 FontFamily->"Source Code Pro",
 FontSize->15,
 FontWeight->"Plain"],

Cell[BoxData[{
 RowBox[{"Clear", "[", "InputText", "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"InputText", "[", 
   RowBox[{"OptionsPattern", "[", "]"}], "]"}], ":=", 
  RowBox[{"InputText", "[", 
   RowBox[{"\"\<\>\"", ",", "Print", ",", "False"}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"InputText", "[", 
   RowBox[{"prompt_String", ",", 
    RowBox[{"OptionsPattern", "[", "]"}]}], "]"}], ":=", 
  RowBox[{"InputText", "[", 
   RowBox[{"prompt", ",", "Print", ",", "False"}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"InputText", "[", 
   RowBox[{"prompt_String", ",", "f_", ",", 
    RowBox[{"OptionsPattern", "[", "]"}]}], "]"}], ":=", 
  RowBox[{"InputText", "[", 
   RowBox[{"prompt", ",", "f", ",", "False"}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"InputText", "[", 
   RowBox[{"prompt_String", ",", "f_", ",", " ", "keepprompt_", ",", 
    RowBox[{"OptionsPattern", "[", "]"}]}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"len", ",", "str", ",", "ans"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"len", " ", "=", " ", 
      RowBox[{"StringLength", "[", "prompt", "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{"keepprompt", ",", 
       RowBox[{"len", "=", "0"}]}], "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"$InputTextFunction", " ", "=."}], ";", "\[IndentingNewLine]", 
     RowBox[{"$InputTextFunction", " ", "=", " ", "f"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"$InputTextCellEval", "=", 
      RowBox[{
       RowBox[{
       "ToExpression", "[", "\[IndentingNewLine]", 
        "                                             ", 
        RowBox[{
        "RowBox", "[", "\[IndentingNewLine]", 
         "                                                ", 
         RowBox[{"{", 
          RowBox[{
          "\"\<$InputTextFunction[StringDrop[Setting[\>\"", ",", "#", ",", 
           RowBox[{"\"\<], \n                             \>\"", "<>", 
            RowBox[{"ToString", "[", "len", "]"}], "<>", "\"\<]];\>\""}]}], 
          "}"}], "\[IndentingNewLine]", 
         "                                          ", "]"}], 
        "\[IndentingNewLine]", "                                       ", 
        "]"}], "&"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"CellPrint", "[", "\[IndentingNewLine]", "     ", 
      RowBox[{"Cell", "[", "\[IndentingNewLine]", "         ", 
       RowBox[{
        RowBox[{"BoxData", "[", "\n", "                        ", 
         RowBox[{"TagBox", "[", "\n", "                            ", 
          RowBox[{
           RowBox[{
           "DynamicModuleBox", "[", "\[IndentingNewLine]", "                ", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"s", " ", "=", " ", "\"\< \[VeryThinSpace]\>\""}], 
              "}"}], ",", " ", "\n", "                                 ", 
             RowBox[{"InputFieldBox", "[", 
              RowBox[{
               RowBox[{"Dynamic", "[", "s", "]"}], ",", " ", "String", ",", 
               RowBox[{"FieldSize", "\[Rule]", " ", "120"}], ",", 
               RowBox[{"Appearance", "\[Rule]", "\"\<Frameless\>\""}]}], 
              "]"}], ",", "\n", "                                 ", 
             RowBox[{"DynamicModuleValues", ":>", 
              RowBox[{"{", "}"}]}]}], "]"}], ",", "\n", 
           "                                 ", 
           RowBox[{
            RowBox[{"InputField", "[", 
             RowBox[{
              RowBox[{"Setting", "[", "#", "]"}], ",", " ", "String"}], 
             "\[IndentingNewLine]", "         ", "]"}], "&"}]}], " ", 
          "\[IndentingNewLine]", "         ", "]"}], "\[IndentingNewLine]", 
         "      ", "]"}], ",", " ", "\[IndentingNewLine]", "        ", 
        "\"\<Input\>\"", ",", "\[IndentingNewLine]", "        ", 
        RowBox[{"CellEventActions", "\[Rule]", 
         RowBox[{"{", "\[IndentingNewLine]", "          ", 
          RowBox[{
           RowBox[{"\"\<ReturnKeyDown\>\"", "\[RuleDelayed]", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"Paste", "[", "\"\<\\n\>\"", "]"}], ";", 
              RowBox[{"FrontEndExecute", "[", 
               RowBox[{"FrontEndToken", "[", "\"\<MoveNext\>\"", "]"}], "]"}],
               ";"}], ")"}]}], ",", "\[IndentingNewLine]", "          ", 
           RowBox[{"\"\<LeftArrowKeyDown\>\"", "\[RuleDelayed]", " ", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"Paste", "[", "\"\<Left\>\"", "]"}], ";"}], ")"}]}]}], 
          "\[IndentingNewLine]", "    ", "}"}]}], ",", "\[IndentingNewLine]", 
        "        ", 
        RowBox[{"CellEvaluationFunction", "\[Rule]", "$InputTextCellEval"}], 
        ",", "\[IndentingNewLine]", "        ", 
        RowBox[{"CellFrame", "\[Rule]", 
         RowBox[{"OptionValue", "[", "InputCellFrame", "]"}]}], ",", 
        "\[IndentingNewLine]", "        ", 
        RowBox[{"Background", "\[Rule]", 
         RowBox[{"RGBColor", "[", 
          RowBox[{
           RowBox[{"OptionValue", "[", "InputBackground", "]"}], "/", 
           "255."}], "]"}]}], ",", "\[IndentingNewLine]", "        ", 
        RowBox[{"FontSize", "\[Rule]", 
         RowBox[{"OptionValue", "[", "InputFontSize", "]"}]}], ",", 
        "\[IndentingNewLine]", "        ", 
        RowBox[{"FontFamily", "\[Rule]", 
         RowBox[{"OptionValue", "[", "InputFontFamily", "]"}]}], ",", 
        "\[IndentingNewLine]", "        ", 
        RowBox[{"ShowGroupOpener", "\[Rule]", 
         RowBox[{"OptionValue", "[", "InputShowGroupOpener", "]"}]}], ",", 
        "\[IndentingNewLine]", "        ", 
        RowBox[{"CellLabel", "\[Rule]", "\"\<\>\""}], ",", 
        "\[IndentingNewLine]", "        ", 
        RowBox[{"CellMargins", "\[Rule]", 
         RowBox[{"OptionValue", "[", "InputCellMargins", "]"}]}], ",", 
        "\[IndentingNewLine]", "        ", 
        RowBox[{"ShowCellLabel", "\[Rule]", "False"}], ",", 
        "\[IndentingNewLine]", "        ", 
        RowBox[{"CellLabelMargins", "\[Rule]", 
         RowBox[{"OptionValue", "[", "InputCellLabelMargins", "]"}]}]}], 
       "\[IndentingNewLine]", "   ", "]"}], "\[IndentingNewLine]", "]"}], ";",
      "\[IndentingNewLine]", 
     RowBox[{"NotebookFind", "[", 
      RowBox[{
       RowBox[{"EvaluationNotebook", "[", "]"}], ",", "\"\< \>\"", ",", 
       "Previous"}], "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"Paste", "[", "prompt", "]"}], ";"}]}], "\[IndentingNewLine]", 
   "]"}]}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{
  3.6816968603283577`*^9, {3.681697792691951*^9, 3.6816978628110933`*^9}, {
   3.6816979174026947`*^9, 3.681697969114111*^9}, 3.6816981664556227`*^9, 
   3.681698708497139*^9, {3.6816987538092413`*^9, 3.681698804208418*^9}, {
   3.681698864831292*^9, 3.681698867503499*^9}, {3.681698949486549*^9, 
   3.681698965406452*^9}, {3.68169912922795*^9, 3.681699129520103*^9}, {
   3.681699276859376*^9, 3.681699280007118*^9}, {3.681699528210699*^9, 
   3.68169953943125*^9}, {3.6816997523569927`*^9, 3.6816998254918137`*^9}, {
   3.681699871750064*^9, 3.681699872611697*^9}, {3.6817010842289762`*^9, 
   3.681701084308722*^9}, {3.6817011703237886`*^9, 3.681701170935985*^9}, {
   3.681701276083037*^9, 3.681701318770359*^9}, {3.6817015986866627`*^9, 
   3.681701628318366*^9}, 3.681701706909121*^9, {3.6817018403958282`*^9, 
   3.6817018487876167`*^9}, {3.68170202541751*^9, 3.681702028841724*^9}, {
   3.681702063337385*^9, 3.6817020945527773`*^9}, {3.681702125640551*^9, 
   3.681702125793666*^9}, {3.681702163735969*^9, 3.6817021782796993`*^9}, {
   3.681702669217884*^9, 3.681702730705171*^9}, {3.681702885791703*^9, 
   3.681702913071189*^9}, {3.681702964789687*^9, 3.681703063532979*^9}, {
   3.6817129232062807`*^9, 3.681712970821866*^9}, {3.681713240322517*^9, 
   3.681713344874672*^9}, {3.68171342851223*^9, 3.6817134989116583`*^9}, 
   3.681713534702721*^9, 3.68171357655849*^9, {3.681713637293679*^9, 
   3.681713638989521*^9}, {3.681714382319642*^9, 3.681714399908785*^9}, {
   3.6817144647075577`*^9, 3.68171446486738*^9}, {3.682879112938183*^9, 
   3.682879152345663*^9}, {3.682879213865019*^9, 3.682879224808878*^9}, {
   3.6828796585310163`*^9, 3.6828796681629467`*^9}, {3.682879699650738*^9, 
   3.682879699842683*^9}, {3.682879748489794*^9, 3.682879752946199*^9}, {
   3.6828800603020687`*^9, 3.682880083165749*^9}, {3.682880192668538*^9, 
   3.68288020028426*^9}, {3.6828810915997562`*^9, 3.6828811772938147`*^9}, {
   3.6828814638169327`*^9, 3.68288146717697*^9}, {3.682881759411881*^9, 
   3.6828817603668833`*^9}, {3.68288179507504*^9, 3.682881795346992*^9}, {
   3.682881870083136*^9, 3.682881871505671*^9}, {3.682881985343872*^9, 
   3.682882005423284*^9}, {3.6828821449746943`*^9, 3.682882171964361*^9}, {
   3.6828822186036587`*^9, 3.682882319258189*^9}, {3.6828823634651213`*^9, 
   3.68288241388041*^9}, {3.682882460615571*^9, 3.6828826583887243`*^9}, {
   3.682882708675393*^9, 3.682882746051035*^9}, {3.68288279990586*^9, 
   3.682882879457576*^9}, {3.68288300817446*^9, 3.682883094220798*^9}, 
   3.682883143596459*^9, {3.682883425352643*^9, 3.682883443464204*^9}, {
   3.682883782563496*^9, 3.682883813859213*^9}, {3.682888075836977*^9, 
   3.682888100028653*^9}, {3.682889941799213*^9, 3.682889951991055*^9}, 
   3.682904806528961*^9, {3.682905012574297*^9, 3.682905013806254*^9}, {
   3.682905134444785*^9, 3.682905137036483*^9}, {3.682905351945889*^9, 
   3.682905362345914*^9}, {3.6829055330157337`*^9, 3.6829055505837812`*^9}, {
   3.682905601544222*^9, 3.6829056027751093`*^9}, {3.6829059421147623`*^9, 
   3.682905948050703*^9}, {3.682968826642181*^9, 3.6829688283846493`*^9}, {
   3.6829688596818647`*^9, 3.682968861105874*^9}, {3.6829689223370256`*^9, 
   3.682968926848692*^9}, {3.682968960861677*^9, 3.682968973776904*^9}, {
   3.682969051983365*^9, 3.682969078862852*^9}, {3.682969510042509*^9, 
   3.682969555912897*^9}, {3.68297116322859*^9, 3.6829711787399273`*^9}, {
   3.682971496575585*^9, 3.6829715152155113`*^9}, {3.682993799393681*^9, 
   3.682993841489492*^9}, {3.682998534116321*^9, 3.6829985634144163`*^9}, {
   3.6830008099401817`*^9, 3.683000850089793*^9}, {3.683000880202559*^9, 
   3.683000918952899*^9}, 3.683000950200424*^9, {3.6830011709498053`*^9, 
   3.683001221925465*^9}, {3.683001254997204*^9, 3.6830012935405893`*^9}, {
   3.683002608180086*^9, 3.683002619284069*^9}, {3.683002779825983*^9, 
   3.68300280199091*^9}, 3.68300283204945*^9, {3.683003228012485*^9, 
   3.683003233723921*^9}, {3.683003596728036*^9, 3.6830035979124107`*^9}, {
   3.683003891155197*^9, 3.683003897668232*^9}, {3.683003962179687*^9, 
   3.6830039760673*^9}},
 FontFamily->"Courier",
 FontSize->17,
 FontWeight->"Bold"],

Cell[BoxData[{
 RowBox[{"Clear", "[", "InputText", "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"InputText", "[", 
   RowBox[{"OptionsPattern", "[", "]"}], "]"}], ":=", 
  RowBox[{"InputText", "[", 
   RowBox[{"\"\<\>\"", ",", "Print", ",", "False"}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"InputText", "[", 
   RowBox[{"prompt_String", ",", 
    RowBox[{"OptionsPattern", "[", "]"}]}], "]"}], ":=", 
  RowBox[{"InputText", "[", 
   RowBox[{"prompt", ",", "Print", ",", "False"}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"InputText", "[", 
   RowBox[{"prompt_String", ",", "f_", ",", 
    RowBox[{"OptionsPattern", "[", "]"}]}], "]"}], ":=", 
  RowBox[{"InputText", "[", 
   RowBox[{"prompt", ",", "f", ",", "False"}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"InputText", "[", 
   RowBox[{"prompt_String", ",", "f_", ",", " ", "keepprompt_", ",", 
    RowBox[{"OptionsPattern", "[", "]"}]}], "]"}], ":=", 
  RowBox[{"Module", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"len", ",", "str", ",", "ans"}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"len", " ", "=", " ", 
      RowBox[{"StringLength", "[", "prompt", "]"}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"If", "[", 
      RowBox[{"keepprompt", ",", 
       RowBox[{"len", "=", "0"}]}], "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"$InputTextFunction", " ", "=."}], ";", "\[IndentingNewLine]", 
     RowBox[{"$InputTextFunction", " ", "=", " ", "f"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"$InputTextCellEval", "=", 
      RowBox[{
       RowBox[{
       "ToExpression", "[", "\[IndentingNewLine]", 
        "                                             ", 
        RowBox[{
        "RowBox", "[", "\[IndentingNewLine]", 
         "                                                ", 
         RowBox[{"{", 
          RowBox[{
          "\"\<$InputTextFunction[StringDrop[Setting[\>\"", ",", "#", ",", 
           RowBox[{"\"\<], \n                             \>\"", "<>", 
            RowBox[{"ToString", "[", "len", "]"}], "<>", "\"\<]];\>\""}]}], 
          "}"}], "\[IndentingNewLine]", 
         "                                          ", "]"}], 
        "\[IndentingNewLine]", "                                       ", 
        "]"}], "&"}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"CellPrint", "[", "\[IndentingNewLine]", "     ", 
      RowBox[{"Cell", "[", "\[IndentingNewLine]", "         ", 
       RowBox[{
        RowBox[{"BoxData", "[", "\n", "                        ", 
         RowBox[{"TagBox", "[", "\n", "                            ", 
          RowBox[{
           RowBox[{
           "DynamicModuleBox", "[", "\[IndentingNewLine]", "                ", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"s", " ", "=", " ", "\"\< \[VeryThinSpace]\>\""}], 
              "}"}], ",", " ", "\n", "                                 ", 
             RowBox[{"InputFieldBox", "[", 
              RowBox[{
               RowBox[{"Dynamic", "[", "s", "]"}], ",", " ", "String", ",", 
               RowBox[{"FieldSize", "\[Rule]", " ", "120"}], ",", 
               RowBox[{"Appearance", "\[Rule]", "\"\<Frameless\>\""}]}], 
              "]"}], ",", "\n", "                                 ", 
             RowBox[{"DynamicModuleValues", ":>", 
              RowBox[{"{", "}"}]}]}], "]"}], ",", "\n", 
           "                                 ", 
           RowBox[{
            RowBox[{"InputField", "[", 
             RowBox[{
              RowBox[{"Setting", "[", "#", "]"}], ",", " ", "String"}], 
             "\[IndentingNewLine]", "         ", "]"}], "&"}]}], " ", 
          "\[IndentingNewLine]", "         ", "]"}], "\[IndentingNewLine]", 
         "      ", "]"}], ",", " ", "\[IndentingNewLine]", "        ", 
        "\"\<Input\>\"", ",", "\[IndentingNewLine]", "        ", 
        RowBox[{"CellEventActions", "\[Rule]", 
         RowBox[{"{", "\[IndentingNewLine]", "          ", 
          RowBox[{
           RowBox[{"\"\<ReturnKeyDown\>\"", "\[RuleDelayed]", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"Paste", "[", "\"\<\\n\>\"", "]"}], ";", 
              RowBox[{"FrontEndExecute", "[", 
               RowBox[{"FrontEndToken", "[", "\"\<MoveNext\>\"", "]"}], "]"}],
               ";"}], ")"}]}], ",", "\[IndentingNewLine]", "          ", 
           RowBox[{"\"\<LeftArrowKeyDown\>\"", "\[RuleDelayed]", " ", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"Paste", "[", "\"\<Left\>\"", "]"}], ";"}], ")"}]}]}], 
          "\[IndentingNewLine]", "    ", "}"}]}], ",", "\[IndentingNewLine]", 
        "        ", 
        RowBox[{"CellEvaluationFunction", "\[Rule]", "$InputTextCellEval"}], 
        ",", "\[IndentingNewLine]", "        ", 
        RowBox[{"CellFrame", "\[Rule]", 
         RowBox[{"OptionValue", "[", "InputCellFrame", "]"}]}], ",", 
        "\[IndentingNewLine]", "        ", 
        RowBox[{"Background", "\[Rule]", 
         RowBox[{"RGBColor", "[", 
          RowBox[{
           RowBox[{"OptionValue", "[", "InputBackground", "]"}], "/", 
           "255."}], "]"}]}], ",", "\[IndentingNewLine]", "        ", 
        RowBox[{"FontSize", "\[Rule]", 
         RowBox[{"OptionValue", "[", "InputFontSize", "]"}]}], ",", 
        "\[IndentingNewLine]", "        ", 
        RowBox[{"FontFamily", "\[Rule]", 
         RowBox[{"OptionValue", "[", "InputFontFamily", "]"}]}], ",", 
        "\[IndentingNewLine]", "        ", 
        RowBox[{"ShowGroupOpener", "\[Rule]", 
         RowBox[{"OptionValue", "[", "InputShowGroupOpener", "]"}]}], ",", 
        "\[IndentingNewLine]", "        ", 
        RowBox[{"CellLabel", "\[Rule]", "\"\<\>\""}], ",", 
        "\[IndentingNewLine]", "        ", 
        RowBox[{"CellMargins", "\[Rule]", 
         RowBox[{"OptionValue", "[", "InputCellMargins", "]"}]}], ",", 
        "\[IndentingNewLine]", "        ", 
        RowBox[{"ShowCellLabel", "\[Rule]", "False"}], ",", 
        "\[IndentingNewLine]", "        ", 
        RowBox[{"CellLabelMargins", "\[Rule]", 
         RowBox[{"OptionValue", "[", "InputCellLabelMargins", "]"}]}]}], 
       "\[IndentingNewLine]", "   ", "]"}], "\[IndentingNewLine]", "]"}], ";",
      "\[IndentingNewLine]", 
     RowBox[{"NotebookFind", "[", 
      RowBox[{
       RowBox[{"EvaluationNotebook", "[", "]"}], ",", "\"\< \>\"", ",", 
       "Previous"}], "]"}], ";", "\[IndentingNewLine]", 
     RowBox[{"Paste", "[", "prompt", "]"}], ";"}]}], "\[IndentingNewLine]", 
   "]"}]}]}], "Input",
 InitializationCell->True,
 CellChangeTimes->{
  3.6816968603283577`*^9, {3.681697792691951*^9, 3.6816978628110933`*^9}, {
   3.6816979174026947`*^9, 3.681697969114111*^9}, 3.6816981664556227`*^9, 
   3.681698708497139*^9, {3.6816987538092413`*^9, 3.681698804208418*^9}, {
   3.681698864831292*^9, 3.681698867503499*^9}, {3.681698949486549*^9, 
   3.681698965406452*^9}, {3.68169912922795*^9, 3.681699129520103*^9}, {
   3.681699276859376*^9, 3.681699280007118*^9}, {3.681699528210699*^9, 
   3.68169953943125*^9}, {3.6816997523569927`*^9, 3.6816998254918137`*^9}, {
   3.681699871750064*^9, 3.681699872611697*^9}, {3.6817010842289762`*^9, 
   3.681701084308722*^9}, {3.6817011703237886`*^9, 3.681701170935985*^9}, {
   3.681701276083037*^9, 3.681701318770359*^9}, {3.6817015986866627`*^9, 
   3.681701628318366*^9}, 3.681701706909121*^9, {3.6817018403958282`*^9, 
   3.6817018487876167`*^9}, {3.68170202541751*^9, 3.681702028841724*^9}, {
   3.681702063337385*^9, 3.6817020945527773`*^9}, {3.681702125640551*^9, 
   3.681702125793666*^9}, {3.681702163735969*^9, 3.6817021782796993`*^9}, {
   3.681702669217884*^9, 3.681702730705171*^9}, {3.681702885791703*^9, 
   3.681702913071189*^9}, {3.681702964789687*^9, 3.681703063532979*^9}, {
   3.6817129232062807`*^9, 3.681712970821866*^9}, {3.681713240322517*^9, 
   3.681713344874672*^9}, {3.68171342851223*^9, 3.6817134989116583`*^9}, 
   3.681713534702721*^9, 3.68171357655849*^9, {3.681713637293679*^9, 
   3.681713638989521*^9}, {3.681714382319642*^9, 3.681714399908785*^9}, {
   3.6817144647075577`*^9, 3.68171446486738*^9}, {3.682879112938183*^9, 
   3.682879152345663*^9}, {3.682879213865019*^9, 3.682879224808878*^9}, {
   3.6828796585310163`*^9, 3.6828796681629467`*^9}, {3.682879699650738*^9, 
   3.682879699842683*^9}, {3.682879748489794*^9, 3.682879752946199*^9}, {
   3.6828800603020687`*^9, 3.682880083165749*^9}, {3.682880192668538*^9, 
   3.68288020028426*^9}, {3.6828810915997562`*^9, 3.6828811772938147`*^9}, {
   3.6828814638169327`*^9, 3.68288146717697*^9}, {3.682881759411881*^9, 
   3.6828817603668833`*^9}, {3.68288179507504*^9, 3.682881795346992*^9}, {
   3.682881870083136*^9, 3.682881871505671*^9}, {3.682881985343872*^9, 
   3.682882005423284*^9}, {3.6828821449746943`*^9, 3.682882171964361*^9}, {
   3.6828822186036587`*^9, 3.682882319258189*^9}, {3.6828823634651213`*^9, 
   3.68288241388041*^9}, {3.682882460615571*^9, 3.6828826583887243`*^9}, {
   3.682882708675393*^9, 3.682882746051035*^9}, {3.68288279990586*^9, 
   3.682882879457576*^9}, {3.68288300817446*^9, 3.682883094220798*^9}, 
   3.682883143596459*^9, {3.682883425352643*^9, 3.682883443464204*^9}, {
   3.682883782563496*^9, 3.682883813859213*^9}, {3.682888075836977*^9, 
   3.682888100028653*^9}, {3.682889941799213*^9, 3.682889951991055*^9}, 
   3.682904806528961*^9, {3.682905012574297*^9, 3.682905013806254*^9}, {
   3.682905134444785*^9, 3.682905137036483*^9}, {3.682905351945889*^9, 
   3.682905362345914*^9}, {3.6829055330157337`*^9, 3.6829055505837812`*^9}, {
   3.682905601544222*^9, 3.6829056027751093`*^9}, {3.6829059421147623`*^9, 
   3.682905948050703*^9}, {3.682968826642181*^9, 3.6829688283846493`*^9}, {
   3.6829688596818647`*^9, 3.682968861105874*^9}, {3.6829689223370256`*^9, 
   3.682968926848692*^9}, {3.682968960861677*^9, 3.682968973776904*^9}, {
   3.682969051983365*^9, 3.682969078862852*^9}, {3.682969510042509*^9, 
   3.682969555912897*^9}, {3.68297116322859*^9, 3.6829711787399273`*^9}, {
   3.682971496575585*^9, 3.6829715152155113`*^9}, {3.682993799393681*^9, 
   3.682993841489492*^9}, {3.682998534116321*^9, 3.6829985634144163`*^9}, {
   3.6830008099401817`*^9, 3.683000850089793*^9}, {3.683000880202559*^9, 
   3.683000918952899*^9}, 3.683000950200424*^9, {3.6830011709498053`*^9, 
   3.683001221925465*^9}, {3.683001254997204*^9, 3.6830012935405893`*^9}, {
   3.683002608180086*^9, 3.683002619284069*^9}, {3.683002779825983*^9, 
   3.68300280199091*^9}, 3.68300283204945*^9, {3.683003228012485*^9, 
   3.683003233723921*^9}, {3.683003596728036*^9, 3.6830035979124107`*^9}, {
   3.683003891155197*^9, 3.683003897668232*^9}, {3.683003962179687*^9, 
   3.6830039760673*^9}},
 FontFamily->"Courier",
 FontSize->16,
 FontWeight->"Bold"],

Cell[BoxData[
 RowBox[{
  RowBox[{
  "string", " ", "=", " ", 
   "\"\<2015-Academic-Calendar-FINAL.pdf Bluetooth-uploads/ emuPass~\n\
heart-info/ laptop_phone_call Notre_Dame/\n\
refcat_mysql_table_backup_15_5_2008/ sound_protest tex_files/\n2015-research/ \
bptemp/ EOM_Workshop/ hs_err_pid11598.log\nLaTeX_Documentation/ o/ \
Rental_Letter.jpeg sound_protest~ toget\n2016-research/ christine_scan.jpeg \
familial_AF hyper_sail.txt\nLibreOffice_intro.pdf o.gif Rental_Letter.pdf \
sound_survey toget~\n4pitwist.html christine_scan.pdf familial_AF~ \
hyper_sail.txt~\nLibreOffice_writer.pdf one Reviews_Ive_done/ state tp.gif \
abs cleanups\nfb295.jpg Info/ Licensing/ Optics/ revtex/ state~ tp.ico abs1\n\
contents_of_2GB_usb/ Figs@ Java/ lpstat Oscar_Bruno/ revtex4/\nst_clares \
tp.png abs2 Cs_50th/ Fortran/ Jonas_cooler mail.gif\npdf_temp/ revtex4a/ \
std.vcf Travel_docs/ ACGRG8/ CUDOS/\nFQXi_grant_applictaions/ Jonas_cooler~ \
Manuals/ pgplot/ revtex_demo/\nstep4b_s1_d0.gif tree_of_life AEI_admin/ \
curvature_Lagrangians_1D/\ngitjunk junk Mathematica_files/ PHP/ sample.emacs \
Tcl_demo/ tv_series\nahn-scientific/ Darien_university_attendance glasses ka\n\
Mathematica_files_Version5_backup/ Pokolbin.pdf sample.Xdefaults\n\
.tcsh.completions UTS_work/ ahn-scientific-bak/ date_of_last_backup\ngot/ \
Kahlias_grant/ MathLink-Linux/ Precision_530/\nsample.Xdefaults_roberts \
.tcshrc_demo vjunk Android/ Debian-Admin/\ngrg18/ Ken_Wharton Matlab/ \
Printer/ Setting_up_git temp_pics1/\nWeeMee_19913401_for_ahn567.jpg an.ico \
debs/ GR_reference_books/\nKen_Wharton~ Mayavi2/ Python/ Setting_up_git~ \
temp_pics2/ WeeMee.jpg\naustralia.gif .directory gz_handler* Kids/ meep/ Qt/\n\
skype-debian_4.2.0.11-1_i386.deb Term2-2013.pdf Xarelto_MG.pdf\n\
Bandsolve_figs/ e/ gzless* kl melb Radiation2D/ SL_admin/ tesfile2\n\
gupi:~/Mirror_leo >\>\""}], ";"}]], "Input"],

Cell[BoxData[
 RowBox[{"CellPrint", "[", 
  RowBox[{"Cell", "[", "\[IndentingNewLine]", 
   RowBox[{
   "string", ",", "\[IndentingNewLine]", "\"\<Text\>\"", ",", 
    "\[IndentingNewLine]", 
    RowBox[{"Evaluatable", "\[Rule]", "True"}], ",", "\[IndentingNewLine]", 
    RowBox[{"CellEvaluationFunction", "\[Rule]", "g"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"FontFamily", "\[Rule]", "\"\<Serif\>\""}], ",", 
    "\[IndentingNewLine]", " ", 
    RowBox[{"FontSize", "\[Rule]", "17"}]}], " ", "]"}], "]"}]], "Input",
 CellID->315919837],

Cell["\<\
2015-Academic-Calendar-FINAL.pdf Bluetooth-uploads/ emuPass~
heart-info/ laptop_phone_call Notre_Dame/
refcat_mysql_table_backup_15_5_2008/ sound_protest tex_files/
2015-research/ bptemp/ EOM_Workshop/ hs_err_pid11598.log
LaTeX_Documentation/ o/ Rental_Letter.jpeg sound_protest~ toget
2016-research/ christine_scan.jpeg familial_AF hyper_sail.txt
LibreOffice_intro.pdf o.gif Rental_Letter.pdf sound_survey toget~
4pitwist.html christine_scan.pdf familial_AF~ hyper_sail.txt~
LibreOffice_writer.pdf one Reviews_Ive_done/ state tp.gif abs cleanups
fb295.jpg Info/ Licensing/ Optics/ revtex/ state~ tp.ico abs1
contents_of_2GB_usb/ Figs@ Java/ lpstat Oscar_Bruno/ revtex4/
st_clares tp.png abs2 Cs_50th/ Fortran/ Jonas_cooler mail.gif
pdf_temp/ revtex4a/ std.vcf Travel_docs/ ACGRG8/ CUDOS/
FQXi_grant_applictaions/ Jonas_cooler~ Manuals/ pgplot/ revtex_demo/
step4b_s1_d0.gif tree_of_life AEI_admin/ curvature_Lagrangians_1D/
gitjunk junk Mathematica_files/ PHP/ sample.emacs Tcl_demo/ tv_series
ahn-scientific/ Darien_university_attendance glasses ka
Mathematica_files_Version5_backup/ Pokolbin.pdf sample.Xdefaults
.tcsh.completions UTS_work/ ahn-scientific-bak/ date_of_last_backup
got/ Kahlias_grant/ MathLink-Linux/ Precision_530/
sample.Xdefaults_roberts .tcshrc_demo vjunk Android/ Debian-Admin/
grg18/ Ken_Wharton Matlab/ Printer/ Setting_up_git temp_pics1/
WeeMee_19913401_for_ahn567.jpg an.ico debs/ GR_reference_books/
Ken_Wharton~ Mayavi2/ Python/ Setting_up_git~ temp_pics2/ WeeMee.jpg
australia.gif .directory gz_handler* Kids/ meep/ Qt/
skype-debian_4.2.0.11-1_i386.deb Term2-2013.pdf Xarelto_MG.pdf
Bandsolve_figs/ e/ gzless* kl melb Radiation2D/ SL_admin/ tesfile2
gupi:~/Mirror_leo >\
\>", "Text",
 Evaluatable->True,
 CellEvaluationFunction->$CellContext`g,
 GeneratedCell->True,
 CellAutoOverwrite->True,
 FontFamily->"Serif",
 FontSize->17],

Cell[BoxData[
 RowBox[{"CellPrint", "[", 
  RowBox[{"Cell", "[", "\[IndentingNewLine]", 
   RowBox[{
   "string", ",", "\[IndentingNewLine]", "\"\<Text\>\"", ",", 
    "\[IndentingNewLine]", 
    RowBox[{"Evaluatable", "\[Rule]", "True"}], ",", "\[IndentingNewLine]", 
    RowBox[{"CellEvaluationFunction", "\[Rule]", "g"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"FontFamily", "\[Rule]", "\"\<Utopia\>\""}], ",", 
    "\[IndentingNewLine]", " ", 
    RowBox[{"FontSize", "\[Rule]", "18"}]}], " ", "]"}], "]"}]], "Input",
 CellID->1705167732],

Cell["\<\
2015-Academic-Calendar-FINAL.pdf Bluetooth-uploads/ emuPass~
heart-info/ laptop_phone_call Notre_Dame/
refcat_mysql_table_backup_15_5_2008/ sound_protest tex_files/
2015-research/ bptemp/ EOM_Workshop/ hs_err_pid11598.log
LaTeX_Documentation/ o/ Rental_Letter.jpeg sound_protest~ toget
2016-research/ christine_scan.jpeg familial_AF hyper_sail.txt
LibreOffice_intro.pdf o.gif Rental_Letter.pdf sound_survey toget~
4pitwist.html christine_scan.pdf familial_AF~ hyper_sail.txt~
LibreOffice_writer.pdf one Reviews_Ive_done/ state tp.gif abs cleanups
fb295.jpg Info/ Licensing/ Optics/ revtex/ state~ tp.ico abs1
contents_of_2GB_usb/ Figs@ Java/ lpstat Oscar_Bruno/ revtex4/
st_clares tp.png abs2 Cs_50th/ Fortran/ Jonas_cooler mail.gif
pdf_temp/ revtex4a/ std.vcf Travel_docs/ ACGRG8/ CUDOS/
FQXi_grant_applictaions/ Jonas_cooler~ Manuals/ pgplot/ revtex_demo/
step4b_s1_d0.gif tree_of_life AEI_admin/ curvature_Lagrangians_1D/
gitjunk junk Mathematica_files/ PHP/ sample.emacs Tcl_demo/ tv_series
ahn-scientific/ Darien_university_attendance glasses ka
Mathematica_files_Version5_backup/ Pokolbin.pdf sample.Xdefaults
.tcsh.completions UTS_work/ ahn-scientific-bak/ date_of_last_backup
got/ Kahlias_grant/ MathLink-Linux/ Precision_530/
sample.Xdefaults_roberts .tcshrc_demo vjunk Android/ Debian-Admin/
grg18/ Ken_Wharton Matlab/ Printer/ Setting_up_git temp_pics1/
WeeMee_19913401_for_ahn567.jpg an.ico debs/ GR_reference_books/
Ken_Wharton~ Mayavi2/ Python/ Setting_up_git~ temp_pics2/ WeeMee.jpg
australia.gif .directory gz_handler* Kids/ meep/ Qt/
skype-debian_4.2.0.11-1_i386.deb Term2-2013.pdf Xarelto_MG.pdf
Bandsolve_figs/ e/ gzless* kl melb Radiation2D/ SL_admin/ tesfile2
gupi:~/Mirror_leo >\
\>", "Text",
 Evaluatable->True,
 CellEvaluationFunction->$CellContext`g,
 GeneratedCell->True,
 CellAutoOverwrite->True,
 FontFamily->"Utopia",
 FontSize->18],

Cell[BoxData[
 RowBox[{"CellPrint", "[", 
  RowBox[{"Cell", "[", "\[IndentingNewLine]", 
   RowBox[{
   "string", ",", "\[IndentingNewLine]", "\"\<Text\>\"", ",", 
    "\[IndentingNewLine]", 
    RowBox[{"Evaluatable", "\[Rule]", "True"}], ",", "\[IndentingNewLine]", 
    RowBox[{"CellEvaluationFunction", "\[Rule]", "g"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"FontFamily", "\[Rule]", "\"\<Times New Roman\>\""}], ",", 
    "\[IndentingNewLine]", " ", 
    RowBox[{"FontSize", "\[Rule]", "20"}]}], " ", "]"}], "]"}]], "Input",
 CellID->999406468],

Cell["\<\
2015-Academic-Calendar-FINAL.pdf Bluetooth-uploads/ emuPass~
heart-info/ laptop_phone_call Notre_Dame/
refcat_mysql_table_backup_15_5_2008/ sound_protest tex_files/
2015-research/ bptemp/ EOM_Workshop/ hs_err_pid11598.log
LaTeX_Documentation/ o/ Rental_Letter.jpeg sound_protest~ toget
2016-research/ christine_scan.jpeg familial_AF hyper_sail.txt
LibreOffice_intro.pdf o.gif Rental_Letter.pdf sound_survey toget~
4pitwist.html christine_scan.pdf familial_AF~ hyper_sail.txt~
LibreOffice_writer.pdf one Reviews_Ive_done/ state tp.gif abs cleanups
fb295.jpg Info/ Licensing/ Optics/ revtex/ state~ tp.ico abs1
contents_of_2GB_usb/ Figs@ Java/ lpstat Oscar_Bruno/ revtex4/
st_clares tp.png abs2 Cs_50th/ Fortran/ Jonas_cooler mail.gif
pdf_temp/ revtex4a/ std.vcf Travel_docs/ ACGRG8/ CUDOS/
FQXi_grant_applictaions/ Jonas_cooler~ Manuals/ pgplot/ revtex_demo/
step4b_s1_d0.gif tree_of_life AEI_admin/ curvature_Lagrangians_1D/
gitjunk junk Mathematica_files/ PHP/ sample.emacs Tcl_demo/ tv_series
ahn-scientific/ Darien_university_attendance glasses ka
Mathematica_files_Version5_backup/ Pokolbin.pdf sample.Xdefaults
.tcsh.completions UTS_work/ ahn-scientific-bak/ date_of_last_backup
got/ Kahlias_grant/ MathLink-Linux/ Precision_530/
sample.Xdefaults_roberts .tcshrc_demo vjunk Android/ Debian-Admin/
grg18/ Ken_Wharton Matlab/ Printer/ Setting_up_git temp_pics1/
WeeMee_19913401_for_ahn567.jpg an.ico debs/ GR_reference_books/
Ken_Wharton~ Mayavi2/ Python/ Setting_up_git~ temp_pics2/ WeeMee.jpg
australia.gif .directory gz_handler* Kids/ meep/ Qt/
skype-debian_4.2.0.11-1_i386.deb Term2-2013.pdf Xarelto_MG.pdf
Bandsolve_figs/ e/ gzless* kl melb Radiation2D/ SL_admin/ tesfile2
gupi:~/Mirror_leo >\
\>", "Text",
 Evaluatable->True,
 CellEvaluationFunction->$CellContext`g,
 GeneratedCell->True,
 CellAutoOverwrite->True,
 FontFamily->"Times New Roman",
 FontSize->20],

Cell[BoxData[
 RowBox[{"CellPrint", "[", 
  RowBox[{"Cell", "[", "\[IndentingNewLine]", 
   RowBox[{
   "string", ",", "\[IndentingNewLine]", "\"\<Text\>\"", ",", 
    "\[IndentingNewLine]", 
    RowBox[{"Evaluatable", "\[Rule]", "True"}], ",", "\[IndentingNewLine]", 
    RowBox[{"CellEvaluationFunction", "\[Rule]", "g"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"FontFamily", "\[Rule]", "\"\<Serif\>\""}], ",", 
    "\[IndentingNewLine]", " ", 
    RowBox[{"FontSize", "\[Rule]", "18"}]}], " ", "]"}], "]"}]], "Input",
 CellID->1628714888],

Cell["\<\
2015-Academic-Calendar-FINAL.pdf Bluetooth-uploads/ emuPass~
heart-info/ laptop_phone_call Notre_Dame/
refcat_mysql_table_backup_15_5_2008/ sound_protest tex_files/
2015-research/ bptemp/ EOM_Workshop/ hs_err_pid11598.log
LaTeX_Documentation/ o/ Rental_Letter.jpeg sound_protest~ toget
2016-research/ christine_scan.jpeg familial_AF hyper_sail.txt
LibreOffice_intro.pdf o.gif Rental_Letter.pdf sound_survey toget~
4pitwist.html christine_scan.pdf familial_AF~ hyper_sail.txt~
LibreOffice_writer.pdf one Reviews_Ive_done/ state tp.gif abs cleanups
fb295.jpg Info/ Licensing/ Optics/ revtex/ state~ tp.ico abs1
contents_of_2GB_usb/ Figs@ Java/ lpstat Oscar_Bruno/ revtex4/
st_clares tp.png abs2 Cs_50th/ Fortran/ Jonas_cooler mail.gif
pdf_temp/ revtex4a/ std.vcf Travel_docs/ ACGRG8/ CUDOS/
FQXi_grant_applictaions/ Jonas_cooler~ Manuals/ pgplot/ revtex_demo/
step4b_s1_d0.gif tree_of_life AEI_admin/ curvature_Lagrangians_1D/
gitjunk junk Mathematica_files/ PHP/ sample.emacs Tcl_demo/ tv_series
ahn-scientific/ Darien_university_attendance glasses ka
Mathematica_files_Version5_backup/ Pokolbin.pdf sample.Xdefaults
.tcsh.completions UTS_work/ ahn-scientific-bak/ date_of_last_backup
got/ Kahlias_grant/ MathLink-Linux/ Precision_530/
sample.Xdefaults_roberts .tcshrc_demo vjunk Android/ Debian-Admin/
grg18/ Ken_Wharton Matlab/ Printer/ Setting_up_git temp_pics1/
WeeMee_19913401_for_ahn567.jpg an.ico debs/ GR_reference_books/
Ken_Wharton~ Mayavi2/ Python/ Setting_up_git~ temp_pics2/ WeeMee.jpg
australia.gif .directory gz_handler* Kids/ meep/ Qt/
skype-debian_4.2.0.11-1_i386.deb Term2-2013.pdf Xarelto_MG.pdf
Bandsolve_figs/ e/ gzless* kl melb Radiation2D/ SL_admin/ tesfile2
gupi:~/Mirror_leo >\
\>", "Text",
 Evaluatable->True,
 CellEvaluationFunction->$CellContext`g,
 GeneratedCell->True,
 CellAutoOverwrite->True,
 FontFamily->"Serif",
 FontSize->18],

Cell["\<\
2015-Academic-Calendar-FINAL.pdf Bluetooth-uploads/ emuPass~
heart-info/ laptop_phone_call Notre_Dame/
refcat_mysql_table_backup_15_5_2008/ sound_protest tex_files/
2015-research/ bptemp/ EOM_Workshop/ hs_err_pid11598.log
LaTeX_Documentation/ o/ Rental_Letter.jpeg sound_protest~ toget
2016-research/ christine_scan.jpeg familial_AF hyper_sail.txt
LibreOffice_intro.pdf o.gif Rental_Letter.pdf sound_survey toget~
4pitwist.html christine_scan.pdf familial_AF~ hyper_sail.txt~
LibreOffice_writer.pdf one Reviews_Ive_done/ state tp.gif abs cleanups
fb295.jpg Info/ Licensing/ Optics/ revtex/ state~ tp.ico abs1
contents_of_2GB_usb/ Figs@ Java/ lpstat Oscar_Bruno/ revtex4/
st_clares tp.png abs2 Cs_50th/ Fortran/ Jonas_cooler mail.gif
pdf_temp/ revtex4a/ std.vcf Travel_docs/ ACGRG8/ CUDOS/
FQXi_grant_applictaions/ Jonas_cooler~ Manuals/ pgplot/ revtex_demo/
step4b_s1_d0.gif tree_of_life AEI_admin/ curvature_Lagrangians_1D/
gitjunk junk Mathematica_files/ PHP/ sample.emacs Tcl_demo/ tv_series
ahn-scientific/ Darien_university_attendance glasses ka
Mathematica_files_Version5_backup/ Pokolbin.pdf sample.Xdefaults
.tcsh.completions UTS_work/ ahn-scientific-bak/ date_of_last_backup
got/ Kahlias_grant/ MathLink-Linux/ Precision_530/
sample.Xdefaults_roberts .tcshrc_demo vjunk Android/ Debian-Admin/
grg18/ Ken_Wharton Matlab/ Printer/ Setting_up_git temp_pics1/
WeeMee_19913401_for_ahn567.jpg an.ico debs/ GR_reference_books/
Ken_Wharton~ Mayavi2/ Python/ Setting_up_git~ temp_pics2/ WeeMee.jpg
australia.gif .directory gz_handler* Kids/ meep/ Qt/
skype-debian_4.2.0.11-1_i386.deb Term2-2013.pdf Xarelto_MG.pdf
Bandsolve_figs/ e/ gzless* kl melb Radiation2D/ SL_admin/ tesfile2
gupi:~/Mirror_leo >\
\>", "Text",
 Evaluatable->True,
 CellEvaluationFunction->$CellContext`g,
 GeneratedCell->True,
 CellAutoOverwrite->True,
 FontFamily->"Times",
 FontSize->18],

Cell["\<\

Utopia 18 seems OK.
\
\>", "Text"]
},
WindowSize->{1252, 1183},
WindowMargins->{{Automatic, 88}, {Automatic, 61}},
FrontEndVersion->"11.0 for Linux x86 (64-bit) (July 28, 2016)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[558, 20, 45, 0, 55, "Input"],
Cell[606, 22, 383, 9, 116, "Text"],
Cell[992, 33, 45, 0, 55, "Input"],
Cell[1040, 35, 420, 10, 125, "Text"],
Cell[1463, 47, 45, 0, 55, "Input"],
Cell[1511, 49, 410, 10, 136, "Text"],
Cell[1924, 61, 45, 0, 55, "Input"],
Cell[1972, 63, 392, 9, 115, "Text"],
Cell[2367, 74, 45, 0, 55, "Input"],
Cell[2415, 76, 410, 10, 126, "Text"],
Cell[2828, 88, 45, 0, 55, "Input"],
Cell[2876, 90, 409, 10, 126, "Text"],
Cell[3288, 102, 45, 0, 55, "Input"],
Cell[3336, 104, 409, 10, 137, "Text"],
Cell[3748, 116, 45, 0, 55, "Input"],
Cell[3796, 118, 383, 9, 130, "Text"],
Cell[4182, 129, 45, 0, 55, "Input"],
Cell[4230, 131, 413, 10, 166, "Text"],
Cell[4646, 143, 45, 0, 55, "Input"],
Cell[4694, 145, 413, 10, 135, "Text"],
Cell[5110, 157, 45, 0, 55, "Input"],
Cell[5158, 159, 407, 10, 137, "Text"],
Cell[5568, 171, 45, 0, 55, "Input"],
Cell[5616, 173, 405, 10, 126, "Text"],
Cell[6024, 185, 45, 0, 55, "Input"],
Cell[6072, 187, 402, 10, 57, "Text",
 CellID->1368526407],
Cell[6477, 199, 776, 19, 60, "Text"],
Cell[7256, 220, 1278, 21, 80, "Text"],
Cell[8537, 243, 45, 0, 55, "Input"],
Cell[8585, 245, 408, 10, 57, "Text",
 CellID->1225378313],
Cell[8996, 257, 782, 19, 59, "Text"],
Cell[9781, 278, 1284, 21, 80, "Text"],
Cell[11068, 301, 45, 0, 55, "Input"],
Cell[11116, 303, 406, 10, 55, "Text",
 CellID->1844278699],
Cell[11525, 315, 780, 19, 57, "Text"],
Cell[12308, 336, 1282, 21, 77, "Text"],
Cell[13593, 359, 45, 0, 55, "Input"],
Cell[13641, 361, 415, 10, 67, "Text",
 CellID->920795920],
Cell[14059, 373, 790, 19, 67, "Text"],
Cell[14852, 394, 1292, 21, 123, "Text"],
Cell[16147, 417, 45, 0, 55, "Input"],
Cell[16195, 419, 416, 10, 71, "Text",
 CellID->1273698402],
Cell[16614, 431, 790, 19, 101, "Text"],
Cell[17407, 452, 1292, 21, 161, "Text"],
Cell[18702, 475, 45, 0, 55, "Input"],
Cell[18750, 477, 421, 10, 63, "Text",
 CellID->1986195952],
Cell[19174, 489, 795, 19, 89, "Text"],
Cell[19972, 510, 1297, 21, 141, "Text"],
Cell[21272, 533, 45, 0, 55, "Input"],
Cell[21320, 535, 415, 10, 67, "Text",
 CellID->1549376863],
Cell[21738, 547, 789, 19, 67, "Text"],
Cell[22530, 568, 1291, 21, 95, "Text"],
Cell[23824, 591, 45, 0, 55, "Input"],
Cell[23872, 593, 415, 10, 73, "Text",
 CellID->1160003082],
Cell[24290, 605, 789, 19, 104, "Text"],
Cell[25082, 626, 1291, 21, 135, "Text"],
Cell[26376, 649, 45, 0, 55, "Input"],
Cell[26424, 651, 402, 10, 61, "Text",
 CellID->1723775489],
Cell[26829, 663, 776, 19, 90, "Text"],
Cell[27608, 684, 1278, 21, 112, "Text"],
Cell[28889, 707, 45, 0, 55, "Input"],
Cell[28937, 709, 407, 10, 61, "Text",
 CellID->665415606],
Cell[29347, 721, 782, 19, 63, "Text"],
Cell[30132, 742, 1284, 21, 111, "Text"],
Cell[31419, 765, 45, 0, 55, "Input"],
Cell[31467, 767, 403, 10, 61, "Text",
 CellID->492096714],
Cell[31873, 779, 778, 19, 88, "Text"],
Cell[32654, 800, 1280, 21, 136, "Text"],
Cell[33937, 823, 10788, 198, 1187, "Input",
 InitializationCell->True],
Cell[44728, 1023, 10779, 198, 1322, "Input",
 InitializationCell->True],
Cell[55510, 1223, 10779, 198, 1158, "Input",
 InitializationCell->True],
Cell[66292, 1423, 1871, 28, 627, "Input"],
Cell[68166, 1453, 547, 12, 165, "Input",
 CellID->315919837],
Cell[68716, 1467, 1870, 35, 683, "Text",
 Evaluatable->True],
Cell[70589, 1504, 549, 12, 165, "Input",
 CellID->1705167732],
Cell[71141, 1518, 1871, 35, 711, "Text",
 Evaluatable->True],
Cell[73015, 1555, 557, 12, 165, "Input",
 CellID->999406468],
Cell[73575, 1569, 1880, 35, 740, "Text",
 Evaluatable->True],
Cell[75458, 1606, 548, 12, 165, "Input",
 CellID->1628714888],
Cell[76009, 1620, 1870, 35, 711, "Text",
 Evaluatable->True],
Cell[77882, 1657, 1870, 35, 711, "Text",
 Evaluatable->True],
Cell[79755, 1694, 45, 4, 69, "Text"]
}
]
*)

