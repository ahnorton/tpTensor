(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



(* ::Input::Initialization:: *)
BeginPackage["TeXit`"];
EndPackage[]


(* ::Input::Initialization:: *)
Needs["FileFunctions`"]


(* ::Input::Initialization:: *)
Needs["NotebookEvaluation`"]


(* ::Input::Initialization:: *)
TeXitBackgroundColor = RGBColor[{244,244,244}/255]


(* ::Code::Initialization:: *)
TeXitBackground[x_]:= 
    If[!x === Null,
        CellPrint[
            Cell[BoxData[ToBoxes[x]],
                "Output",
                Background -> TeXitBackgroundColor,
                ShowCellLabel -> True,
                CellLabel -> ToString[Out[$Line]]
            ]
        ];
        x;    
    ]


(* ::Code::Initialization:: *)
noTeXitBackground[x_]:= 
    If[!x === Null,
        CellPrint[
            Cell[BoxData[ToBoxes[x]],
                "Output",
                Background -> None,
                ShowCellLabel -> True,
                CellLabel -> ToString[Out[$Line]]
            ]
        ];
        x;    
    ]


(* ::Input::Initialization:: *)
$HiddenColor= RGBColor[{55,180,55}/255.];


(* ::Input::Initialization:: *)
$TeXitDir=NotebookDirectory[]<>FileBaseName[NotebookFileName[]]<>"_TeXit";


(* ::Input::Initialization:: *)
If[!DirectoryQ[$TeXitDir],CreateDirectory[$TeXitDir]];


(* ::Input::Initialization:: *)
$TeXitInstallationDirectory = FileNameJoin[{ParentDirectory[DirectoryName[FindFile["TeXit`"]]],$TeXitVersion}]


(* ::Input::Initialization:: *)
If[!ValueQ[$TeXReplacements],$TeXReplacements = {}];


(* ::Input::Initialization:: *)
SetAttributes[CustomTeX,HoldFirst]


(* ::Input::Initialization:: *)
CustomTeX[x_,s_String]:=Module[{s1},
s1=MakeBoxes[x,TraditionalForm]//DisplayForm//TeXForm//ToString;
$TeXReplacements=DeleteCases[$TeXReplacements,s1->_];
AppendTo[$TeXReplacements,s1->s];
s]


(* ::Input::Initialization:: *)
Clear[RemoveCustomTeX];
RemoveCustomTeX[x_]:=Module[{s1},
s1=ToString[TeXForm[x]];
$TeXReplacements=DeleteCases[$TeXReplacements,Rule[s1,_]];
]


(* ::Input::Initialization:: *)
Get[FileNameJoin[{$TeXitInstallationDirectory,"CustomTeX.m"}]]


(* ::Input::Initialization:: *)
With[{f = FileNameJoin[{NotebookDirectory[],"CustomTeX.m"}]},
If[FileExistsQ[f], Get[f];]]


(* ::Input::Initialization:: *)
TeXCode[x_]:=ToString[TeXForm[x]]


(* ::Input::Initialization:: *)
$TeXCommand="pdflatex -halt-on-error ";
$TeXitBody0 = FileNameJoin[{$TeXitDir,"body0.tex"}];
$TeXitBody = FileNameJoin[{$TeXitDir,"body.tex"}];
$TeXStdOut  = FileNameJoin[{$TeXitDir,"StdOut.txt"}];
$TeXitFragment  = FileNameJoin[{$TeXitDir,"fragment.tex"}];


(* ::Input::Initialization:: *)
Clear[TeXit];
TeXit[]:=(TeXit[Null,""];)
TeXit[x_]:=TeXit[x,""]


(* ::Input::Initialization:: *)
label[]:=TeXit[#,""]&
label[label_]:=TeXit[#,ToString[label]]&


(* ::Input::Initialization:: *)
CleanLabel[label_]:=StringReplace[ToString[FullForm[label]],{"\\"->"","["->"","]"->"","\""->""}]


(* ::Input::Initialization:: *)
CleanLabelRule[label_]:=label->CleanLabel[label]


(* ::Input::Initialization:: *)
CleanRefs[s_String] :=StringReplace[s,Map[CleanLabelRule, StringCases[s,"\\ref{"|"\\label{"~~Shortest[x__]~~"}":>x]]]


(* ::Input::Initialization:: *)
FixAbsBug[s_String]:= StringReplace[s,{"\\left\\left"->"\\left","\\right\\right"->"\\right"}]


(* ::Input::Initialization:: *)
noleft[eqn_] :=($noleft = True; eqn)


(* ::Input::Initialization:: *)
If[!ValueQ[$LastType],$LastType="text"];


(* ::Code::Initialization:: *)
TeXit[x0_, lab_String]:= Module[{x, s, s0, s1, s2, s3, s4, s5, s6, s7, f, r, n, i1, i2, i3, type, last0, first0, last, first},
    If[x0===Null, x="", x=x0];
    If[Head[x]=== String,type="text",type="math"];
    i1 = "                 "; 
    i2 = "                        ";
    i3 = "                          ";
    If[type==="math",
        s0 = FixAbsBug[ToString[TeXForm[x]]];
        s1 = StringTrim[StringReplace[s0, "\\text{HiddenLeftEqn}" -> ""]];
        If[lab==="" || lab===$nonumber,
            s2 = s1<>"\n\\nonumber\n"
            ,
            s2 = s1<>"\n\\label{"<>CleanLabel[lab]<>"}\n"
        ];
        s3 = StringReplace[s2, "=" -> "&=&"];
        s4 = StringReplace[s3, y_~~"&=&" :> y<>"\n"<>i2<>"&=&  "];
        s5 = StringReplace[s4, "+" -> "\n"<>i3<>"+  "];
        s6 = StringReplace[s5, y_~~"-" :> y<>"\n"<>i3<>"-  "];
        s7 = StringReplace[s6,"\n"~~" "...~~"\n"->"\n"];
        s  = i1<>StringReplace[s7, $TeXReplacements]
        ,
        s0 = x<>"\n";
        s1 = StringReplace[s0, "(*"~~Shortest[y__]~~"*)" :> "$"<>ToString[TeXForm[ToExpression[y,StandardForm,HoldForm]]]<>"$"];
        s2 = CleanRefs[s1];
        s3 = StringReplace[s2, {"\\[CloseCurlyQuote]" -> "'", "\\[OpenCurlyQuote]" -> "'", 
                                "\\[CloseCurlyDoubleQuote]" -> "''", "\\[OpenCurlyDoubleQuote]" -> "``"}];
        s4 = StringReplace[s3, $TeXReplacements];
        s  = i1<>s4
    ];    
    If[type==="text", first=""; last=""];
    If[type==="math", first="\\bea\n"; last="\\eea\n"];
    If[$LastType ==="text" && type==="text", first0=""];
    If[$LastType ==="text" && type==="math", first0="\\bea\n"];
    If[$LastType ==="math" && type==="text", first0="\\eea\n"];
    If[$LastType ==="math" && type==="math", first0="\\\\[4pt]\n"];
    If[TrueQ[$pdflatexLater],
        OpenAppend[$TeXitBody0];
        WriteString[$TeXitBody0,first0<>s];
        Close[$TeXitBody0];
        $LastType = type;
        ,
        WriteString[$TeXitFragment,first<>s<>last];
        Close[$TeXitFragment];
        Quiet[DeleteFile[FileNameJoin[{$TeXitDir,"main-fragment.aux"}]]];
        Run["cd "<>$TeXitDir<>"; " <>$TeXCommand<>" -draftmode main-fragment.tex > "<>$TeXStdOut];
        r = ReadFile[$TeXStdOut];
        n = StringPosition[r,"!"];
        If[!n==={}, $TeXErrors = StringDrop[r, First[First[n]]-1], $TeXErrors=""];
        If[$TeXErrors==="",            
            OpenAppend[$TeXitBody0];
            WriteString[$TeXitBody0,first0<>s];
            Close[$TeXitBody0];
            Quiet[DeleteFile[$TeXitBody]];
            CopyFile[$TeXitBody0,$TeXitBody];
            If[!last==="",
                OpenAppend[$TeXitBody];
                WriteString[$TeXitBody,last];
                Close[$TeXitBody]
            ];    
            $LastType = type;
            Run["cd "<>$TeXitDir<>"; " <>$TeXCommand<>" main.tex > "<>$TeXStdOut];
            r = ReadFile[$TeXStdOut];
            n = StringPosition[r,"!"];
            If[!n==={}, $TeXErrors = StringDrop[r, First[First[n]]-1], $TeXErrors=""];
            If[!$TeXErrors==="",
                Print["TeXit: How here? Fragment was OK. Better do \"pdflatex main.tex\" by hand to see"];
                Print["what happened and then fix up body.tex to get it going again."];
                Print["Try deleting file "<>FileNameJoin[{$TeXitDir,"main.aux"}]<>"\[VeryThinSpace]."];
                Print["Alternatively, use ClearTeX[ ] to delete all tex files and start again."];
                Print[Style[$TeXErrors,RGBColor[{220,0,0}/255.]]];
                Abort[]
            ];
            If[x0===Null|| Head[x]===String || (Head[x]===Equal && LEqn[x]===HiddenLeftEqn), 
                Null
                , 
                x // TeXitBackground
            ]
            ,
            Print[Style[$TeXErrors,RGBColor[{220,0,0}/255.]]];
            x
        ]
    ]
]


(* ::Input::Initialization:: *)

$TeXitMainString ="
%
%  Any changes to this file will be lost.
%  This file is recreated when the TeXit package is loaded.
%
\\input preamble
\\input body.tex
\\  % in case body is empty.
\\input postamble
";


(* ::Input::Initialization:: *)
$TeXitMain = FileNameJoin[{$TeXitDir,"main.tex"}];


(* ::Input::Initialization:: *)
If[FileExistsQ[$TeXitMain],DeleteFile[$TeXitMain]];
WriteString[$TeXitMain,$TeXitMainString];
Close[$TeXitMain];


(* ::Input::Initialization:: *)
$TeXitFrag ="
%  This file is recreated when the TeXit package is loaded.
\\input preamble
\\input fragment.tex
\\  % in case fragment is empty.
\\input postamble
";


(* ::Input::Initialization:: *)
$TeXitMainFragment = FileNameJoin[{$TeXitDir,"main-fragment.tex"}];


(* ::Input::Initialization:: *)
If[FileExistsQ[$TeXitMainFragment],DeleteFile[$TeXitMainFragment]];
WriteString[$TeXitMainFragment,$TeXitFrag];
Close[$TeXitMainFragment];


(* ::Input::Initialization:: *)
PDFViewer[cmd_String]:=Module[{r,viewer},
viewer=First[StringSplit[cmd]];
r=RunProcess[{"which", viewer}];
If[!r["ExitCode"]===0,
Print["PDFViewer[\""<>viewer<>"\"] :"<>"   Command \""<>viewer<>"\" not found."],
$PDFViewer=cmd]
]


(* ::Input::Initialization:: *)
PDFViewer[]:=If[!ValueQ[$PDFViewer],
Print["ValueQ[$PDFViewer] is False. Use ?\[VeryThinSpace]PDFViewer to see the relevent documentation.\n"],
KillProcess[$PDFViewerProcess];$PDFViewerProcess=StartProcess[Append[StringSplit[$PDFViewer],FileNameJoin[{$TeXitDir,"/main.pdf"}]]]]


(* ::Input::Initialization:: *)
If[!ValueQ[$PDFViewer],PDFViewer["okular --caption "<>FileBaseName[NotebookFileName[]]];]
If[!ValueQ[$PDFViewer],PDFViewer["evince"];]
If[!ValueQ[$PDFViewer],PDFViewer["acroread"];]


(* ::Input::Initialization:: *)
ClosePDFViewer[]:=KillProcess[$PDFViewerProcess]


(* ::Input::Initialization:: *)
AbbreviatedPath[f_String, baseurl_String]:= Module[{u,n},
n=StringLength[baseurl];
u = StringTake[f,n];
If[u===baseurl,StringDrop[f,n],f]]


(* ::Input::Initialization:: *)
If[!ValueQ[$TeXitBaseurl],$TeXitBaseurl=""];


(* ::Input::Initialization:: *)
If[!ValueQ[$TeXitTitle],$TeXitTitle=FileBaseName[NotebookFileName[]]];


(* ::Input::Initialization:: *)
If[!ValueQ[$TeXitAuthor],$TeXitAuthor=$UserName];


(* ::Input::Initialization:: *)
InputMyTeXCommands[]:=Module[{mesg},
If[ValueQ[$MyTeXCommands],
If[!FileExistsQ[$MyTeXCommands],
mesg="%  Variable $MyTeXCommands has been assigned (possibly in your init.m file?) but the file does not exist, $MyTeXCommands = "<>$MyTeXCommands;
Print["TeXit: Variable $MyTeXCommands has been assigned (possibly in your init.m file?) but the file does not exist, $MyTeXCommands = "<>$MyTeXCommands],
mesg="\\input \""<>$MyTeXCommands<>"\""],
mesg="%  Variable $MyTeXCommands has not been assigned." ];
mesg]


(* ::Input::Initialization:: *)
$SimpleMyCommands[] :="
%
% This file is where you define the TeX commands to be used in this paper (e.g., using \\newcommand). 
% If deleted, this file will be re-created when TeXit next looks for it. Any edits you make will be
% retained across sessions.
%
% If the Mathematica variable $MyTeXCommands is a valid filename, then that file will be input here:

"<>InputMyTeXCommands[]<>"

% Typical usage would be to assign $MyTeXCommands in your init.m file. But only do that if you don't
% want to bother with editing the copy of this file for each new paper. Otherwise you might as well 
% input it from here.
%
% Files of commands that you regularly use can be input here:
% \\input file_name1.tex
% \\input file_name2.tex

% Define any other TeX commands for this paper here:
% \\newcommand{\\MP}{{Mathisson--Papapetrou}} 

";


(* ::Input::Initialization:: *)
$MyCommandsFile = FileNameJoin[{$TeXitDir,"my_commands.tex"}]


(* ::Input::Initialization:: *)
If[!FileExistsQ[$MyCommandsFile],
WriteString[$MyCommandsFile,$SimpleMyCommands[]];
Close[$MyCommandsFile]]


(* ::Input::Initialization:: *)
$SimplePreamble ="
%
%  Any changes to this file will be lost.
%  This file is recreated when the TeXit package is loaded.
%
%  See:  ? PreambleFile
%
\\documentclass[a4paper,11pt]{article}

\\usepackage[top=1.5cm, bottom=1.5cm, left=1.5cm, right=1.5cm]{geometry}

\\usepackage{amsmath, amssymb, graphics, setspace}

\\usepackage{tensor}
\\usepackage[pdfnewwindow=true]{hyperref}
\\hypersetup{
     pdfnewwindow=true,
     baseurl="<>$TeXitBaseurl<>"}

% \\newcommand{\\mathsym}[1]{{}}
% \\newcommand{\\unicode}[1]{{}}
% \\newcounter{mathematicapage}

% \\newcommand{\\bea}{\\begin{eqnarray}}
% \\newcommand{\\eea}{\\end{eqnarray}}

\\input "<>$MyCommandsFile<>"

\\begin{document}
";


(* ::Input::Initialization:: *)
$SimplePreambleFile= FileNameJoin[{$TeXitDir,"simple_preamble.tex"}];


(* ::Input::Initialization:: *)
If[FileExistsQ[$SimplePreambleFile],DeleteFile[$SimplePreambleFile]];
WriteString[$SimplePreambleFile,$SimplePreamble];
Close[$SimplePreambleFile];


(* ::Input::Initialization:: *)
Clear[PreambleFile]
PreambleFile[name_String]:=Module[{f},
f = FileNameJoin[{$TeXitDir,name}];
If[!FileExistsQ[f], Return["File not found: "<>ToString[f]]];
$PreambleFile =f;
Run["ln -sf "<>name<>" "<>$TeXitDir<>"/preamble"];
$Preamble=ReadFile[f];
]


(* ::Input::Initialization:: *)
PreambleFile[]:=$PreambleFile


(* ::Input::Initialization:: *)
Preamble[]:=$Preamble=ReadFile[PreambleFile[]]


(* ::Input::Initialization:: *)
PreambleFile["simple_preamble.tex"]


(* ::Input::Initialization:: *)
Unprotect[$SimplePostamble];
$SimplePostamble ="
%
%  Any changes to this file will be lost.
%  This file is recreated when the TeXit package is loaded.
%
%  See:  ? PostambleFile
%
\\end{document}\n";
Protect[$SimplePostamble];


(* ::Input::Initialization:: *)
$SimplePostambleFile= FileNameJoin[{$TeXitDir,"simple_postamble.tex"}];


(* ::Input::Initialization:: *)
If[FileExistsQ[$SimplePostambleFile],DeleteFile[$SimplePostambleFile]];
WriteString[$SimplePostambleFile,$SimplePostamble];
Close[$SimplePostambleFile];


(* ::Input::Initialization:: *)
Clear[PostambleFile]
PostambleFile[name_String]:=Module[{f},
f = FileNameJoin[{$TeXitDir,name}];
If[!FileExistsQ[f], Return["File not found: "<>ToString[f]]];
$PostambleFile =f;
Run["ln -sf "<>name<>" "<>$TeXitDir<>"/postamble"];
$Postamble=ReadFile[f];
]


(* ::Input::Initialization:: *)
PostambleFile[]:=$PostambleFile


(* ::Input::Initialization:: *)
Postamble[]:=$Postamble=ReadFile[PostambleFile[]]


(* ::Input::Initialization:: *)
PostambleFile["simple_postamble.tex"]


(* ::Input::Initialization:: *)
Options[InputText]={
InputBackground->{242,242,242},
InputFontSize->13,
InputFontFamily->"Latin Modern Roman",
InputCellFrame->False,
InputShowGroupOpener->True, 
InputCellMargins->{{66,2},{2,1}},
InputCellLabelMargins->{{0,0},{0,0}}
};


(* ::Input::Initialization:: *)
Clear[InputText]
InputText[OptionsPattern[]]:=InputText["",Print,False]
InputText[prompt_String,OptionsPattern[]]:=InputText[prompt,Print,False]
InputText[prompt_String,f_,OptionsPattern[]]:=InputText[prompt,f,False]
InputText[prompt_String,f_, keepprompt_,OptionsPattern[]]:=Module[{len,str,ans},
len = StringLength[prompt];
If[keepprompt,len=0];
$InputTextFunction =.;
$InputTextFunction = f;
$InputTextCellEval=ToExpression[
                                             RowBox[
                                                {"$InputTextFunction[StringDrop[Setting[",#,"], 
                             "<>ToString[len]<>"]];"}
                                          ]
                                       ]&;
CellPrint[
     Cell[
         BoxData[
                        TagBox[
                            DynamicModuleBox[
                {s = " \[VeryThinSpace]"}, 
                                 InputFieldBox[Dynamic[s], String,FieldSize-> 120,Appearance->"Frameless"],
                                 DynamicModuleValues:>{}],
                                 InputField[Setting[#], String
         ]& 
         ]
      ], 
        "Input",
        CellEventActions->{
          "ReturnKeyDown":>(Paste["\n"];FrontEndExecute[FrontEndToken["MoveNext"]];),
          "LeftArrowKeyDown":> (Paste["Left"];)
    },
        CellEvaluationFunction->$InputTextCellEval,
        CellFrame->OptionValue[InputCellFrame],
        Background->RGBColor[OptionValue[InputBackground]/255.],
        FontSize->OptionValue[InputFontSize],
        FontFamily->OptionValue[InputFontFamily],
        ShowGroupOpener->OptionValue[InputShowGroupOpener],
        CellLabel->"",
        CellMargins->OptionValue[InputCellMargins],
        ShowCellLabel->False,
        CellLabelMargins->OptionValue[InputCellLabelMargins]
   ]
];
NotebookFind[EvaluationNotebook[]," ",Previous];
Paste[prompt];
]


(* ::Input::Initialization:: *)
Clear[InputText]
Options[InputText]={
InputBackground->{242,242,242},
FontSize->18,
InputFontFamily->"Utopia",
InputCellFrame->False,
InputShowGroupOpener->True, 
InputCellMargins->{{66,2},{2,1}},
InputCellLabelMargins->{{0,0},{0,0}}
};


(* ::Input::Initialization:: *)
InputText[p:OptionsPattern[]]:=InputText["",Print,True,p]
InputText[prompt_String,p:OptionsPattern[]]:=InputText[prompt,Print,True,p]
InputText[prompt_String,f_,p:OptionsPattern[]]:=InputText[prompt,f,True,p]
InputText[prompt_String,f_, keepprompt_,OptionsPattern[]]:=Module[{len,str,ans,fEval},
If[keepprompt,len:=0,len := StringLength[prompt]];
fEval := f[StringDrop[First[List[#]],len]]&;
(* SelectionMove[EvaluationNotebook[],Next,Cell]; *)
NotebookDelete[NextCell[]];
CellPrint[Cell[
" ",
"Text",
Evaluatable->True,
CellEvaluationFunction->fEval,
(* CellAutoOverwrite\[Rule]True, *)
CellFrame->OptionValue[InputCellFrame],
Background->RGBColor[OptionValue[InputBackground]/255.],
FontSize->OptionValue[FontSize],
FontFamily->OptionValue[InputFontFamily],
ShowGroupOpener->OptionValue[InputShowGroupOpener],
CellLabel->"",
CellMargins->OptionValue[InputCellMargins],
ShowCellLabel->False,
CellLabelMargins->OptionValue[InputCellLabelMargins]
]];
(* NotebookFind[EvaluationNotebook[]," ",Previous]; *)
SelectionMove[EvaluationNotebook[],Previous,Cell];
Paste[prompt];
]


(* ::Input::Initialization:: *)
ClearTeX[]:=(
Quiet[DeleteFile[FileNameJoin[{$TeXitDir,"body0.tex"}]]];
Quiet[DeleteFile[FileNameJoin[{$TeXitDir,"body.tex"}]]];
Quiet[DeleteFile[FileNameJoin[{$TeXitDir,"main.log"}]]];
Quiet[DeleteFile[FileNameJoin[{$TeXitDir,"main.aux"}]]];
Quiet[DeleteFile[FileNameJoin[{$TeXitDir,"main.out"}]]];
Quiet[DeleteFile[FileNameJoin[{$TeXitDir,"fragment.tex"}]]];
Quiet[DeleteFile[FileNameJoin[{$TeXitDir,"main-fragment.log"}]]];
Quiet[DeleteFile[FileNameJoin[{$TeXitDir,"main-fragment.aux"}]]];
Quiet[DeleteFile[FileNameJoin[{$TeXitDir,"main-fragment.out"}]]];
$LastType="text";
TeXit[];)


(* ::Input::Initialization:: *)
Options[InputTeXit]=Options[InputText];


(* ::Input::Initialization:: *)
Clear[InputTeXit]
InputTeXit[p:OptionsPattern[]]:=InputText["",(TeXit[#];)&,True,p]


(* ::Input::Initialization:: *)
InputTeXit[text_String,p:OptionsPattern[]]:=InputText[text,(TeXit[#];)&,True,p]


(* ::Input::Initialization:: *)
InputTeXitFromFile[f_String,p:OptionsPattern[]]:= InputTeXit[ReadFile[f],p]


(* ::Input::Initialization:: *)
InputTextFromFile[f_String,g_]:= InputText[ReadFile[f],g,True]


(* ::Input::Initialization:: *)
EditFile[f_String]:= InputTextFromFile[f,(WriteString[f,#];Close[f];)&]


(* ::Input::Initialization:: *)
TeXEvalText =(TeXit[First[List[#]]];)&


(* ::Input::Initialization:: *)
TeXEvalCommand=(TeXit[First[List[#]]];)&


(* ::Input::Initialization:: *)
TeXEvalTitle =(TeXit[" 
\\title{"<>First[List[#]]<>"}
\\date{"<>DateString[]<>"}
\\author{"<>$TeXitAuthor<>"}
\\maketitle

\\thispagestyle{myheadings}
\\markright{\\small\\url{"<>AbbreviatedPath[NotebookFileName[],$TeXitBaseurl]<>"}}

\\medskip
"];)&;


(* ::Input::Initialization:: *)
TeXEvalSection        =(TeXit["\n% *********************************************************************************************************************************\n"<>
                                                      "\\section{"<>First[List[#]]<>"}\n\n"];)&


(* ::Input::Initialization:: *)
TeXEvalSubsection =(TeXit["\n% ---------------------------------------------------------------------------------------------------------------------------------\n"<>
                                                            "\\subsection{"<>First[List[#]]<>"}\n\n"];)&


(* ::Input::Initialization:: *)
TeXEvalSubsubsection =(TeXit["\n% .................................................................................................................................\n"<>
                                                                   "\\subsubsection{"<>First[List[#]]<>"}\n\n"];)&


(* ::Input::Initialization:: *)
TeXEvalLabel =(TeXit["\\label{"<>First[List[#]]<>"}\n"];)&


(* ::Input::Initialization:: *)
ReTeXit[]:=EvaluateUntilHere[
ClearTeX[];
TeXit[];
$pdflatexLater=True;
$realtime=SessionTime[]
,
$pdflatexLater=False;
TeXit[];
TeXit[];
SessionTime[]-$realtime
]


(* ::Input::Initialization:: *)
StartTeXit[] := (
  StartAutoTeXit[];
  ClearTeX[];
  $LastType="text";
  TeXit[];
  If[!ProcessStatus[$PDFViewerProcess]==="Running", PDFViewer[]]; 
)


(* ::Input::Initialization:: *)
ContinueTeXit[] := (TeXit[]; If[!ProcessStatus[$PDFViewerProcess]==="Running", PDFViewer[]];)


(* ::Input::Initialization:: *)
KillTeXit[]:=(
 StopAutoTeXit[];
Clear[TeXit];
TeXit[]:="";
TeXit[x_,___]:=x;)



