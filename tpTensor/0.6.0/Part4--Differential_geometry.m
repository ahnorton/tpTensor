(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



(* ::Input::Initialization:: *)
deg[pD[X_,__]]:=deg[X]


(* ::Input::Initialization:: *)
AntisymQ[pD[X_?AntisymQ,__]]= True;


(* ::Input::Initialization:: *)
SymQ[pD[X_?SymQ,__]]= True;


(* ::Input::Initialization:: *)
pD[Subscript[\[LeftAngleBracket]y_\[RightAngleBracket], ab__],x__]:=Subscript[\[LeftAngleBracket]pD[y,x]\[RightAngleBracket], ab]


(* ::Input::Initialization:: *)
pD[a_CircleTimes,x__]:=pD[
Module[{i},Sum[MapAt[pD[#,First[{x}]]&,a,i],{i,Length[a]}]],
Apply[Sequence,Rest[{x}]]]


(* ::Input::Initialization:: *)
pD[a_AngleBracket,x__]:=pD[
Module[{i},Sum[MapAt[pD[#,First[{x}]]&,a,i],{i,Length[a]}]],
Apply[Sequence,Rest[{x}]]]


(* ::Input::Initialization:: *)
pIntegrate[y_Plus,x_]:=Map[pIntegrate[#,x]&,y]


(* ::Input::Initialization:: *)
pIntegrate[y1_ ,x_]/;pD[y1,x]===0:=x y1 


(* ::Input::Initialization:: *)
pIntegrate[y1_ y2_,x_]/;pD[y1,x]===0:=y1 pIntegrate[y2,x]


(* ::Input::Initialization:: *)
pIntegrate[pD[X_,$s0___,$s1_,$s2___],$s1_]:=pD[X,$s0,$s2]


(* ::Input::Initialization:: *)
pIntegrate[y_,x_]/;FreeQ[y,pD]:=Integrate[y,x]


(* ::Input::Initialization:: *)
pIntegrate[\[LeftAngleBracket]y1_,y2_\[RightAngleBracket],x_]/;pD[y1,x]===0:=\[LeftAngleBracket]y1,pIntegrate[y2,x]\[RightAngleBracket]


(* ::Input::Initialization:: *)
pIntegrate[\[LeftAngleBracket]y1_,y2_\[RightAngleBracket],x_]/;pD[y2,x]===0:=\[LeftAngleBracket]pIntegrate[y1,x],y2\[RightAngleBracket]


(* ::Input::Initialization:: *)
pIntegrate[\[LeftAngleBracket]y1_,y2_,y3_\[RightAngleBracket],x_]/;pD[y1,x]===0&&pD[y2,x]===0:=\[LeftAngleBracket]y1,y2,pIntegrate[y3,x]\[RightAngleBracket]


(* ::Input::Initialization:: *)
pIntegrate[\[LeftAngleBracket]y1_,y2_,y3_\[RightAngleBracket],x_]/;pD[y1,x]===0&&pD[y3,x]===0:=\[LeftAngleBracket]y1,pIntegrate[y2,x],y3\[RightAngleBracket]


(* ::Input::Initialization:: *)
pIntegrate[\[LeftAngleBracket]y1_,y2_,y3_\[RightAngleBracket],x_]/;pD[y2,x]===0&&pD[y3,x]===0:=\[LeftAngleBracket]pIntegrate[y1,x],y2,y3\[RightAngleBracket]


(* ::Input::Initialization:: *)
deg[orD[z_,n_]]:=deg[z]


(* ::Input::Initialization:: *)
ProperDistanceArgQ[_]:=False;


(* ::Input::Initialization:: *)
NewWorldline[args___]/;!MemberQ[{3,4,5,6},Length[{args}]]:=(
Print["Expected arguments are, for example,"];
Print["  5 args:  NewWorldline[ z[s], \[ScriptA], \[Gamma], \"C\", \"xi\" ]"];
Print["  6 args:  NewWorldline[ z, s, \[ScriptA], \[Gamma], \"C\", \"xi\" ]"];
Print["To set proper distange gauge (a = 1, \[Gamma] = 0) ommit argument symbols a and \[Gamma]." ];
Print["For further information see: ?NewWorldline"]) 


(* ::Input::Initialization:: *)
SymbolLikeQ[x_]:=MemberQ[{Symbol,OverHat,OverBar, OverTilde, OverDot, OverVector},Head[x]]


(* ::Input::Initialization:: *)
NewWorldline[z_?SymbolLikeQ[s_?SymbolLikeQ],Ms_String,Mxi_String]:=Module[{\[Theta]},
$Worldline[]={z,s,1,0,Ms,Mxi};
$Worldline[Ms]=$Worldline[];
ClearField[s];
NewCoordinates[{s},Ms];
(* If the parameter is extended off the worldline then  \[Del]s \[NotEqual] d[s],  eg, Newman-Unti coords. *)
(* This was set in NewCoordinates[] , *)
\[Del]s =.;
(* Ver4 ... *)
ClearField[z[_]];
NewField[1,z[_]];
deg[z[xi_/;MemberQ[Coords[Mxi],xi]][_]]=0;
\[GothicCapitalD][s]=1;
\[Theta]=Sum[orD[z[xi][s],s]pd[xi],{xi,Coords[Mxi]}]\[CircleTimes]d[s];
\[Theta]pd[s]=\[LeftAngleBracket]\[Theta],pd[s]\[RightAngleBracket];

(* p35 GreenBook. Here z is interpreted as a position vector in some high dim flat space in which spacetime is immersed *)
\[Del]z=\[Theta];
 
(* Default single time defns. Changed these for multi-time perturbation... *)
\[Del]z[xi_][s]:=orD[z[xi][s],s]d[s];
\[Del]orD[z[xi_][s],s]:= orD[z[xi][s],{s,2}]d[s];
\[Del]orD[z[xi_][s],{s,n_}]:= orD[z[xi][s],{s,n+1}]d[s];

Expand\[GothicCapitalD][s]={
\[GothicCapitalD][X_/;deg[X]>0]:>\[LeftAngleBracket]\[Del]X,pd[s]\[RightAngleBracket],
\[GothicCapitalD][X_/;deg0Q[X]]:>\[LeftAngleBracket]\[Del]X,pd[s]\[RightAngleBracket]
};
Expand\[GothicCapitalD][Ms]=Expand\[GothicCapitalD][s];

Solder[s] ={pd[s]:>\[Theta]pd[s]};
Solder[Ms] =Solder[s];

(* The differential consequences of \[LeftAngleBracket]\[GothicCapitalD][z[s0_]],\[GothicCapitalD][z[s0_]]\[RightAngleBracket] = -1 , *)
\[GothicCapitalD]/:\[LeftAngleBracket]\[GothicCapitalD][z[s0_]],\[GothicCapitalD][z[s0_]]\[RightAngleBracket]=-1;
\[GothicCapitalD]/:\[LeftAngleBracket]\[GothicCapitalD][z[s0_]],\[GothicCapitalD][z[s0_],2]\[RightAngleBracket]= 0;
\[GothicCapitalD]/:\[LeftAngleBracket]\[GothicCapitalD][z[s0_]],\[GothicCapitalD][z[s0_],j_/;j>2]\[RightAngleBracket]:=\[GothicCapitalD]/:\[LeftAngleBracket]\[GothicCapitalD][z[s0]],\[GothicCapitalD][z[s0],j]\[RightAngleBracket]=\[GothicCapitalD][\[LeftAngleBracket]\[GothicCapitalD][z[s0]],\[GothicCapitalD][z[s0],j-1]\[RightAngleBracket]]-\[LeftAngleBracket]\[GothicCapitalD][z[s0],2],\[GothicCapitalD][z[s0],j-1]\[RightAngleBracket]//Expand;

ProperDistanceArgQ[z]=True;
Format\[GothicCapitalD][True]
]


(* ::Input::Initialization:: *)
NewWorldline[z_?SymbolLikeQ[s_?SymbolLikeQ],a_?SymbolLikeQ,\[Gamma]_?SymbolLikeQ,Ms_String,Mxi_String]:=Module[{\[Theta]},
$Worldline[]={z,s,a,\[Gamma],Ms,Mxi};
$Worldline[Ms]=$Worldline[];
ClearField[s];
NewCoordinates[{s},Ms];
(* If the parameter is extended off the worldline then  \[Del]s \[NotEqual] d[s],  eg, Newman-Unti coords. *)
(* This was set in NewCoordinates[] , *)
\[Del]s =.;
ClearField[{a,\[Gamma]}];
NewField[0,{a,\[Gamma]}];
ClearField[z];
NewField[1,z];
deg[z[xi_/;MemberQ[Coords[Mxi],xi]][_]]=0;
\[Del]a:= a \[Gamma] d[s];
\[GothicCapitalD][a]=\[Gamma];
\[GothicCapitalD][s]=1/a;
\[Theta]=Sum[orD[z[xi][s],s]pd[xi],{xi,Coords[Mxi]}]\[CircleTimes]d[s];
\[Theta]pd[s]=\[LeftAngleBracket]\[Theta],pd[s]\[RightAngleBracket];

(* p35 GreenBook. Here z is interpreted as a position vector in some high dim flat space in which spacetime is immersed *)
\[Del]z=\[Theta];
 
(* Default single time defns. Changed these for multi-time perturbation... *)
\[Del]z[xi_][s]:=orD[z[xi][s],s]d[s];
\[Del]orD[z[xi_][s],s]:= orD[z[xi][s],{s,2}]d[s];
\[Del]orD[z[xi_][s],{s,n_}]:= orD[z[xi][s],{s,n+1}]d[s];

Expand\[GothicCapitalD][s]={
\[GothicCapitalD][X_/;deg[X]>0]:>a^-1 \[LeftAngleBracket]\[Del]X,pd[s]\[RightAngleBracket],
\[GothicCapitalD][X_/;deg0Q[X]]:>a^-1 \[LeftAngleBracket]\[Del]X,pd[s]\[RightAngleBracket]
};
Expand\[GothicCapitalD][Ms]=Expand\[GothicCapitalD][s];

Solder[s] ={pd[s]:>\[Theta]pd[s]};
Solder[Ms] =Solder[s];

(* The differential consequences of \[LeftAngleBracket]\[GothicCapitalD][z[s0_]],\[GothicCapitalD][z[s0_]]\[RightAngleBracket] = -1 , *)
\[GothicCapitalD]/:\[LeftAngleBracket]\[GothicCapitalD][z[s0_]],\[GothicCapitalD][z[s0_]]\[RightAngleBracket]=-1;
\[GothicCapitalD]/:\[LeftAngleBracket]\[GothicCapitalD][z[s0_]],\[GothicCapitalD][z[s0_],2]\[RightAngleBracket]= 0;
\[GothicCapitalD]/:\[LeftAngleBracket]\[GothicCapitalD][z[s0_]],\[GothicCapitalD][z[s0_],j_/;j>2]\[RightAngleBracket]:=\[GothicCapitalD]/:\[LeftAngleBracket]\[GothicCapitalD][z[s0]],\[GothicCapitalD][z[s0],j]\[RightAngleBracket]=\[GothicCapitalD][\[LeftAngleBracket]\[GothicCapitalD][z[s0]],\[GothicCapitalD][z[s0],j-1]\[RightAngleBracket]]-\[LeftAngleBracket]\[GothicCapitalD][z[s0],2],\[GothicCapitalD][z[s0],j-1]\[RightAngleBracket]//Expand;

ProperDistanceArgQ[z]=False;
Format\[GothicCapitalD][True]
]


(* ::Input::Initialization:: *)
NewWorldline[z_?SymbolLikeQ,s_?SymbolLikeQ,Ms_String,Mxi_String]:=Module[{\[Theta]},
$Worldline[]={z,s,1,0,Ms,Mxi};
$Worldline[Ms]=$Worldline[];
ClearField[s];
NewCoordinates[{s},Ms];
(* If the parameter is extended off the worldline then  \[Del]s \[NotEqual] d[s],  eg, Newman-Unti coords. *)
(* This was set in NewCoordinates[] , *)
\[Del]s =.;
ClearField[z];
NewField[1,z];
deg[z[xi_/;MemberQ[Coords[Mxi],xi]]]=0;
\[GothicCapitalD][s]=1;
\[Theta]=Sum[orD[z[xi],s]pd[xi],{xi,Coords[Mxi]}]\[CircleTimes]d[s];
\[Theta]pd[s]=\[LeftAngleBracket]\[Theta],pd[s]\[RightAngleBracket];

(* p35 GreenBook. Here z is interpreted as a position vector in some high dim flat space in which spacetime is immersed *)
\[Del]z=\[Theta];
 
(* Default single time defns. Changed these for multi-time perturbation... *)
\[Del]z[xi_]:=orD[z[xi],s]d[s];
\[Del]orD[z[xi_],s]:= orD[z[xi],{s,2}]d[s];
\[Del]orD[z[xi_],{s,n_}]:= orD[z[xi],{s,n+1}]d[s];

Expand\[GothicCapitalD][s]={
\[GothicCapitalD][X_/;deg[X]>0]:>\[LeftAngleBracket]\[Del]X,pd[s]\[RightAngleBracket],
\[GothicCapitalD][X_/;deg0Q[X]]:>\[LeftAngleBracket]\[Del]X,pd[s]\[RightAngleBracket]
};
Expand\[GothicCapitalD][Ms]=Expand\[GothicCapitalD][s];

Solder[s] ={pd[s]:>\[Theta]pd[s]};
Solder[Ms] =Solder[s];

(* The differential consequences of \[LeftAngleBracket]\[GothicCapitalD][z],\[GothicCapitalD][z]\[RightAngleBracket] = -1 , *)
\[GothicCapitalD]/:\[LeftAngleBracket]\[GothicCapitalD][z],\[GothicCapitalD][z]\[RightAngleBracket]=-1;
\[GothicCapitalD]/:\[LeftAngleBracket]\[GothicCapitalD][z],\[GothicCapitalD][z,2]\[RightAngleBracket]= 0;
\[GothicCapitalD]/:\[LeftAngleBracket]\[GothicCapitalD][z],\[GothicCapitalD][z,j_/;j>2]\[RightAngleBracket]:=\[GothicCapitalD]/:\[LeftAngleBracket]\[GothicCapitalD][z],\[GothicCapitalD][z,j]\[RightAngleBracket]=\[GothicCapitalD][\[LeftAngleBracket]\[GothicCapitalD][z],\[GothicCapitalD][z,j-1]\[RightAngleBracket]]-\[LeftAngleBracket]\[GothicCapitalD][z,2],\[GothicCapitalD][z,j-1]\[RightAngleBracket]//Expand;

ProperDistanceArgQ[z]=True;
Format\[GothicCapitalD][True]
]


(* ::Input::Initialization:: *)
NewWorldline[z_?SymbolLikeQ,s_?SymbolLikeQ,a_?SymbolLikeQ,\[Gamma]_?SymbolLikeQ,Ms_String,Mxi_String]:=Module[{\[Theta]},
$Worldline[]={z,s,a,\[Gamma],Ms,Mxi};
$Worldline[Ms]=$Worldline[];
ClearField[s];
NewCoordinates[{s},Ms];
(* If the parameter is extended off the worldline then  \[Del]s \[NotEqual] d[s],  eg, Newman-Unti coords. *)
(* This was set in NewCoordinates[] , *)
\[Del]s =.;
ClearField[{a,\[Gamma]}];
NewField[0,{a,\[Gamma]}];
ClearField[z];
NewField[1,z];
deg[z[xi_/;MemberQ[Coords[Mxi],xi]]]=0;
\[Del]a = a \[Gamma][s] d[s];
\[GothicCapitalD][a]=\[Gamma][s];
\[GothicCapitalD][s]=1/a;
\[Theta]=Sum[orD[z[xi],s]pd[xi],{xi,Coords[Mxi]}]\[CircleTimes]d[s];
\[Theta]pd[s]=\[LeftAngleBracket]\[Theta],pd[s]\[RightAngleBracket];

(* p35 GreenBook. Here z is interpreted as a position vector in some high dim flat space in which spacetime is immersed *)
\[Del]z=\[Theta];
 
(* Default single time defns. Changed these for multi-time perturbation... *)
\[Del]z[xi_]:=orD[z[xi],s]d[s];
\[Del]orD[z[xi_],s]:= orD[z[xi],{s,2}]d[s];
\[Del]orD[z[xi_],{s,n_}]:= orD[z[xi],{s,n+1}]d[s];

Expand\[GothicCapitalD][s]={
\[GothicCapitalD][X_/;deg[X]>0]:>a^-1 \[LeftAngleBracket]\[Del]X,pd[s]\[RightAngleBracket],
\[GothicCapitalD][X_/;deg0Q[X]]:>a^-1 \[LeftAngleBracket]\[Del]X,pd[s]\[RightAngleBracket]
};
Expand\[GothicCapitalD][Ms]=Expand\[GothicCapitalD][s];

Solder[s] ={pd[s]:>\[Theta]pd[s]};
Solder[Ms] =Solder[s];

(* The differential consequences of \[LeftAngleBracket]\[GothicCapitalD][z],\[GothicCapitalD][z]\[RightAngleBracket] = -1 , *)
\[GothicCapitalD]/:\[LeftAngleBracket]\[GothicCapitalD][z],\[GothicCapitalD][z]\[RightAngleBracket]=-1;
\[GothicCapitalD]/:\[LeftAngleBracket]\[GothicCapitalD][z],\[GothicCapitalD][z,2]\[RightAngleBracket]= 0;
\[GothicCapitalD]/:\[LeftAngleBracket]\[GothicCapitalD][z],\[GothicCapitalD][z,j_/;j>2]\[RightAngleBracket]:=\[GothicCapitalD]/:\[LeftAngleBracket]\[GothicCapitalD][z],\[GothicCapitalD][z,j]\[RightAngleBracket]=\[GothicCapitalD][\[LeftAngleBracket]\[GothicCapitalD][z],\[GothicCapitalD][z,j-1]\[RightAngleBracket]]-\[LeftAngleBracket]\[GothicCapitalD][z,2],\[GothicCapitalD][z,j-1]\[RightAngleBracket]//Expand;

ProperDistanceArgQ[z]=False;
Format\[GothicCapitalD][True]
]


(* ::Input::Initialization:: *)
deg[\[GothicCapitalD][X_]]:=deg[X]


(* ::Input::Initialization:: *)
deg[\[GothicCapitalD][X_,j_]]:=deg[X]


(* ::Input::Initialization:: *)
\[GothicCapitalD][c_?NumericQ]:=0


(* ::Input::Initialization:: *)
\[GothicCapitalD][y_List]:= Map[\[GothicCapitalD][#]&,y]


(* ::Input::Initialization:: *)
\[GothicCapitalD][y_Plus]:=Map[\[GothicCapitalD][#]&,y]


(* ::Input::Initialization:: *)
\[GothicCapitalD][y_Times]:=Module[{i},Sum[ MapAt[\[GothicCapitalD][#]&,y,i],{i,Length[y]}]]


(* ::Input::Initialization:: *)
\[GothicCapitalD][y_^n_?NumericQ]:=n y^(n-1) \[GothicCapitalD][y]


(* ::Input::Initialization:: *)
\[GothicCapitalD][y_^n_]:=n y^(n-1) \[GothicCapitalD][y]+y^n Log[y]\[GothicCapitalD][n]


(* ::Input::Initialization:: *)
\[GothicCapitalD][y_SeriesData]:=MapAt[\[GothicCapitalD],y,3]


(* ::Input::Initialization:: *)
\[GothicCapitalD][Subscript[\[LeftAngleBracket]y_\[RightAngleBracket], ab__]]:=Subscript[\[LeftAngleBracket] \[GothicCapitalD][y] \[RightAngleBracket], ab]


(* ::Input::Initialization:: *)
\[GothicCapitalD][a_CircleTimes]:= Module[{i},Sum[ MapAt[\[GothicCapitalD][#]&,a,i],{i,Length[a]}]]


(* ::Input::Initialization:: *)
\[GothicCapitalD][a_AngleBracket]:=Module[{i}, Sum[ MapAt[\[GothicCapitalD][#]&,a,i],{i,Length[a]}]]


(* ::Input::Initialization:: *)
\[GothicCapitalD][Exp[x_]]:=Exp'[x]\[GothicCapitalD][x];
\[GothicCapitalD][Log[x_]]:=Log'[x]\[GothicCapitalD][x];
\[GothicCapitalD][Sin[x_]]:=Sin'[x]\[GothicCapitalD][x];
\[GothicCapitalD][Cos[x_]]:=Cos'[x]\[GothicCapitalD][x];
\[GothicCapitalD][Sec[x_]]:=Sec'[x]\[GothicCapitalD][x];
\[GothicCapitalD][Csc[x_]]:=Csc'[x]\[GothicCapitalD][x];
\[GothicCapitalD][Tan[x_]]:=Tan'[x]\[GothicCapitalD][x];
\[GothicCapitalD][Cot[x_]]:=Cot'[x]\[GothicCapitalD][x];
\[GothicCapitalD][Sinh[x_]]:=Sinh'[x]\[GothicCapitalD][x];
\[GothicCapitalD][Cosh[x_]]:=Cosh'[x]\[GothicCapitalD][x];
\[GothicCapitalD][Sech[x_]]:=Sech'[x]\[GothicCapitalD][x];
\[GothicCapitalD][Csch[x_]]:=Csch'[x]\[GothicCapitalD][x];
\[GothicCapitalD][Tanh[x_]]:=Tanh'[x]\[GothicCapitalD][x];
\[GothicCapitalD][Coth[x_]]:=Coth'[x]\[GothicCapitalD][x];


(* ::Input::Initialization:: *)
\[GothicCapitalD][ArcSin[x_]]:=ArcSin'[x]\[GothicCapitalD][x];
\[GothicCapitalD][ArcCos[x_]]:=ArcCos'[x]\[GothicCapitalD][x];
\[GothicCapitalD][ArcSec[x_]]:=ArcSec'[x]\[GothicCapitalD][x];
\[GothicCapitalD][ArcCsc[x_]]:=ArcCsc'[x]\[GothicCapitalD][x];
\[GothicCapitalD][ArcTan[x_]]:=ArcTan'[x]\[GothicCapitalD][x];
\[GothicCapitalD][ArcCot[x_]]:=ArcCot'[x]\[GothicCapitalD][x];
\[GothicCapitalD][ArcSinh[x_]]:=ArcSinh'[x]\[GothicCapitalD][x];
\[GothicCapitalD][ArcCosh[x_]]:=ArcCosh'[x]\[GothicCapitalD][x];
\[GothicCapitalD][ArcSech[x_]]:=ArcSech'[x]\[GothicCapitalD][x];
\[GothicCapitalD][ArcCsch[x_]]:=ArcCsch'[x]\[GothicCapitalD][x];
\[GothicCapitalD][ArcTanh[x_]]:=ArcTanh'[x]\[GothicCapitalD][x];
\[GothicCapitalD][ArcCoth[x_]]:=ArcCoth'[x]\[GothicCapitalD][x];


(* ::Input::Initialization:: *)
\[GothicCapitalD][X_,n_/;n>1]/;ValueQ[\[GothicCapitalD][X]]:=\[GothicCapitalD][\[GothicCapitalD][X],n-1]


(* ::Input::Initialization:: *)
\[GothicCapitalD][X_,0]:=X


(* ::Input::Initialization:: *)
\[GothicCapitalD][X_,1]:=\[GothicCapitalD][X]


(* ::Input::Initialization:: *)
\[GothicCapitalD][\[GothicCapitalD][X_]]:=\[GothicCapitalD][X,2]


(* ::Input::Initialization:: *)
\[GothicCapitalD][\[GothicCapitalD][X_,j_]]:=\[GothicCapitalD][X,j+1]


(* ::Input::Initialization:: *)
\[GothicCapitalD][\[GothicCapitalD][X_],j_]:=\[GothicCapitalD][X,j+1]


(* ::Input::Initialization:: *)
\[GothicCapitalD][\[GothicCapitalD][X_,j1_],j2_]:=\[GothicCapitalD][X,j1+j2]


(* ::Input::Initialization:: *)
Format\[GothicCapitalD][tf_]:=Module[{},
If[tf,
\[GothicCapitalD]/:MakeBoxes[\[GothicCapitalD][v_[s1_,s2_,s3_],n_],StandardForm]/;ProperDistanceArgQ[v]&&n>3:=
TemplateBox[{ToBoxes[v],ToBoxes[s1],ToBoxes[s2],ToBoxes[s3],ToBoxes[n]},"\[GothicCapitalD][#1[#2,#3,#4],#5]&",DisplayFunction:>(RowBox[{SuperscriptBox[#1,RowBox[{"(",#5,")"}]],AdjustmentBox[RowBox[{"[",#2,",",#3,",",#4,"]"}],BoxMargins->{{-0.4,0},{0,0}}]}]&),SyntaxForm->Automatic];
\[GothicCapitalD]/:MakeBoxes[\[GothicCapitalD][v_[s1_,s2_,s3_],n_],StandardForm]/;ProperDistanceArgQ[v]&&n===3:=
TemplateBox[{ToBoxes[v],ToBoxes[s1],ToBoxes[s2],ToBoxes[s3],ToBoxes[n]},"\[GothicCapitalD][#1[#2,#3,#4],#5]&",
DisplayFunction:>(RowBox[{SuperscriptBox[#1,"\[Prime]\[Prime]\[Prime]"],AdjustmentBox[RowBox[{"[",#2,",",#3,",",#4,"]"}],BoxMargins->{{-0.3,0},{0,0}}]}]&),SyntaxForm->Automatic];
\[GothicCapitalD]/:MakeBoxes[\[GothicCapitalD][v_[s1_,s2_,s3_],n_],StandardForm]/;ProperDistanceArgQ[v]&&n===2:=
TemplateBox[{ToBoxes[v],ToBoxes[s1],ToBoxes[s2],ToBoxes[s3],ToBoxes[n]},"\[GothicCapitalD][#1[#2,#3,#4],#5]&",
DisplayFunction:>(RowBox[{SuperscriptBox[#1,"\[Prime]\[Prime]"],AdjustmentBox[RowBox[{"[",#2,",",#3,",",#4,"]"}],BoxMargins->{{-0.3,0},{0,0}}]}]&),SyntaxForm->Automatic];
\[GothicCapitalD]/:MakeBoxes[\[GothicCapitalD][v_[s1_,s2_,s3_]],StandardForm]/;ProperDistanceArgQ[v]:=
TemplateBox[{ToBoxes[v],ToBoxes[s1],ToBoxes[s2],ToBoxes[s3]},"\[GothicCapitalD][#1[#2,#3,#4]]&",
DisplayFunction:>(RowBox[{SuperscriptBox[#1,"\[Prime]"],AdjustmentBox[RowBox[{"[",#2,",",#3,",",#4,"]"}],BoxMargins->{{-0.3,0},{0,0}}]}]&),SyntaxForm->Automatic];
,
Quiet[\[GothicCapitalD]/:MakeBoxes[\[GothicCapitalD][v_[s1_,s2_,s3_],n_],StandardForm]/;ProperDistanceArgQ[v]&&n>3=.];
Quiet[\[GothicCapitalD]/:MakeBoxes[\[GothicCapitalD][v_[s1_,s2_,s3_],n_],StandardForm]/;ProperDistanceArgQ[v]&&n===3=.];
Quiet[\[GothicCapitalD]/:MakeBoxes[\[GothicCapitalD][v_[s1_,s2_,s3_],n_],StandardForm]/;ProperDistanceArgQ[v]&&n===2=.];
Quiet[\[GothicCapitalD]/:MakeBoxes[\[GothicCapitalD][v_[s1_,s2_,s3_]],StandardForm]/;ProperDistanceArgQ[v]=.];
];
If[tf,
\[GothicCapitalD]/:MakeBoxes[\[GothicCapitalD][v_[s1_,s2_],n_],StandardForm]/;ProperDistanceArgQ[v]&&n>3:=
TemplateBox[{ToBoxes[v],ToBoxes[s1],ToBoxes[s2],ToBoxes[n]},"\[GothicCapitalD][#1[#2,#3],#4]&",DisplayFunction:>(RowBox[{SuperscriptBox[#1,RowBox[{"(",#4,")"}]],AdjustmentBox[RowBox[{"[",#2,",",#3,"]"}],BoxMargins->{{-0.4,0},{0,0}}]}]&),SyntaxForm->Automatic];
\[GothicCapitalD]/:MakeBoxes[\[GothicCapitalD][v_[s1_,s2_],n_],StandardForm]/;ProperDistanceArgQ[v]&&n===3:=
TemplateBox[{ToBoxes[v],ToBoxes[s1],ToBoxes[s2],ToBoxes[n]},"\[GothicCapitalD][#1[#2,#3],#4]&",
DisplayFunction:>(RowBox[{SuperscriptBox[#1,"\[Prime]\[Prime]\[Prime]"],AdjustmentBox[RowBox[{"[",#2,",",#3,"]"}],BoxMargins->{{-0.3,0},{0,0}}]}]&),SyntaxForm->Automatic];
\[GothicCapitalD]/:MakeBoxes[\[GothicCapitalD][v_[s1_,s2_],n_],StandardForm]/;ProperDistanceArgQ[v]&&n===2:=
TemplateBox[{ToBoxes[v],ToBoxes[s1],ToBoxes[s2],ToBoxes[n]},"\[GothicCapitalD][#1[#2,#3],#4]&",
DisplayFunction:>(RowBox[{SuperscriptBox[#1,"\[Prime]\[Prime]"],AdjustmentBox[RowBox[{"[",#2,",",#3,"]"}],BoxMargins->{{-0.3,0},{0,0}}]}]&),SyntaxForm->Automatic];
\[GothicCapitalD]/:MakeBoxes[\[GothicCapitalD][v_[s1_,s2_]],StandardForm]/;ProperDistanceArgQ[v]:=
TemplateBox[{ToBoxes[v],ToBoxes[s1],ToBoxes[s2]},"\[GothicCapitalD][#1[#2,#3]]&",
DisplayFunction:>(RowBox[{SuperscriptBox[#1,"\[Prime]"],AdjustmentBox[RowBox[{"[",#2,",",#3,"]"}],BoxMargins->{{-0.3,0},{0,0}}]}]&),SyntaxForm->Automatic];
,
Quiet[\[GothicCapitalD]/:MakeBoxes[\[GothicCapitalD][v_[s1_,s2_],n_],StandardForm]/;ProperDistanceArgQ[v]&&n>3=.];
Quiet[\[GothicCapitalD]/:MakeBoxes[\[GothicCapitalD][v_[s1_,s2_],n_],StandardForm]/;ProperDistanceArgQ[v]&&n===3=.];
Quiet[\[GothicCapitalD]/:MakeBoxes[\[GothicCapitalD][v_[s1_,s2_],n_],StandardForm]/;ProperDistanceArgQ[v]&&n===2=.];
Quiet[\[GothicCapitalD]/:MakeBoxes[\[GothicCapitalD][v_[s1_,s2_]],StandardForm]/;ProperDistanceArgQ[v]=.];
];
If[tf,
\[GothicCapitalD]/:MakeBoxes[\[GothicCapitalD][v_[s_],n_],StandardForm]/;ProperDistanceArgQ[v]&&n>3:=
TemplateBox[{ToBoxes[v],ToBoxes[s],ToBoxes[n]},"\[GothicCapitalD][#1[#2],#3]&",DisplayFunction:>(RowBox[{SuperscriptBox[#1,RowBox[{"(",#3,")"}]],AdjustmentBox[RowBox[{"[",#2,"]"}],BoxMargins->{{-0.4,0},{0,0}}]}]&),SyntaxForm->Automatic];
\[GothicCapitalD]/:MakeBoxes[\[GothicCapitalD][v_[s_],n_],StandardForm]/;ProperDistanceArgQ[v]&&n===3:=
TemplateBox[{ToBoxes[v],ToBoxes[s],ToBoxes[n]},"\[GothicCapitalD][#1[#2],#3]&",
DisplayFunction:>(RowBox[{SuperscriptBox[#1,"\[Prime]\[Prime]\[Prime]"],AdjustmentBox[RowBox[{"[",#2,"]"}],BoxMargins->{{-0.3,0},{0,0}}]}]&),SyntaxForm->Automatic];
\[GothicCapitalD]/:MakeBoxes[\[GothicCapitalD][v_[s_],n_],StandardForm]/;ProperDistanceArgQ[v]&&n===2:=
TemplateBox[{ToBoxes[v],ToBoxes[s],ToBoxes[n]},"\[GothicCapitalD][#1[#2],#3]&",
DisplayFunction:>(RowBox[{SuperscriptBox[#1,"\[Prime]\[Prime]"],AdjustmentBox[RowBox[{"[",#2,"]"}],BoxMargins->{{-0.3,0},{0,0}}]}]&),SyntaxForm->Automatic];
\[GothicCapitalD]/:MakeBoxes[\[GothicCapitalD][v_[s_]],StandardForm]/;ProperDistanceArgQ[v]:=TemplateBox[{ToBoxes[v],ToBoxes[s]},"\[GothicCapitalD][#1[#2]]&",
DisplayFunction:>(RowBox[{SuperscriptBox[#1,"\[Prime]"],AdjustmentBox[RowBox[{"[",#2,"]"}],BoxMargins->{{-0.3,0},{0,0}}]}]&),SyntaxForm->Automatic];
,
Quiet[\[GothicCapitalD]/:MakeBoxes[\[GothicCapitalD][v_[s_],n_],StandardForm]/;ProperDistanceArgQ[v]&&n>3=.];
Quiet[\[GothicCapitalD]/:MakeBoxes[\[GothicCapitalD][v_[s_],n_],StandardForm]/;ProperDistanceArgQ[v]&&n===3=.];
Quiet[\[GothicCapitalD]/:MakeBoxes[\[GothicCapitalD][v_[s_],n_],StandardForm]/;ProperDistanceArgQ[v]&&n===2=.];
Quiet[\[GothicCapitalD]/:MakeBoxes[\[GothicCapitalD][v_[s_]],StandardForm]/;ProperDistanceArgQ[v]=.];
];
If[tf,
\[GothicCapitalD]/:MakeBoxes[\[GothicCapitalD][z_,n_],StandardForm]/;ProperDistanceArgQ[z]:= TemplateBox[{ToBoxes[z],ToBoxes[n]},"\[GothicCapitalD][#1,#2]&",
DisplayFunction:>(SuperscriptBox[#1,RowBox[{"(",#2,")"}]]&),SyntaxForm->Automatic];
\[GothicCapitalD]/:MakeBoxes[\[GothicCapitalD][z_],StandardForm]/;ProperDistanceArgQ[z]:= TemplateBox[{ToBoxes[z]},"\[GothicCapitalD][#1]&",
DisplayFunction:>(SuperscriptBox[#1,"(1)"]&),SyntaxForm->Automatic];
\[GothicCapitalD]/:MakeBoxes[\[GothicCapitalD][v_,n_],StandardForm]:= TemplateBox[{ToBoxes[v],ToBoxes[n]},"\[GothicCapitalD][#1,#2]&",
DisplayFunction:>(RowBox[{SuperscriptBox["\[GothicCapitalD]",RowBox[{"(",#2,")"}]],
AdjustmentBox[RowBox[{"[",#1,"]"}],BoxMargins->{{-0.4,0},{0,0}}]}]&),SyntaxForm->Automatic]
,
Quiet[\[GothicCapitalD]/:MakeBoxes[\[GothicCapitalD][z_,n_],StandardForm]/;ProperDistanceArgQ[z]=.];
Quiet[\[GothicCapitalD]/:MakeBoxes[\[GothicCapitalD][z_],StandardForm]/;ProperDistanceArgQ[z]=.];
Quiet[\[GothicCapitalD]/:MakeBoxes[\[GothicCapitalD][v_,n_],StandardForm]=.];
];
]


(* ::Input::Initialization:: *)
Protect[$a,$b,$c,$d,$e,$f,$g,$h,$i,$j,$k,$l,$m,$n,$o,$p,$q,$r,$s,$t,$u,$v,$w,$x,$y,$z];


(* ::Input::Initialization:: *)
\[GothicCapitalD][Integrate[f_[y1___,x_,y2___],{x_,a_,b_}]]:= f[y1,b,y2]\[GothicCapitalD][b]-f[y1,a,y2]\[GothicCapitalD][a]+Integrate[\[GothicCapitalD][f[y1,x,y2]],{x,a,b}]


(* ::Input::Initialization:: *)
ClearField[{CoordCovector,CoordVector}]
NewField[{0,1},CoordCovector];
NewField[{1,0},CoordVector];


(* ::Input::Initialization:: *)
CoordCovector[x_List]:=Map[CoordCovector,x]
CoordVector[x_List]:=Map[CoordVector,x]


(* ::Input::Initialization:: *)
CoordCovectorStyle["d"]:=CoordCovector/:MakeBoxes[CoordCovector[x_],StandardForm]:=TemplateBox[{ToBoxes[x]},"CoordCovector",DisplayFunction:>(RowBox[{AdjustmentBox["\[VeryThinSpace]\[VeryThinSpace]d\[VeryThinSpace]\[VeryThinSpace]",BoxMargins->-0.1],#}]&),SyntaxForm->Automatic]


(* ::Input::Initialization:: *)
CoordCovectorStyle["none"]:=CoordCovectorStyle/:MakeBoxes[CoordCovector[x_],StandardForm]=.


(* ::Input::Initialization:: *)
CoordVectorStyle["short"]:=CoordVector/:MakeBoxes[CoordVector[x_],StandardForm]:=
TemplateBox[{ToBoxes[x]},"CoordVector",DisplayFunction:>(SubscriptBox[AdjustmentBox["\[PartialD]\[VeryThinSpace]",BoxMargins->0.1],#]&),SyntaxForm->Automatic]


(* ::Input::Initialization:: *)
CoordVectorStyle["long"] :=CoordVector/:MakeBoxes[CoordVector[x_],StandardForm]:=TemplateBox[{ToBoxes[x]},"CoordVector",DisplayFunction:>(FractionBox["\[PartialD]",RowBox[{AdjustmentBox["\[PartialD]\[VeryThinSpace]",BoxMargins->-0.1],#1}]]&),SyntaxForm->Automatic]


(* ::Input::Initialization:: *)
CoordVectorStyle["none"]:=CoordVector/:MakeBoxes[CoordVector[x_],StandardForm]=.


(* ::Input::Initialization:: *)
CoordCovectorStyle["d"]
CoordVectorStyle["short"]


(* ::Input::Initialization:: *)
d = CoordCovector;
pd=CoordVector;


(* ::Input::Initialization:: *)
NewDualFrame[coframe_List,frame_List, M_String]:=(
ClearDualFrame[M];
ClearDualFrame[FrameName[coframe]];
If[!CoordinateCovectorsQ[coframe],NewField[1,coframe]];
If[!CoordinateVectorsQ[frame],NewField[1,frame]];
FrameName[coframe]=M;
FrameName[frame]=M;
FrameName[{coframe,frame}]=M;
FrameVectors[M]=frame;
FrameCovectors[M]=coframe;
$DefaultFrame=M;
AppendTo[$FrameNames,M];
Quiet[Evaluate[\[LeftAngleBracket]coframe,frame\[RightAngleBracket]]=IdentityMatrix[Length[frame]]];)


(* ::Input::Initialization:: *)
ClearDualFrame[M_String]:=Module[{coframe,frame},
coframe=FrameCovectors[M];
frame=FrameVectors[M];
Quiet[Outer[Unset[\[LeftAngleBracket]#1,#2\[RightAngleBracket]]&,coframe,frame]];
Quiet[Outer[Unset[\[LeftAngleBracket]#1,#2\[RightAngleBracket]]&,frame,coframe]];
If[!CoordinateCovectorsQ[coframe],ClearField[Evaluate[coframe]]];
If[!CoordinateVectorsQ[frame],ClearField[Evaluate[frame]]];
Quiet[FrameName[coframe]=.];
Quiet[FrameName[frame]=.];
Quiet[FrameName[{coframe,frame}]=.];
Quiet[FrameVectors[M]=.];
Quiet[FrameCovectors[M]=.];
$FrameNames=DeleteCases[$FrameNames,M];
If[$DefaultFrame===M&&!$DefaultFrame===$NoDefaultFrame,
message="\""<>M<>"\" was the default dual frame. You may wish to define a new default using  SetDefaultFrame[\"name\"]."<>
"\n"<>"The names of the dual frames in current use are maintained in the list: $FrameNames = "<>ToString[FrameNames];
$DefaultFrame=$NoDefaultFrame;
,
message=Null;
];
message
]


(* ::Input::Initialization:: *)
CoordinateCovectorsQ[coframe_]:= Apply[And,Map[Head[#]===d&,coframe]]


(* ::Input::Initialization:: *)
CoordinateVectorsQ[frame_]:= Apply[And,Map[Head[#]===pd&,frame]]


(* ::Input::Initialization:: *)
NewDualFrame[{coframe_List,frame_List},M_String]:=NewDualFrame[coframe,frame,M]


(* ::Input::Initialization:: *)
FrameName[]:=$DefaultFrame;
FrameVectors[]:=FrameVectors[$DefaultFrame];
FrameCovectors[]:=FrameCovectors[$DefaultFrame];
ClearDualFrame[]:=ClearDualFrame[$DefaultFrame];


(* ::Input::Initialization:: *)
NewDualFrame[coframe_List,frame_List]:=NewDualFrame[coframe,frame,"NoNameFrame"]
NewDualFrame[{coframe_List,frame_List}]:=NewDualFrame[coframe,frame,"NoNameFrame"]


(* ::Input::Initialization:: *)
SetDefaultFrame[]:=($DefaultFrame="NoNameFrame")
SetDefaultFrame[M_String]:=If[MemberQ[$FrameNames,M], $DefaultFrame=M,Print["There is no frame called ",M,"."]]


(* ::Input::Initialization:: *)
$NoDefaultFrame ="No default dual-frame is set. See: ?\[VeryThinSpace]\[VeryThinSpace]SetDefaultFrame  ";
$DefaultFrame=$NoDefaultFrame;
$FrameNames = {};


(* ::Input::Initialization:: *)
NewCoordinates[x_List,M_String]:=(
ClearCoordinates[M];
ClearCoordinates[CoordsName[x]];
NewField[0,x];
CoordsName[x]:=M;
Coords[M]:=x;
$DefaultCoords=M;
AppendTo[$CoordsNames,M];
NewDualFrame[d[x],pd[x],M];
Evaluate[\[Del]x]=d[x];)


(* ::Input::Initialization:: *)
ClearCoordinates[M_String]:= Module[{x,message},
x = Coords[M];
ClearDualFrame[M];
ClearDualFrame[FrameName[d[x]]];
Quiet[Map[Unset[\[Del]#]&,x]];
ClearField[Evaluate[x]];
Quiet[CoordsName[x]=.];
Quiet[Coords[M]=.];
$CoordsNames=DeleteCases[$CoordsNames,M];
If[$DefaultCoords===M&&!$DefaultCoords===$NoDefaultCoords,
message="\""<>M<>"\" was the default coordinate system. You may wish to define a new default using  SetDefaultCoords[\"name\"]."<>
"\n"<>"The names of coordinates in current use are maintained in the list: $CoordsNames = "<>ToString[$CoordsNames];
$DefaultCoords=$NoDefaultCoords;
,
message=Null;
];
message
]


(* ::Input::Initialization:: *)
CoordsName[]:=$DefaultCoords
Coords[]:=Coords[$DefaultCoords];
ClearCoordinates[]:=ClearCoordinates[$DefaultCoords]


(* ::Input::Initialization:: *)
NewCoordinates[x_List]:=NewCoordinates[x,"NoNameCoords"]


(* ::Input::Initialization:: *)
SetDefaultCoords[]:=($DefaultCoords="NoNameCoords";$DefaultFrame="NoNameFrame")
SetDefaultCoords[M_String]:=($DefaultCoords=M;)
SetDefaultCoords[M_String,N_String]:=($DefaultCoords=M; $DefaultFrame=N)
SetDefaultFrame[M_String]:=($DefaultFrame=M;)


(* ::Input::Initialization:: *)
$NoDefaultCoords ="No default coordinates are set. See: ?\[VeryThinSpace]\[VeryThinSpace]SetDefaultCoords  ";
$DefaultCoords=$NoDefaultCoords;
$CoordsNames = {};


(* ::Input::Initialization:: *)
Clear[FreeIndex,DualIndex]


(* ::Input::Initialization:: *)
FreeIndex[pd[x_]]:= x
FreeIndex[d[x_]]:= x


(* ::Input::Initialization:: *)
DualIndex[pd[x_]]:= x
DualIndex[d[x_]]:= x


(* ::Input::Initialization:: *)
FreeIndex[v_List]:=Map[FreeIndex,v]
DualIndex[v_List] :=Map[DualIndex,v]


(* ::Input::Initialization:: *)
FreeIndex[basis_List ,index_List]:=(MapThread[(Set[FreeIndex[#1],#2]&),{basis,index}];)
DualIndex[basis_List,index_List] :=(MapThread[(Set[DualIndex[#1],#2]&),{basis,index}];)


(* ::Input::Initialization:: *)
SetAttributes[ClearFreeIndex,HoldFirst]
SetAttributes[ClearDualIndex,HoldFirst]
SetAttributes[ClearIndex,HoldFirst]


(* ::Input::Initialization:: *)
ClearFreeIndex[v_]:=(Quiet[FreeIndex[v]=.];)
ClearFreeIndex[v_List]:=(Map[ClearFreeIndex,Unevaluated[v]];)


(* ::Input::Initialization:: *)
ClearDualIndex[v_]:=(Quiet[DualIndex[v]=.];)
ClearDualIndex[v_List]:=(Map[ClearDualIndex,Unevaluated[v]];)


(* ::Input::Initialization:: *)
ClearIndex[v_]:=(ClearFreeIndex[Unevaluated[v]];ClearDualIndex[Unevaluated[v]];)
ClearIndex[v_List]:=(Map[ClearIndex,Unevaluated[v]];)


(* ::Input::Initialization:: *)
DualIndex[{\[Omega]0,\[Omega]1,\[Omega]2,\[Omega]3},{0,1,2,3}]
DualIndex[{e0,e1,e2,e3},{0,1,2,3}]


(* ::Input::Initialization:: *)
FreeIndex[{\[Omega]0,\[Omega]1,\[Omega]2,\[Omega]3},{0,1,2,3}]
FreeIndex[{e0,e1,e2,e3},{0,1,2,3}]


(* ::Input::Initialization:: *)
DualIndex[{d[x0],d[x1],d[x2],d[x3]},{0,1,2,3}]
DualIndex[{pd[x0],pd[x1],pd[x2],pd[x3]},{0,1,2,3}]


(* ::Input::Initialization:: *)
FreeIndex[{d[x0],d[x1],d[x2],d[x3]},{0,1,2,3}]
FreeIndex[{pd[x0],pd[x1],pd[x2],pd[x3]},{0,1,2,3}]


(* ::Input::Initialization:: *)
NewCoordinates[{x0,x1,x2,x3},"xi"]


(* ::Input::Initialization:: *)
DualIndex[{x0,x1,x2,x3},{x0,x1,x2,x3}]
FreeIndex[{x0,x1,x2,x3},{x0,x1,x2,x3}]


(* ::Input::Initialization:: *)
NewDualFrame[{{\[Omega]0,\[Omega]1,\[Omega]2,\[Omega]3},{e0,e1,e2,e3}},"\[Omega]e"]


(* ::Input::Initialization:: *)
DualIndex[{\[Omega]0,\[Omega]1,\[Omega]2,\[Omega]3,\[Omega]4},{e0,e1,e2,e3,e4}]
DualIndex[{e0,e1,e2,e3,e4},{\[Omega]0,\[Omega]1,\[Omega]2,\[Omega]3,\[Omega]4}]


(* ::Input::Initialization:: *)
FreeIndex[{\[Omega]0,\[Omega]1,\[Omega]2,\[Omega]3,\[Omega]4},{\[Omega]0,\[Omega]1,\[Omega]2,\[Omega]3,\[Omega]4}]
FreeIndex[{e0,e1,e2,e3,e4},{e0,e1,e2,e3,e4}]


(* ::Input::Initialization:: *)
ToCoordinateFrame[{a_Symbol,ainv_Symbol}]:=Module[{xi,coframe,frame},
coframe=FrameCovectors[];
frame=FrameVectors[];
Join[
MapThread[Rule,{coframe,Map[(Sum[ainv[FreeIndex[#],xi]d[xi],{xi,Coords[]}]&),coframe]}],
MapThread[Rule,{frame,Map[(Sum[a[FreeIndex[#],xi]pd[xi],{xi,Coords[]}]&),frame]}]
]]


(* ::Input::Initialization:: *)
FromCoordinateFrame[{a_Symbol,ainv_Symbol}]:=Module[{\[Omega]i,ei},
Join[
MapThread[Rule,{d[Coords[]],Map[(Sum[ainv[#,DualIndex[\[Omega]i]]\[Omega]i,{\[Omega]i,FrameCovectors[]}]&),Coords[]]}],
MapThread[Rule,{pd[Coords[]],Map[(Sum[a[#,DualIndex[ei]]ei,{ei,FrameVectors[]}]&),Coords[]]}]
]]


(* ::Input::Initialization:: *)
GradientOfFrameVector[ej_?deg1Q,\[CapitalGamma]_Symbol,{coframe_List,frame_List}]:= Module[{ei,\[Omega]k},
If[!MemberQ[frame,ej],Print["The first argument ",ej," should be one of the frame vectors ",frame,"."];Abort[]]; 
Sum[ \[CapitalGamma][DualIndex[ei],FreeIndex[ej],DualIndex[\[Omega]k]] ei\[CircleTimes]\[Omega]k,{ei,frame},{\[Omega]k,coframe}]]


(* ::Input::Initialization:: *)
GradientOfFrameCovector[\[Omega]i_?deg1Q,\[CapitalGamma]_Symbol,coframe_List]:= Module[{\[Omega]j,\[Omega]k},
If[!MemberQ[coframe,\[Omega]i],Print["The first argument ",\[Omega]i," should be one of the frame covectors ",coframe,"."];Abort[]]; 
Sum[ - \[CapitalGamma][FreeIndex[\[Omega]i],DualIndex[\[Omega]j],DualIndex[\[Omega]k]] \[Omega]j\[CircleTimes]\[Omega]k,{\[Omega]j,coframe},{\[Omega]k,coframe}]]


(* ::Input::Initialization:: *)
GradientOfFrameCovector[\[Omega]i_?deg1Q,\[CapitalGamma]_Symbol,{coframe_List,frame_List}]:= GradientOfFrameCovector[\[Omega]i,\[CapitalGamma],coframe]


(* ::Input::Initialization:: *)
GradientOfFrameVector[ej_?deg1Q,\[CapitalGamma]_Symbol,M_String]:=GradientOfFrameVector[ej,\[CapitalGamma],{FrameCovectors[M],FrameVectors[M]}]


(* ::Input::Initialization:: *)
GradientOfFrameCovector[\[Omega]i_?deg1Q,\[CapitalGamma]_Symbol,M_String]:=GradientOfFrameCovector[\[Omega]i,\[CapitalGamma],FrameCovectors[M]]


(* ::Input::Initialization:: *)
GradientOfFrameVector[ej_List,args__]:=Map[GradientOfFrameVector[#,args]&,ej]
GradientOfFrameCovector[\[Omega]i_List,args__]:=Map[GradientOfFrameCovector[#,args]&,\[Omega]i]


(* ::Input::Initialization:: *)
GradientOfFrameVector[ej_?deg1Q,\[CapitalGamma]_Symbol]:=GradientOfFrameVector[ej,\[CapitalGamma],$DefaultFrame]
GradientOfFrameCovector[\[Omega]i_?deg1Q,\[CapitalGamma]_Symbol]:=GradientOfFrameCovector[\[Omega]i,\[CapitalGamma],$DefaultFrame]


(* ::Input::Initialization:: *)
ToConnection[\[CapitalGamma]_Symbol,{coframe_,frame_}]:=
Module[{},
Join[
MapThread[Rule,{ \[Del]coframe,GradientOfFrameCovector[coframe,\[CapitalGamma],coframe]}],
MapThread[Rule,{ \[Del]frame,GradientOfFrameVector[frame,\[CapitalGamma],{coframe,frame}]}]
]
]


(* ::Input::Initialization:: *)
ToConnection[\[CapitalGamma]_Symbol,M_String]:=ToConnection[\[CapitalGamma],{FrameCovectors[M],FrameVectors[M]}]


(* ::Input::Initialization:: *)
ToConnection[\[CapitalGamma]_Symbol]:=ToConnection[\[CapitalGamma],$DefaultFrame]


(* ::Input::Initialization:: *)
ZeroConnection[{coframe_,frame_}]:=
Module[{},
Join[
MapThread[Rule,{ \[Del]coframe,Table[0,{Length[coframe]}]}],
MapThread[Rule,{ \[Del]frame,Table[0,{Length[frame]}]}]
]
]


(* ::Input::Initialization:: *)
ZeroConnection[M_String]:=ZeroConnection[{FrameCovectors[M],FrameVectors[M]}]


(* ::Input::Initialization:: *)
ZeroConnection[]:=ZeroConnection[$DefaultFrame]


(* ::Input::Initialization:: *)
SymmetricConnection[\[CapitalGamma]_]:={Torsion->0,\[CapitalGamma][i_,j_,k_]/;!OrderedQ[{j,k}]:>\[CapitalGamma][i,k,j]}


(* ::Input::Initialization:: *)
ConnectionTensor[{coframe_List,frame_List},"GradVectors"]:=mv[1,3,2][Total[MapThread[CircleTimes,{\[Del]frame,coframe}]]]


(* ::Input::Initialization:: *)
ConnectionTensor[{coframe_List,frame_List},"GradCovectors"]:=- Total[MapThread[CircleTimes,{frame,\[Del]coframe}]]


(* ::Input::Initialization:: *)
ConnectionTensor[{coframe_List,frame_List}]:=ConnectionTensor[{coframe,frame},"GradCovectors"]


(* ::Input::Initialization:: *)
ConnectionTensor[M_String,"GradVectors"]:=ConnectionTensor[{FrameCovectors[M],FrameVectors[M]},"GradVectors"]


(* ::Input::Initialization:: *)
ConnectionTensor[M_String,"GradCovectors"]:=ConnectionTensor[{FrameCovectors[M],FrameVectors[M]},"GradCovectors"]


(* ::Input::Initialization:: *)
ConnectionTensor[M_String]:=ConnectionTensor[{FrameCovectors[M],FrameVectors[M]},"GradCovectors"]


(* ::Input::Initialization:: *)
ConnectionTensor[]:=ConnectionTensor[{FrameCovectors[$DefaultFrame],FrameVectors[$DefaultFrame]},"GradCovectors"]


(* ::Input::Initialization:: *)
ConnectionTensor["GradVectors"]:=ConnectionTensor[{FrameCovectors[$DefaultFrame],FrameVectors[$DefaultFrame]},"GradVectors"]


(* ::Input::Initialization:: *)
ConnectionTensor["GradCovectors"]:=ConnectionTensor[{FrameCovectors[$DefaultFrame],FrameVectors[$DefaultFrame]},"GradCovectors"]


(* ::Input::Initialization:: *)
MakeExpression[RowBox[{SubscriptBox["\[Del]",u_],X_}],StandardForm]:=MakeExpression[RowBox[{"\[LeftAngleBracket]","\[Del]",X,",",u,"\[RightAngleBracket]"}],StandardForm]


(* ::Input::Initialization:: *)
Clear[LieBracket]
LieBracket[u_?deg1Q,v_?deg1Q,M_String]:=Module[{ux,vx,dvdx,dudx},
ux=\[LeftAngleBracket]d[Coords[M]],u\[RightAngleBracket];
vx=\[LeftAngleBracket]d[Coords[M]],v\[RightAngleBracket];
dvdx=\[LeftAngleBracket]\[Del]vx,pd[Coords[M]]\[RightAngleBracket];
dudx=\[LeftAngleBracket]\[Del]ux,pd[Coords[M]]\[RightAngleBracket];
pd[Coords[M]].(dvdx.ux - dudx.vx)]


(* ::Input::Initialization:: *)
LieBracket[u_?deg1Q,v_?deg1Q]:=LieBracket[u,v,$DefaultCoords]


(* ::Input::Initialization:: *)
LieBracket[u_List,v_]:= Map[LieBracket[#,v]&,u]
LieBracket[u_,v_List]:= Map[LieBracket[u,#]&,v]


(* ::Input::Initialization:: *)
Clear[TorsionTensor]
TorsionTensor[\[Gamma]_/;deg3Q[\[Gamma]]||\[Gamma]===0,c_/;deg3Q[c]||c===0]:=-(\[Gamma] - mv[1,3,2][\[Gamma]]+c)


(* ::Input::Initialization:: *)
CommutatorOfFrame[Mframe_String,Mcoords_String]:=Module[{c,a,b,n},
n =Length[FrameCovectors[Mframe]];
Do[
c[a,b]=LieBracket[FrameVectors[Mframe][[a]],FrameVectors[Mframe][[b]],Mcoords];
c[b,a] = -c[a,b],
{a,n},{b,a+1,n}];
Do[c[a,a]=0,{a,n}];
Sum[c[a,b]\[CircleTimes]FrameCovectors[Mframe][[a]]\[CircleTimes]FrameCovectors[Mframe][[b]],{a,n},{b,n}]]


(* ::Input::Initialization:: *)
CommutatorOfFrame[Mframe_String]:=CommutatorOfFrame[Mframe,$DefaultCoords]
CommutatorOfFrame[]:=CommutatorOfFrame[$DefaultFrame,$DefaultCoords]


(* ::Input::Initialization:: *)
TorsionTensor[Mframe_String,Mcoords_String]:=Module[{\[Gamma],c},
(* \[Gamma]=ConnectionTensor[Mframe,"GradVectors"]; *)
\[Gamma]=ConnectionTensor[Mframe];
c = CommutatorOfFrame[Mframe,Mcoords];
TorsionTensor[\[Gamma],c]
]


(* ::Input::Initialization:: *)
TorsionTensor[Mframe_String]:=TorsionTensor[Mframe,$DefaultCoords]
TorsionTensor[]:=TorsionTensor[$DefaultCoords,$DefaultCoords]


(* ::Input::Initialization:: *)
ClearField[Torsion]
NewField[3,Torsion]


(* ::Input::Initialization:: *)

\!\(\*SubscriptBox[\(\[LeftAngleBracket]Torsion\[RightAngleBracket]\), \({2, 3}\)]\)=0;


(* ::Input::Initialization:: *)
\[LeftAngleBracket]\[LeftAngleBracket]Torsion,u_?deg1Q\[RightAngleBracket],u_?deg1Q\[RightAngleBracket]:=0


(* ::Input::Initialization:: *)
\[LeftAngleBracket]\[LeftAngleBracket]Torsion,v_?deg1Q\[RightAngleBracket],u_?deg1Q\[RightAngleBracket]/;!OrderedQ[{u,v}]:=-\[LeftAngleBracket]\[LeftAngleBracket]Torsion,u\[RightAngleBracket],v\[RightAngleBracket]


(* ::Input::Initialization:: *)
AddAssumption[deg[_]\[Element]Integers];


(* ::Input::Initialization:: *)
deg[MinusOnePower[_]]:= 0


(* ::Input::Initialization:: *)
MinusOnePower[n_Integer]:=(-1)^n


(* ::Input::Initialization:: *)
MinusOnePower[n_Integer+x_]:=(-1)^n MinusOnePower[x]


(* ::Input::Initialization:: *)
MinusOnePower[x__ y_Plus]:=MinusOnePower[ExpandAll[x y]]


(* ::Input::Initialization:: *)
MinusOnePower/:MinusOnePower[n1_]MinusOnePower[n2_]:= MinusOnePower[n1+n2]


(* ::Input::Initialization:: *)
MinusOnePower/:(-1)^n1_ MinusOnePower[n2_]:= MinusOnePower[n1+n2]


(* ::Input::Initialization:: *)
MinusOnePower[n_?EvenQ (deg[_]..)]:=1
MinusOnePower[n_?OddQ y:(deg[_]..)]:=MinusOnePower[Times[y]]


(* ::Input::Initialization:: *)
MinusOnePower[x_+n_?EvenQ (deg[_]..)]:=MinusOnePower[x]
MinusOnePower[x_+n_?OddQ y:(deg[_]..)]:=MinusOnePower[x+Times[y]]


(* ::Input::Initialization:: *)
MinusOnePower[x_+n_?EvenQ deg[y_]^m_Integer]:=MinusOnePower[x]
MinusOnePower[x_+n_?OddQ deg[y_]^m_Integer]:=MinusOnePower[x+deg[y]]


(* ::Input::Initialization:: *)
MinusOnePower[deg[y_]^m_Integer]:=MinusOnePower[deg[y]]
MinusOnePower[x_+deg[y_]^m_Integer]:=MinusOnePower[x+deg[y]]


(* ::Input::Initialization:: *)
MinusOnePower/:MinusOnePower[x_]^n_:=MinusOnePower[n x]


(* ::Input::Initialization:: *)
Format[MinusOnePower[n_],StandardForm]=Style["(-1)",Blue,Bold]^n;


(* ::Input::Initialization:: *)
Protect[$WedgeNorm];
Clear[WedgeNorm]
WedgeNorm[]:=$WedgeNorm


(* ::Input::Initialization:: *)
WedgeNormData["Choquet-Bruhat"]={"Standard","\"Analysis, Manifolds and Physics\", p196.  See also footnotes p196 and p200 (for exterior d)."};


(* ::Input::Initialization:: *)
WedgeNormData["Doran and Lasenby"]:={"NonStandard","\"Gemetric Algebra for Physicists\", p86."};


(* ::Input::Initialization:: *)
WedgeNormData["MTW"]={"Standard","\"Gravitation\", p83."};


(* ::Input::Initialization:: *)
WedgeNormData["Norton"]={"Standard",""};


(* ::Input::Initialization:: *)
WedgeNormData["Petersen"]:={"Standard","\"Riemannian Geometry\", p362. However, the Clifford product is NonStandard, see p184."};


(* ::Input::Initialization:: *)
WedgeNormData["von Westenholz"] :={"NonStandard",""};


(* ::Input::Initialization:: *)
WedgeNormData["Warner"]:={"Standard",""};


(* ::Input::Initialization:: *)
WedgeNormData["Standard"] :={"Standard","Choquet-Bruhat, MTW, Petersen, Warner."};
WedgeNormData["NonStandard"] :={"NonStandard","Doran and Lasenby, von Westenholz."};


(* ::Input::Initialization:: *)
WedgeNorm["help"]:=Information[WedgeNormData]


(* ::Input::Initialization:: *)
WedgeNorm[au_]:=Module[{msg},
If[!ValueQ[WedgeNormData[au]],
Print["WedgeNorm[author] is unknown for author = \""<>au<>"\"."];
Print["To have this author added to future tpTensor distributions, email: norton.ah@gmail.com"];
Print["WedgeNorm[\"help\"\[VeryThinSpace]] will return author/value information, also available by \"? WedgeNormData\"."]
,
Unprotect[$WedgeNorm];
$WedgeNorm=WedgeNormData[au][[1]];
Protect[$WedgeNorm];
msg="WedgeNorm: "<>WedgeNormData[au][[1]]<>"\nReference: "<>WedgeNormData[au][[2]]
]
]


(* ::Input::Initialization:: *)
If[$WedgeNormStartup==="NonStandard",WedgeNorm["NonStandard"];,WedgeNorm["Standard"];]


(* ::Input::Initialization:: *)
$AltToWedge=False;
$WedgeToAlt=False;
Protect[$AltToWedge,$WedgeToAlt];


(* ::Input::Initialization:: *)
Clear[WedgeToAlt]
Clear[AltToWedge]


(* ::Input::Initialization:: *)
AltToWedge["on"]:=(
Unprotect[$AltToWedge,$WedgeToAlt];
$AltToWedge=True;
$WedgeToAlt=False; 
Protect[$AltToWedge,$WedgeToAlt];
);
AltToWedge["off"]:=(
Unprotect[$AltToWedge];
$AltToWedge=False;
Protect[$AltToWedge];
);
WedgeToAlt["on"]:=(
Unprotect[$AltToWedge,$WedgeToAlt];
$AltToWedge=False;
$WedgeToAlt=True;
WedgeToAlt[0];
Protect[$AltToWedge,$WedgeToAlt];
);
WedgeToAlt["off"]:=(
Unprotect[$WedgeToAlt];
$WedgeToAlt=False;
WedgeToAlt[0];
Protect[$WedgeToAlt];
);


(* ::Input::Initialization:: *)
WedgeToAlt[x_]:= Module[{a},
If[$AltToWedge,AltToWedge["off"];Print["Settings have been changed to AltToWedge[\"off\"]."]];
If[$WedgeNorm === "NonStandard", 
Wedge[\[Omega]__]:=Alt[][CircleTimes[\[Omega]]],
Wedge[\[Omega]__]:=(deg[\[Omega]]!/Apply[Times,Map[deg[#]!&,{\[Omega]}]])Alt[][CircleTimes[\[Omega]]]];
a=x;
If[!$WedgeToAlt,Wedge[\[Omega]__]=.];
a
]


(* ::Input::Initialization:: *)
AltToWedge[x_]:= Module[{a},
If[$WedgeToAlt,WedgeToAlt["off"];Print["Settings have been changed to WedgeToAlt[\"off\"]."]];
If[$WedgeNorm === "NonStandard", 
Alt[][\[Omega]_CircleTimes]:=Apply[Wedge,\[Omega]],
Alt[][\[Omega]_CircleTimes]:=Apply[Wedge,\[Omega]]Apply[Times,Map[deg[#]!&,Apply[List, \[Omega]]]]/Apply[deg,\[Omega]]!];
a=x;
If[!$AltToWedge,Alt[][\[Omega]_CircleTimes]=.];
a
]


(* ::Input::Initialization:: *)
Clear[Wedge]
AntisymQ[\[Omega]_Wedge]:=True
Wedge[\[Omega]_]:=Alt[][\[Omega]];
Wedge[a___, b_Wedge, c___]   :=   Wedge[a, Apply[Sequence,b], c]
Wedge[\[Omega]1__,c_?deg0Q,\[Omega]2___]:=c Wedge[\[Omega]1,\[Omega]2]
Wedge[\[Omega]1___,c_?deg0Q,\[Omega]2__]:=c Wedge[\[Omega]1,\[Omega]2]
Wedge[\[Omega]1___,(c_?deg0Q) \[Omega]2_,\[Omega]3___]:=c Wedge[\[Omega]1,\[Omega]2,\[Omega]3]
Wedge[\[Omega]1___,\[Omega]2_Plus,\[Omega]3___]:=Map[Wedge[\[Omega]1,#,\[Omega]3]&,\[Omega]2]
Wedge[\[Omega]1___,\[Omega]_/;OddQ[deg[\[Omega]]],\[Omega]2___,\[Omega]_,\[Omega]3___]:=0
Wedge[\[Omega]0___,\[Omega]1_,\[Omega]2_,\[Omega]3___]/;!OrderedQ[{\[Omega]1,\[Omega]2}]:=MinusOnePower[deg[\[Omega]1]deg[\[Omega]2]]Wedge[\[Omega]0,\[Omega]2,\[Omega]1,\[Omega]3]


(* ::Input::Initialization:: *)
deg[\[Omega]_Wedge]:=Apply[deg,\[Omega]]


(* ::Input::Initialization:: *)
AntisymQ[\[Omega]_Wedge]:=True


(* ::Input::Initialization:: *)
rev[X_Wedge]:=Wedge[Apply[rev,X]]


(* ::Input::Initialization:: *)
rev[X_?AntisymQ]:=MinusOnePower[deg[X](deg[X]-1)/2]X


(* ::Input::Initialization:: *)
IndexString[i__]:=Row[Flatten[Map[If[Apply[Or,Map[(IntegerQ[#]&&#>9)&,{i}]],{#,"\[MediumSpace]"},{#,"\[VeryThinSpace]"}]&,{i}]]]


(* ::Input::Initialization:: *)
Clear[UseWedgeBasis]
UseWedgeBasis[e_]:=Module[{},
Quiet[e/:Wedge[x___,e[i__],e[j__],y___]=.];
e[i__]/;Length[{i}]>1:=Alt[][Apply[CircleTimes,Map[e,{i}]]]//AltToWedge
]


(* ::Input::Initialization:: *)
Clear[UseIndexedBasis]
UseIndexedBasis[e_]:=Module[{},
Quiet[e[i__]/;Length[{i}]>1=.];
e/:Wedge[x___,e[i__],e[j__],y___]:= If[WedgeNorm[]==="NonStandard", x\[Wedge]e[i,j]\[Wedge]y, Length[{i,j}]!/(Length[{i}]!Length[{j}]!)x\[Wedge]e[i,j]\[Wedge]y]
]


(* ::Input::Initialization:: *)
NewOrthonormalFrame[\[Gamma]_Symbol,\[Eta]_Symbol]:=Module[{\[Eta]i,msg},
UseIndexedWedgeBasis[\[Gamma]];
ClearField[{\[Gamma][_],\[Gamma][_,_],\[Gamma][_,_,_],\[Gamma][_,_,_,_],\[Gamma][_,_,_,_,_],\[Gamma][_,_,_,_,_,_],\[Gamma][_,_,_,_,_,_,_],
\[Gamma][_,_,_,_,_,_,_,_],\[Gamma][_,_,_,_,_,_,_,_,_],\[Gamma][_,_,_,_,_,_,_,_,_,_]}];
NewField[1,\[Gamma][_]];
NewField[2,\[Gamma][_,_]];
NewField[3,\[Gamma][_,_,_]];
NewField[4,\[Gamma][_,_,_,_]];
NewField[5,\[Gamma][_,_,_,_,_]];
NewField[6,\[Gamma][_,_,_,_,_,_]];
NewField[7,\[Gamma][_,_,_,_,_,_,_]];
NewField[8,\[Gamma][_,_,_,_,_,_,_,_]];
NewField[9,\[Gamma][_,_,_,_,_,_,_,_,_]];
NewField[10,\[Gamma][_,_,_,_,_,_,_,_,_,_]];
AntisymQ[\[Gamma][_,_]]=True;
AntisymQ[\[Gamma][_,_,_]]=True;
AntisymQ[\[Gamma][_,_,_,_]]=True;
AntisymQ[\[Gamma][_,_,_,_,_]]=True;
AntisymQ[\[Gamma][_,_,_,_,_,_]]=True;
AntisymQ[\[Gamma][_,_,_,_,_,_,_]]=True;
AntisymQ[\[Gamma][_,_,_,_,_,_,_,_]]=True;
AntisymQ[\[Gamma][_,_,_,_,_,_,_,_,_]]=True;
AntisymQ[\[Gamma][_,_,_,_,_,_,_,_,_,_]]=True;
\[Gamma][i__]/;!OrderedQ[{i}]:=Signature[{i}]\[Gamma][Apply[Sequence,Sort[{i}]]];
\[Gamma][i1___,j_,j_,i2___]/;!{j,j}==={_,_}:=0;
Subscript[\[LeftAngleBracket]\[Gamma][__]\[RightAngleBracket], __]:=0;
Format[\[Gamma][i__],StandardForm]:=Subscript[ToString[\[Gamma]], IndexString[i]];
ClearSignatureFunction[\[Eta]];
ClearSignatureFunction[\[Eta]inv];
SignatureFunction[\[Eta]];
\[Eta]i=ToExpression[ToString[\[Eta]]<>"inv"];
SignatureFunction[\[Eta]i];
Format[\[Eta][i_,j_],StandardForm]:=Subscript[ToString[\[Eta]], IndexString[i,j]];
Format[\[Eta]i[i_,j_],StandardForm]:=ToString[\[Eta]]^IndexString[i,j];
\[Gamma]/:\[LeftAngleBracket]\[Gamma][i_],\[Gamma][j_]\[RightAngleBracket]:=\[Eta][i,j];
msg= Row[{{Subscript[\[Gamma], i]}," is an orthonormal frame with signature ",\[LeftAngleBracket]Subscript[\[Gamma], i] , Subscript[\[Gamma], j]\[RightAngleBracket] ," = ", Subscript[\[Eta], ij],"\[VeryThinSpace]. \n",
Subscript[\[Gamma], ij]," = ",Subscript[\[Gamma], i]\[Wedge]Subscript[\[Gamma], j],", ",Subscript[\[Gamma], ijk]," = ",Subscript[\[Gamma], i]\[Wedge]Subscript[\[Gamma], j]\[Wedge]Subscript[\[Gamma], k],", ... \n",
Subscript[\[Gamma], i],", ", Subscript[\[Gamma], ij],", ",Subscript[\[Gamma], ijk],", ... are input as ",\[Gamma],"[i], ",\[Gamma],"[i,j], ", \[Gamma],"[i,j,k], ...\[ThinSpace].\n",
Subscript[\[Eta], ij]," and ", \[Eta]^ij," are input as ", \[Eta],"[i,j], ",\[Eta],"inv[i,j]\[VeryThinSpace]."
}]]


(* ::Input::Initialization:: *)
OrderProducts[\[Gamma]_]:=Star[x___,\[Gamma][j_],\[Gamma][i_],y___]/;!OrderedQ[{j,i}]:>2\[Eta][i,j]Star[x,y]-Star[x,\[Gamma][i],\[Gamma][j],y]


(* ::Input::Initialization:: *)
ClearOrthonormalFrame[\[Gamma]_Symbol,\[Eta]_Symbol]:=Module[{\[Eta]inv},
Quiet[(
ClearField[{\[Gamma][_],\[Gamma][_,_],\[Gamma][_,_,_],\[Gamma][_,_,_,_],\[Gamma][_,_,_,_,_],\[Gamma][_,_,_,_,_,_],
\[Gamma][_,_,_,_,_,_,_],\[Gamma][_,_,_,_,_,_,_,_],\[Gamma][_,_,_,_,_,_,_,_,_],\[Gamma][_,_,_,_,_,_,_,_,_,_]}];
AntisymQ[\[Gamma][_,_]]=.;
AntisymQ[\[Gamma][_,_,_]]=.;
AntisymQ[\[Gamma][_,_,_,_]]=.;
AntisymQ[\[Gamma][_,_,_,_,_]]=.;
AntisymQ[\[Gamma][_,_,_,_,_,_]]=.;
AntisymQ[\[Gamma][_,_,_,_,_,_,_]]=.;
AntisymQ[\[Gamma][_,_,_,_,_,_,_,_]]=.;
AntisymQ[\[Gamma][_,_,_,_,_,_,_,_,_]]=.;
AntisymQ[\[Gamma][_,_,_,_,_,_,_,_,_,_]]=.;
\[Gamma][i__]/;!OrderedQ[{i}]=.;
\[Gamma][i1___,j_,j_,i2___]/;!{j,j}==={_,_}=.;
Subscript[\[LeftAngleBracket]\[Gamma][__]\[RightAngleBracket], __]=.;
\[Gamma]/:\[Gamma][i__]\[Wedge]\[Gamma][j__]=.;
Wedge[x:(\[Gamma][_]..)]=.;
\[Gamma][i__]=.;
Format[\[Gamma][i__],StandardForm]=.;
ClearSignatureFunction[\[Eta]];
\[Eta]inv=ToExpression[ToString[\[Eta]]<>"inv"];
ClearSignatureFunction[\[Eta]inv];
\[Gamma]/:\[LeftAngleBracket]\[Gamma][i_],\[Gamma][j_]\[RightAngleBracket]=.;
)]]


(* ::Input::Initialization:: *)
Clear[Cliff]


(* ::Input::Initialization:: *)
Cliff[c_?deg0Q X_]:=c Cliff[X]


(* ::Input::Initialization:: *)
Cliff[X_Plus]:=Map[Cliff,X]


(* ::Input::Initialization:: *)
Cliff[X_?deg0Q]:= X


(* ::Input::Initialization:: *)
Cliff[X_?deg1Q]:= X


(* ::Input::Initialization:: *)
Cliff[X_?AntisymQ]:= X


(* ::Input::Initialization:: *)
Cliff[X_?deg2Q]:= Alt[][X]+
\!\(\*SubscriptBox[\(\[LeftAngleBracket]X\[RightAngleBracket]\), \({1, 2}\)]\)If[$WedgeNorm==="Standard",1/2,1]


(* ::Input::Initialization:: *)
Cliff[X_?deg2Q]:= Alt[][X]+
\!\(\*SubscriptBox[\(\[LeftAngleBracket]X\[RightAngleBracket]\), \({1, 2}\)]\)


(* ::Input::Initialization:: *)
Cliff[X_?deg2Q]:= Alt[][X]+
\!\(\*SubscriptBox[\(\[LeftAngleBracket]X\[RightAngleBracket]\), \({1, 2}\)]\)


(* ::Input::Initialization:: *)
OrderCliffArg=Cliff[x___\[CircleTimes]a2_?deg1Q\[CircleTimes]a1_?deg1Q\[CircleTimes]y___]/;!OrderedQ[{a2,a1}]:>Cliff[x\[CircleTimes](2 \[LeftAngleBracket]a1,a2\[RightAngleBracket]-a1\[CircleTimes]a2)\[CircleTimes]y];


(* ::Input::Initialization:: *)
OrderCliffArg=Cliff[x___\[CircleTimes]a2_?deg1Q\[CircleTimes]a1_?deg1Q\[CircleTimes]y___]/;!OrderedQ[{a2,a1}]:>Cliff[x\[CircleTimes](\[LeftAngleBracket]a1,a2\[RightAngleBracket]-a1\[CircleTimes]a2)\[CircleTimes]y];


(* ::Input::Initialization:: *)
Cliff[X_?deg3Q]:=Alt[][X] +
\!\(\*SubscriptBox[\(\[LeftAngleBracket]X\[RightAngleBracket]\), \({1, 2}\)]\)-
\!\(\*SubscriptBox[\(\[LeftAngleBracket]X\[RightAngleBracket]\), \({1, 3}\)]\)+
\!\(\*SubscriptBox[\(\[LeftAngleBracket]X\[RightAngleBracket]\), \({2, 3}\)]\)


(* ::Input::Initialization:: *)
Cliff[X_?deg3Q]:=Alt[][X] +(
\!\(\*SubscriptBox[\(\[LeftAngleBracket]X\[RightAngleBracket]\), \({1, 2}\)]\)-
\!\(\*SubscriptBox[\(\[LeftAngleBracket]X\[RightAngleBracket]\), \({1, 3}\)]\)+
\!\(\*SubscriptBox[\(\[LeftAngleBracket]X\[RightAngleBracket]\), \({2, 3}\)]\))/2


(* ::Input::Initialization:: *)
Cliff[X_?deg4Q]:=
\!\(\*SubscriptBox[\(\[LeftAngleBracket]X\[RightAngleBracket]\), \({1, 4}, {2, 3}\)]\)-
\!\(\*SubscriptBox[\(\[LeftAngleBracket]X\[RightAngleBracket]\), \({1, 3}, {2, 4}\)]\)+
\!\(\*SubscriptBox[\(\[LeftAngleBracket]X\[RightAngleBracket]\), \({1, 2}, {3, 4}\)]\)+Alt[][ 
\!\(\*SubscriptBox[\(\[LeftAngleBracket]X\[RightAngleBracket]\), \({3, 4}\)]\)-
\!\(\*SubscriptBox[\(\[LeftAngleBracket]X\[RightAngleBracket]\), \({2, 4}\)]\)+
\!\(\*SubscriptBox[\(\[LeftAngleBracket]X\[RightAngleBracket]\), \({2, 3}\)]\)+
\!\(\*SubscriptBox[\(\[LeftAngleBracket]X\[RightAngleBracket]\), \({1, 4}\)]\)-
\!\(\*SubscriptBox[\(\[LeftAngleBracket]X\[RightAngleBracket]\), \({1, 3}\)]\)+
\!\(\*SubscriptBox[\(\[LeftAngleBracket]X\[RightAngleBracket]\), \({1, 2}\)]\)]+Alt[][X]


(* ::Input::Initialization:: *)
Cliff[X_?deg4Q]:=(
\!\(\*SubscriptBox[\(\[LeftAngleBracket]X\[RightAngleBracket]\), \({1, 4}, {2, 3}\)]\)-
\!\(\*SubscriptBox[\(\[LeftAngleBracket]X\[RightAngleBracket]\), \({1, 3}, {2, 4}\)]\)+
\!\(\*SubscriptBox[\(\[LeftAngleBracket]X\[RightAngleBracket]\), \({1, 2}, {3, 4}\)]\))/4+Alt[][ 
\!\(\*SubscriptBox[\(\[LeftAngleBracket]X\[RightAngleBracket]\), \({3, 4}\)]\)-
\!\(\*SubscriptBox[\(\[LeftAngleBracket]X\[RightAngleBracket]\), \({2, 4}\)]\)+
\!\(\*SubscriptBox[\(\[LeftAngleBracket]X\[RightAngleBracket]\), \({2, 3}\)]\)+
\!\(\*SubscriptBox[\(\[LeftAngleBracket]X\[RightAngleBracket]\), \({1, 4}\)]\)-
\!\(\*SubscriptBox[\(\[LeftAngleBracket]X\[RightAngleBracket]\), \({1, 3}\)]\)+
\!\(\*SubscriptBox[\(\[LeftAngleBracket]X\[RightAngleBracket]\), \({1, 2}\)]\)]/2+Alt[][X]


(* ::Input::Initialization:: *)
Cliff[X_?deg5Q]:=
\!\(\*SubscriptBox[\(\[LeftAngleBracket]X\[RightAngleBracket]\), \({1, 4}, {2, 3}\)]\)-
\!\(\*SubscriptBox[\(\[LeftAngleBracket]X\[RightAngleBracket]\), \({1, 5}, {2, 3}\)]\)-
\!\(\*SubscriptBox[\(\[LeftAngleBracket]X\[RightAngleBracket]\), \({1, 3}, {2, 4}\)]\)+
\!\(\*SubscriptBox[\(\[LeftAngleBracket]X\[RightAngleBracket]\), \({1, 5}, {2, 4}\)]\)+
\!\(\*SubscriptBox[\(\[LeftAngleBracket]X\[RightAngleBracket]\), \({1, 3}, {2, 5}\)]\)-
\!\(\*SubscriptBox[\(\[LeftAngleBracket]X\[RightAngleBracket]\), \({1, 4}, {2, 5}\)]\)+
\!\(\*SubscriptBox[\(\[LeftAngleBracket]X\[RightAngleBracket]\), \({1, 2}, {3, 4}\)]\)-
\!\(\*SubscriptBox[\(\[LeftAngleBracket]X\[RightAngleBracket]\), \({1, 5}, {3, 4}\)]\)+
\!\(\*SubscriptBox[\(\[LeftAngleBracket]X\[RightAngleBracket]\), \({2, 5}, {3, 4}\)]\)-
\!\(\*SubscriptBox[\(\[LeftAngleBracket]X\[RightAngleBracket]\), \({1, 2}, {3, 5}\)]\)+
\!\(\*SubscriptBox[\(\[LeftAngleBracket]X\[RightAngleBracket]\), \({1, 4}, {3, 5}\)]\)-
\!\(\*SubscriptBox[\(\[LeftAngleBracket]X\[RightAngleBracket]\), \({2, 4}, {3, 5}\)]\)+
\!\(\*SubscriptBox[\(\[LeftAngleBracket]X\[RightAngleBracket]\), \({1, 2}, {4, 5}\)]\)-
\!\(\*SubscriptBox[\(\[LeftAngleBracket]X\[RightAngleBracket]\), \({1, 3}, {4, 5}\)]\)+
\!\(\*SubscriptBox[\(\[LeftAngleBracket]X\[RightAngleBracket]\), \({2, 3}, {4, 5}\)]\)+Alt[][ 
\!\(\*SubscriptBox[\(\[LeftAngleBracket]X\[RightAngleBracket]\), \({4, 5}\)]\)-
\!\(\*SubscriptBox[\(\[LeftAngleBracket]X\[RightAngleBracket]\), \({3, 5}\)]\)+
\!\(\*SubscriptBox[\(\[LeftAngleBracket]X\[RightAngleBracket]\), \({3, 4}\)]\)+
\!\(\*SubscriptBox[\(\[LeftAngleBracket]X\[RightAngleBracket]\), \({2, 5}\)]\)-
\!\(\*SubscriptBox[\(\[LeftAngleBracket]X\[RightAngleBracket]\), \({2, 4}\)]\)+
\!\(\*SubscriptBox[\(\[LeftAngleBracket]X\[RightAngleBracket]\), \({2, 3}\)]\)-
\!\(\*SubscriptBox[\(\[LeftAngleBracket]X\[RightAngleBracket]\), \({1, 5}\)]\)+
\!\(\*SubscriptBox[\(\[LeftAngleBracket]X\[RightAngleBracket]\), \({1, 4}\)]\)-
\!\(\*SubscriptBox[\(\[LeftAngleBracket]X\[RightAngleBracket]\), \({1, 3}\)]\)+
\!\(\*SubscriptBox[\(\[LeftAngleBracket]X\[RightAngleBracket]\), \({1, 2}\)]\)]+Alt[][X]


(* ::Input::Initialization:: *)
Cliff[X_?deg5Q]:=(
\!\(\*SubscriptBox[\(\[LeftAngleBracket]X\[RightAngleBracket]\), \({1, 4}, {2, 3}\)]\)-
\!\(\*SubscriptBox[\(\[LeftAngleBracket]X\[RightAngleBracket]\), \({1, 5}, {2, 3}\)]\)-
\!\(\*SubscriptBox[\(\[LeftAngleBracket]X\[RightAngleBracket]\), \({1, 3}, {2, 4}\)]\)+
\!\(\*SubscriptBox[\(\[LeftAngleBracket]X\[RightAngleBracket]\), \({1, 5}, {2, 4}\)]\)+
\!\(\*SubscriptBox[\(\[LeftAngleBracket]X\[RightAngleBracket]\), \({1, 3}, {2, 5}\)]\)-
\!\(\*SubscriptBox[\(\[LeftAngleBracket]X\[RightAngleBracket]\), \({1, 4}, {2, 5}\)]\)+
\!\(\*SubscriptBox[\(\[LeftAngleBracket]X\[RightAngleBracket]\), \({1, 2}, {3, 4}\)]\)-
\!\(\*SubscriptBox[\(\[LeftAngleBracket]X\[RightAngleBracket]\), \({1, 5}, {3, 4}\)]\)+
\!\(\*SubscriptBox[\(\[LeftAngleBracket]X\[RightAngleBracket]\), \({2, 5}, {3, 4}\)]\)-
\!\(\*SubscriptBox[\(\[LeftAngleBracket]X\[RightAngleBracket]\), \({1, 2}, {3, 5}\)]\)+
\!\(\*SubscriptBox[\(\[LeftAngleBracket]X\[RightAngleBracket]\), \({1, 4}, {3, 5}\)]\)-
\!\(\*SubscriptBox[\(\[LeftAngleBracket]X\[RightAngleBracket]\), \({2, 4}, {3, 5}\)]\)+
\!\(\*SubscriptBox[\(\[LeftAngleBracket]X\[RightAngleBracket]\), \({1, 2}, {4, 5}\)]\)-
\!\(\*SubscriptBox[\(\[LeftAngleBracket]X\[RightAngleBracket]\), \({1, 3}, {4, 5}\)]\)+
\!\(\*SubscriptBox[\(\[LeftAngleBracket]X\[RightAngleBracket]\), \({2, 3}, {4, 5}\)]\))/4+Alt[][ 
\!\(\*SubscriptBox[\(\[LeftAngleBracket]X\[RightAngleBracket]\), \({4, 5}\)]\)-
\!\(\*SubscriptBox[\(\[LeftAngleBracket]X\[RightAngleBracket]\), \({3, 5}\)]\)+
\!\(\*SubscriptBox[\(\[LeftAngleBracket]X\[RightAngleBracket]\), \({3, 4}\)]\)+
\!\(\*SubscriptBox[\(\[LeftAngleBracket]X\[RightAngleBracket]\), \({2, 5}\)]\)-
\!\(\*SubscriptBox[\(\[LeftAngleBracket]X\[RightAngleBracket]\), \({2, 4}\)]\)+
\!\(\*SubscriptBox[\(\[LeftAngleBracket]X\[RightAngleBracket]\), \({2, 3}\)]\)-
\!\(\*SubscriptBox[\(\[LeftAngleBracket]X\[RightAngleBracket]\), \({1, 5}\)]\)+
\!\(\*SubscriptBox[\(\[LeftAngleBracket]X\[RightAngleBracket]\), \({1, 4}\)]\)-
\!\(\*SubscriptBox[\(\[LeftAngleBracket]X\[RightAngleBracket]\), \({1, 3}\)]\)+
\!\(\*SubscriptBox[\(\[LeftAngleBracket]X\[RightAngleBracket]\), \({1, 2}\)]\)]/2+Alt[][X]


(* ::Input::Initialization:: *)
Cliff[X_Star]:= X


(* ::Input::Initialization:: *)
Clear[Star]
Star[X__]:=Cliff[Apply[CircleTimes,{X}]]//AltToWedge


(* ::Input::Initialization:: *)
Clear[Star]
Star[X__/;IntegerQ[deg[X]]]:=GradedRescale[Cliff[Apply[CircleTimes,{X}]]]//AltToWedge


(* ::Input::Initialization:: *)
Clear[Star]
Star[X__/;IntegerQ[deg[X]]]:=GradedRescale[Cliff[Apply[CircleTimes,{X}]]]//AltToWedge


(* ::Input::Initialization:: *)
Clear[Star]
Star[X__]:=GradedRescale[Cliff[Apply[CircleTimes,{X}]]]//AltToWedge


(* ::Input::Initialization:: *)
Clear[Star]
Star[]:=1
Star[a___, Star[b___, c___], d___]   :=   Star[a, b, c, d];
Star[\[Omega]1___,c_?deg0Q,\[Omega]2___]:=c Star[\[Omega]1,\[Omega]2];
Star[\[Omega]1___,(c_?deg0Q) \[Omega]2_,\[Omega]3___]:=c Star[\[Omega]1,\[Omega]2,\[Omega]3];
Star[\[Omega]1___,\[Omega]2_Plus,\[Omega]3___]:=Map[Star[\[Omega]1,#,\[Omega]3]&,\[Omega]2];


(* ::Input::Initialization:: *)
Star[\[Omega]_?deg1Q]:=\[Omega]
Star[\[Omega]_?AntisymQ]:=\[Omega]


(* ::Input::Initialization:: *)
rev[Star[x__]]:=Star[rev[x]]


(* ::Input::Initialization:: *)
Contract[X_,Y_]/;IntegerQ[deg[X]]&&IntegerQ[deg[Y]]:=Module[{j,p,degX},
degX=deg[X];
p=Min[degX,deg[Y]];
If[p===0,Return[X Y]];
If[$WedgeNorm ==="MTW",
1/p! Subscript[\[LeftAngleBracket]X\[CircleTimes]Y\[RightAngleBracket], Apply[Sequence,Table[{j,degX+j},{j,p}]]]//ExpandTensor,
p! Subscript[\[LeftAngleBracket]X\[CircleTimes]Y\[RightAngleBracket], Apply[Sequence,Table[{j,degX+j},{j,p}]]]//ExpandTensor]]


(* ::Input::Initialization:: *)
DualOfForm[ X_,M_String]:= Contract[X,Wedge[Apply[Sequence,FrameVectors[M]]]]//ExpandTensor


(* ::Input::Initialization:: *)
DualOfCoform[ X_,M_String]:= Contract[Wedge[Apply[Sequence,FrameCovectors[M]]],X]//ExpandTensor


(* ::Input::Initialization:: *)
DualOfForm[ X_]:= DualOfForm[ X,$DefaultFrame]
DualOfCoform[ X_]:= DualOfCoform[ X,$DefaultFrame]


(* ::Input::Initialization:: *)
Slots[X_][s___?deg1Q]:=Fold[AngleBracket,X,Reverse[{s}]]


(* ::Input::Initialization:: *)
\[DifferentialD]\[Omega]_:=(-1)^deg[\[Omega]] (deg[\[Omega]]+1)alt[][\[Del]\[Omega]-deg[\[Omega]]/2\[LeftAngleBracket]\[Omega],TorsionOfFrame[]\[RightAngleBracket]]//ExpandTensor


(* ::Input::Initialization:: *)
dstar[v_]:=\[DifferentialD] DualOfCoform[v]


(* ::Input::Initialization:: *)
If[TrueQ[$PrintDebugLocation],Print["End of Part4"]]
SaveInitTime[]
